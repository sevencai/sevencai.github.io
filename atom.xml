<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Seven&#39;s Blog</title>
  <subtitle>Share, Learn, Enjoy, Keep</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sevencai.github.io/"/>
  <updated>2018-03-21T03:18:23.000Z</updated>
  <id>http://sevencai.github.io/</id>
  
  <author>
    <name>Seven Cai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>isObjEmpty/once function/template rendering/cdn的实现和解释</title>
    <link href="http://sevencai.github.io/2018/03/21/isObjEmpty-once-function-template-rendering-cdn%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E8%A7%A3%E9%87%8A/"/>
    <id>http://sevencai.github.io/2018/03/21/isObjEmpty-once-function-template-rendering-cdn的实现和解释/</id>
    <published>2018-03-21T03:03:57.000Z</published>
    <updated>2018-03-21T03:18:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>总结了几种判断 Object 是否为空的方法<br>总结 once function (只执行一次函数代码)<br>实现两种简单的字符串模板替换方法<br>重新归纳总结了下CDN和DNS的名词解释</p>
</blockquote>
<hr>
<h1 id="once-function-让函数只执行一次"><a href="#once-function-让函数只执行一次" class="headerlink" title="once function 让函数只执行一次"></a>once function 让函数只执行一次</h1><p>这里利用了闭包很好的保存了内层函数的返回值内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 定义</span><br><span class="line">const once = (fn, context) =&gt; &#123;</span><br><span class="line"> var result</span><br><span class="line"></span><br><span class="line"> return function () &#123;</span><br><span class="line">  if (fn) &#123;</span><br><span class="line">   result = fn.apply(context || this, arguments)</span><br><span class="line">   fn = null</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return result</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line">let logOnce = once(function () &#123;</span><br><span class="line"> return Array.prototype.slice.call(arguments)[0]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">logOnce(4,5)  // get 4</span><br><span class="line">logOnce(6,7)  // get 4</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="实现简单的模板字符串替换"><a href="#实现简单的模板字符串替换" class="headerlink" title="实现简单的模板字符串替换"></a>实现简单的模板字符串替换</h1><p>经常会有下面的需求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let template = `我叫&#123;&#123;name&#125;&#125;, 我的性别是&#123;&#123;sex&#125;&#125;`</span><br><span class="line">let person = &#123;</span><br><span class="line"> name: &apos;Seven&apos;,</span><br><span class="line"> sex: &apos;female&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(&apos;我叫Seven, 我的性别是female&apos;)</span><br></pre></td></tr></table></figure></p>
<p>下面是一种简单的实现，把模板和对象，结合为目标字符串，方法1如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const parseTemplateByRegFunc = (obj, template) =&gt; &#123;</span><br><span class="line"> return template.replace(/\&#123;\&#123;(.*?)\&#125;\&#125;/g, (match, key) =&gt; obj[key.trim()])</span><br><span class="line">&#125;</span><br><span class="line">parseTemplateByRegFunc(&#123;name: &apos;seven&apos;&#125;, &apos;我叫&#123;&#123; name&#125;&#125;&apos;) // 我叫seven</span><br></pre></td></tr></table></figure></p>
<p>方法2比较容易想到，实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const parseTemplateByObjectKeys = (obj, template) =&gt; &#123;</span><br><span class="line"> Object.keys(obj).forEach(key =&gt; &#123;</span><br><span class="line">  template = template.replace(new RegExp(`&#123;&#123;\\s*$&#123;key&#125;\\s*&#125;&#125;`, &apos;g&apos;), obj[key])</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> return template</span><br><span class="line">&#125;</span><br><span class="line">parseTemplateByObjectKeys(&#123;name: &apos;seven&apos;&#125;, &apos;我叫&#123;&#123; name&#125;&#125;&apos;) // 我叫seven</span><br></pre></td></tr></table></figure></p>
<p>简单的把 obj 里面每个key 都替换一次。方法1用到的是replace的特性。</p>
<hr>
<h1 id="关于-CDN"><a href="#关于-CDN" class="headerlink" title="关于 CDN"></a>关于 CDN</h1><p>DNS 是域名解析系统，它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。其中有一项技术是会找到一个合适的IP给用户。这种根据每台机器的负载量，该机器离用户地理位置的距离等等，返回合适的IP的技术称之为 DNS 重定向。CDN就是利用的DNS重定向技术。</p>
<blockquote>
<p>CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，<strong>CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度</strong>。</p>
</blockquote>
<p>上面的内容以前是知道的，这里重新归纳了下。</p>
<hr>
<h1 id="isObjEmpty-的实现（判断对象是否为空）"><a href="#isObjEmpty-的实现（判断对象是否为空）" class="headerlink" title="isObjEmpty 的实现（判断对象是否为空）"></a>isObjEmpty 的实现（判断对象是否为空）</h1><p>使用 for … in，如果进入了循坏，代表对象不为空：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (let key in obj) &#123;</span><br><span class="line"> if (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">  return false</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">return true</span><br></pre></td></tr></table></figure></p>
<p>使用 Object keys， 得到空数组，则代表对象为空：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return Object.keys(obj).length === 0</span><br></pre></td></tr></table></figure></p>
<p>使用 JSON.stringify 和 空对象对比：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return JSON.stringify(obj) === JSON.stringify(&#123;&#125;)</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;总结了几种判断 Object 是否为空的方法&lt;br&gt;总结 once function (只执行一次函数代码)&lt;br&gt;实现两种简单的字符串模板替换方法&lt;br&gt;重新归纳总结了下CDN和DNS的名词解释&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h
    
    </summary>
    
    
      <category term="Javascript" scheme="http://sevencai.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>进阶我的Vim</title>
    <link href="http://sevencai.github.io/2018/03/15/%E8%BF%9B%E9%98%B6%E6%88%91%E7%9A%84Vim/"/>
    <id>http://sevencai.github.io/2018/03/15/进阶我的Vim/</id>
    <published>2018-03-15T13:02:14.000Z</published>
    <updated>2018-03-15T13:17:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这两天做了一个很繁琐的需求，简单的来说，就是把一个产品配置的复杂的excel表，转入为json, 然后再用 javascript 脚本拼接为对应 php 页面可执行代码。繁琐的是配置多且杂，并且产品的归类excel 转换为的 json 并不可用。于是我还需要在他们的excel表里，进行更改。其实这个工作应该做一个配置台，让产品去维护。 以后就不用开发手动维护这个配置表。</p>
</blockquote>
<p>总之是提前做完了，虽然做的过程中, 不是怀着非常愉快的心情做的。晚上剩了点多的时间，把 vim 稍微进阶了一点。以前的基本命令都已经熟练使用了。现在总结下用的不是很熟的几个地方。</p>
<hr>
<h1 id="几个还没有用熟练的指令"><a href="#几个还没有用熟练的指令" class="headerlink" title="几个还没有用熟练的指令"></a>几个还没有用熟练的指令</h1><p><code>cw</code> 替换从光标所在位置后到一个单词结尾的字符, 不同于<code>a,i,o</code>哦。</p>
<p><code>0,$,^,g_</code> 的区别和联系。<code>0,$</code>是到行头和行尾，<code>^,g_</code>到非blank字符位置。</p>
<p><code>ctrl+r</code> 和 <code>u</code>, 因为 WebStorm 里这些都还可以用以前的 <code>ctrl+z</code> 之类的执行。所以这两个命令有点被我忽略了。其实应该改过来。</p>
<p><code>w</code> 到下一个单词的开头。<code>e</code>  到下一个单词的结尾。如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。</p>
<hr>
<h1 id="查找超能力"><a href="#查找超能力" class="headerlink" title="查找超能力"></a>查找超能力</h1><ol>
<li><code>fa</code>  到下一个为a的字符处，你也可以fs到下一个为s的字符。</li>
<li><code>t,</code>  到逗号前的第一个字符。逗号可以变成其它字符。</li>
<li><code>3fa</code>  在当前行查找第三个出现的a。</li>
<li><code>F和T</code> 和 <code>f和t</code> 一样，只不过是相反方向。</li>
<li><code>/pattern</code>  搜索 <code>pattern</code>  的字符串, 如果又多个，按n到下一个。</li>
<li><code>t,</code> 到逗号前的第一个字符。逗号可以变成其它字符。</li>
<li><code>dt.</code> 删除当前字符到<code>.</code>为止的所有内容。</li>
</ol>
<p>注意补充下<code>normal</code>模式下按<code>/</code>即可进入查找模式， n为下一个，N为上一个。如果是 <code>/singer\c</code>代表查找singer,并且大小写不敏感。因为默认情况下，它是大小写敏感的。相应的，<code>\C</code>代表大小写敏感。</p>
<p>你还可以在此模式下加入正则表达式，比如<code>/inger$</code> ，这时以<code>inger</code>结尾的都会被查出来。</p>
<p>在<code>normal</code>模式下的查找，还可以使用直接按<code>*</code>,来查找当前光标所在的单词。这时候的查找的单词前后都是空白字符或者标点符号。例如当前为<code>foo</code>， 可以匹配<code>foo bar</code>中的<code>foo</code>，但不可匹配<code>foobar</code>中的<code>foo</code>。<strong>经常用于查找函数</strong>。如果想要包含关系，使用<code>g*</code>即可。</p>
<hr>
<h1 id="替换能力"><a href="#替换能力" class="headerlink" title="替换能力"></a>替换能力</h1><p>刚刚提到了查找的能力，<code>normal</code>下使用<code>/</code>即可进入查找模式。替换模式则是使用<code>:s</code>。具体情况如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:&#123;作用范围&#125;s/&#123;目标&#125;/&#123;替换&#125;/&#123;替换标志&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>:%s/singer/author/g</code>会在全局范围(<code>%</code>)查找<code>singer</code>并替换为<code>author</code>，所有出现都会被替换（<code>g</code>）。如果使用<code>:s/singer/author</code>则只会在当前行替换一个。</p>
<p>这里的<strong>作用范围</strong>可以总结如下：</p>
<blockquote>
<ol>
<li>%全文查找， 如 :%s/singer/author/g</li>
<li>不填写默认当前行，如:s/singer/author/g</li>
<li>:5,12s/singer/author/g, 第5-12行</li>
<li>:.,+2s/singer/author/g， 当前行和接下来的2行。 注意<code>.</code>是当前行， <code>,</code>是分隔符</li>
<li>:’&lt;,’&gt;s/singer/author/g把选区内的内容替换。注意下：在Visual模式下选择区域后输入<code>:</code>，Vim即可自动补全为 <code>:&#39;&lt;,&#39;&gt;</code>。WebStorm也会做同样的事情。</li>
</ol>
</blockquote>
<p>这里的<strong>替换标识</strong>可以总结如下代表：</p>
<blockquote>
<ol>
<li><code>%s/singer/author</code>, 空标识表示：只替换从光标位置开始，目标的第一次出现</li>
<li><code>%s/singer/author/g</code>, global 表示全局</li>
<li><code>i</code>表示大小写不敏感查找，<code>I</code>表示大小写敏感</li>
<li><code>:%s/singer/author/gc</code> c表示全局查找后替换需要被确认。它可能会弹出一句：Replace with author ?  (y/n/…)之类的东西。</li>
</ol>
</blockquote>
<hr>
<h1 id="区域选则-lt-action-gt-a-lt-object-gt-以及-lt-action-gt-i-lt-object-gt"><a href="#区域选则-lt-action-gt-a-lt-object-gt-以及-lt-action-gt-i-lt-object-gt" class="headerlink" title="区域选则 &lt;action&gt;a&lt;object&gt;以及 &lt;action&gt;i&lt;object&gt;"></a>区域选则 <code>&lt;action&gt;a&lt;object&gt;</code>以及 <code>&lt;action&gt;i&lt;object&gt;</code></h1><p>其实这个我已经很熟了，今天看到了别人的总结（注：下面的这段为引用内容，引用地址为：<a href="https://coolshell.cn/articles/5426.html" target="_blank" rel="noopener">coolshell</a>）。</p>
<blockquote>
<p>action可以是任何的命令，如 <code>d</code>  (删除),  <code>y</code>  (拷贝),  <code>v</code>  (可以视模式选择)。</p>
<p>object 可能是： <code>w</code>  一个单词， <code>W</code>  一个以空格为分隔的单词， <code>s</code>  一个句字， <code>p</code>  一个段落。也可以是一个特别的字符：<code>&quot;、</code> <code>&#39;、</code> <code>)、</code> <code>}、</code> <code>]。</code></p>
</blockquote>
<p>a和i的区别也很好分。i不包括，a包括了。看下面这个例子。</p>
<p>假设你有一个字符串 <code>(map (+) (&quot;foo&quot;))</code>.而光标键在第一个 <code>o</code> 的位置。</p>
<blockquote>
<ul>
<li><code>vi&quot;</code>  → 会选择 <code>foo</code>.</li>
<li><code>va&quot;</code>  → 会选择 <code>&quot;foo&quot;</code>.</li>
<li><code>vi)</code>  → 会选择 <code>&quot;foo&quot;</code>.</li>
<li><code>va)</code>  → 会选择<code>(&quot;foo&quot;)</code>.</li>
<li><code>v2i)</code>  → 会选择 <code>map (+) (&quot;foo&quot;)</code></li>
<li><code>v2a)</code>  → 会选择 <code>(map (+) (&quot;foo&quot;))</code></li>
</ul>
</blockquote>
<hr>
<h1 id="VIM-的Visual模式"><a href="#VIM-的Visual模式" class="headerlink" title="VIM 的Visual模式"></a>VIM 的Visual模式</h1><p>vim 分为3中 visual 模式，分别是：</p>
<h2 id="Visual-默认模式："><a href="#Visual-默认模式：" class="headerlink" title="Visual 默认模式："></a>Visual 默认模式：</h2><p><code>normal</code> 下 ，按 v 进入 <code>visual</code> 默认模式。这个模式下可以 hjkl 进行各种上下移动。选中文本后，可以进行 y,d,p,^,$等操作。</p>
<h2 id="Visual-Line-模式"><a href="#Visual-Line-模式" class="headerlink" title="Visual Line 模式"></a>Visual Line 模式</h2><p><code>normal</code>下，按 V 进入 <code>visual line</code>模式。 使用 j/k键可以选中一行或者多行。进行正行操作。</p>
<h2 id="Visual-Block-模式"><a href="#Visual-Block-模式" class="headerlink" title="Visual Block 模式"></a>Visual Block 模式</h2><p>按住 <code>ctrl + v</code>, 进入 <code>visual block</code>模式。此模式下，选中想要选中的内容（可以结合$^）。选中后，输入<code>I,i,A,a,C,c</code>等操作，输入想要输入的内容。再按下<code>Esc</code>键，即可全部行都有填入的内容。类似于 sublime。</p>
<p>注意 I，A，C 的区别，就跟他们原来的意思一样，比如I,A是插入，只是插入的地方可能不同。C是替换。</p>
<p>比如<code>Ctrl+v jj$</code>到每一行行末，再I，填入<code>;</code>，就可以几行一起填分好了。</p>
<p><strong>Visual Block 模式下，还可以做下面这些事情</strong>：</p>
<ul>
<li>可以结合<code>&lt;&gt;</code>进行移动。</li>
<li>使用<code>J</code>把选中的行连接起来变成 一行。</li>
<li>使用<code>=</code>自动给缩进。</li>
</ul>
<p>这些功能都很好用。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里面的东西，有些大多我都用过，也知道。但是每次去用的时候有时候还要再去查下命令。怪不好的。总结下，以后忘记了就在博客里翻翻吧。开心。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这两天做了一个很繁琐的需求，简单的来说，就是把一个产品配置的复杂的excel表，转入为json, 然后再用 javascript 脚本拼接为对应 php 页面可执行代码。繁琐的是配置多且杂，并且产品的归类excel 转换为的 json 并不可用。于
    
    </summary>
    
    
      <category term="工具/配置" scheme="http://sevencai.github.io/tags/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>记最新几个新的小知识点</title>
    <link href="http://sevencai.github.io/2018/03/08/%E8%AE%B0%E6%9C%80%E6%96%B0%E5%87%A0%E4%B8%AA%E6%96%B0%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://sevencai.github.io/2018/03/08/记最新几个新的小知识点/</id>
    <published>2018-03-08T08:15:01.000Z</published>
    <updated>2018-03-08T08:34:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录下最近零零散散学的几个知识点。</p>
<hr>
<h1 id="图片显示方式"><a href="#图片显示方式" class="headerlink" title="图片显示方式"></a>图片显示方式</h1><p>有的时候看到网络上有些图示由模糊变清晰，有些是一直清晰，但是会逐行显示（慢慢的展示全）， 是什么因素导致了他们的显示方式？</p>
<p>实际是图片在<strong>压缩的时候算法</strong>决定了它的显示方式。比如：<br>小波算法：先模糊然后清晰<br>离散余弦变换：清晰，逐行显示</p>
<p>前端可以准备多种样子或者分辨率的图片，当网络好或者网络不好，再或者不同的屏幕分辨率的图片。现在出来了一种新的方式：</p>
<p>HTML <code>&lt;picture&gt;</code>元素是一个容器，用来为其内部特定的 <code>&lt;img&gt;</code>元素提供多样的 <code>&lt;source&gt;</code> 元素。浏览器会根据当前页面（即图片所在的盒子的容器）的布局以及当前浏览的设备（比如普通的屏幕和高清屏幕）去从中选择最合适的资源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;picture&gt;</span><br><span class="line">	&lt;source srcset=&quot;smaller.png&quot; media=&quot;(max-width:700px)&quot;&gt;&lt;/source&gt;</span><br><span class="line">	&lt;source srcset=&quot;bigger.png&quot; media=&quot;(max-width:1000px)&quot;&gt;&lt;/source&gt;</span><br><span class="line">	&lt;img srcset=&quot;default.png&quot; alt=&quot;美女&quot;&gt;</span><br><span class="line">&lt;/picture&gt;</span><br></pre></td></tr></table></figure></p>
<p>当然并不是每个浏览器都支持,在实验中。</p>
<hr>
<h1 id="图片分类"><a href="#图片分类" class="headerlink" title="图片分类"></a>图片分类</h1><ol>
<li>jpg,jpeg,以24位颜色存储单个位图，可压缩</li>
<li>png，可做透明图片，体积较大，需要清晰的显示颜色丰富的图片时用</li>
<li>gif，全透/全不透，不支持半透明</li>
<li>svg，矢量图，地图中用的多，体积小</li>
</ol>
<p>注意有的时候只把 尾缀比如.jpg更改为.png 不行，因为只是名称改了，实际上它本质没有更改。需要用工具转换。</p>
<hr>
<h1 id="播放器形式"><a href="#播放器形式" class="headerlink" title="播放器形式"></a>播放器形式</h1><p>【video播放器】<br>优点：不需要下载额外资源（如：flash播放器需要下载.swf辅助插件），控制简单有较为完整的api。<br>缺点：每个浏览器的外观都不一样，如果要统一需要自己写ui实现。</p>
<p>【flash播放器】<br>flash 播放器，兼容性比较好，只需要下载 flash player 即可使用。<br>缺点是必须要下载额外的 swf 才可以。</p>
<p>视频的外部资源可使用<strong> link 加载样式</strong>，这样可以被提前加载。让视频先运行。这是个小 hack。</p>
<hr>
<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p><strong>页面刷新的时候 sessionStorage (标准浏览器) 是仍然存在的，只有关闭的时候才不存在。同一个浏览器，不同的标签，也是不共享的。</strong></p>
<p>userData 是 IE 的先驱者。</p>
<p>cookie 所有浏览器基本都支持，大小限制不同浏览器也不同，会把数据带给服务器。</p>
<p>openDataBase 是类似于本地数据库这种形式。可以做的东西更多。</p>
<p>localStorage 的缺点是 IE9, IE10 不支持, 注意下 safari 读不到 chrome 的 localStorage。</p>
<p>localStorage 不能跨域，所以存储的时候是在 localStorage 下，按照域名存放的。</p>
<hr>
<h1 id="造成页面卡死的原因"><a href="#造成页面卡死的原因" class="headerlink" title="造成页面卡死的原因"></a>造成页面卡死的原因</h1><p>如果页面突然一直 loading 或者 卡死，可能有以下一些原因。</p>
<ol>
<li>死循环 (while 1 了 ？)</li>
<li>大文件占用资源 loading</li>
<li>频繁的读写本地资源</li>
</ol>
<hr>
<h1 id="页面的重绘和回流"><a href="#页面的重绘和回流" class="headerlink" title="页面的重绘和回流"></a>页面的重绘和回流</h1><p>回流一定触发重绘，但是重绘不一定触发回流。<br>DOM元素的添加、修改(内容)、删除(Reflow+Repaint)<br>仅修改DOM元素的字体颜色(只有Repaint、因为不需要调整布局)</p>
<p>如何判断是否重绘了呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome 开发者工具 =&gt;  settings ,more tools, rendering, Paint flashing即可, 看到绿色的部分即为发生了重绘的部分</span><br></pre></td></tr></table></figure></p>
<p>触发重绘可能有的情况：<br>1、改变字体<br>2、增加或移除样式表<br>3、内容变化，如用户在input框输入文字<br>4、激活css伪类，如:hover<br>5、脚本操作DOM<br>6、计算可见的宽高属性<br>7、设置style属性的值</p>
<hr>
<h1 id="git-常用命令总结"><a href="#git-常用命令总结" class="headerlink" title="git 常用命令总结"></a>git 常用命令总结</h1><p>我总结了已经好多次了，有些命令一段时间不用又会忘记。好记性不如烂笔头。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline</span><br><span class="line">git log --graph</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line">git reset --hard 版本（可省略写）</span><br><span class="line"></span><br><span class="line">// add 后放弃</span><br><span class="line">git checkout -- file</span><br><span class="line"></span><br><span class="line">// add -&gt; commit 后放弃</span><br><span class="line">git reset HEAD file</span><br><span class="line">git checkout --file</span><br><span class="line"></span><br><span class="line">git remote add origin git@server-name:path/repo-name.git</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">git checkout -b dev</span><br><span class="line">等同于</span><br><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line">git branch -d/-D dev</span><br><span class="line"></span><br><span class="line">git stash apply 恢复</span><br><span class="line">git stash drop 恢复后删除 stash</span><br><span class="line">git stash pop = git stash apply + git stash drop</span><br><span class="line"></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">git branch --set-upstream dev origin/dev</span><br><span class="line"></span><br><span class="line">git tag name 打标签</span><br><span class="line">git tag 显示所有 tag</span><br><span class="line">git tag -d v0.1 删除某个tag</span><br><span class="line">git push origin v1.0 推送某个标签</span><br><span class="line">git push origin --tags 一次推送所有 tag</span><br></pre></td></tr></table></figure>
<p><strong>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场。</strong></p>
<p>rebase merge 的使用法则。</p>
<blockquote>
<p>In general the way to get the best of both worlds is to rebase local changes you’ve made but haven’t shared yet before you push them in order to clean up your story, but never rebase anything you’ve pushed somewhere</p>
</blockquote>
<hr>
<h1 id="学习一段代码"><a href="#学习一段代码" class="headerlink" title="学习一段代码"></a>学习一段代码</h1><p>这是最近在慕课上看到的一段代码，没事没事看看别人的代码还是有点收获的，比较下自己觉得好的和自己觉得别人可能有所需要改进的。下面这些代码是一位老师写的，大概就是根据版本号来判断资源是不是需要缓存，如果版本号更新了，就去重新拉取资源，并且更新本地缓存。如果版本号没有更新，就直接用本地的缓存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line">window.Xhrfactory = function() &#123;</span><br><span class="line">    this.init.apply(this, arguments);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">window.Xhrfactory.prototype = &#123;</span><br><span class="line">    init: function() &#123;</span><br><span class="line">        this.xhr = this.create();</span><br><span class="line">    &#125;,</span><br><span class="line">    create: function() &#123;</span><br><span class="line">        var xhr = null;</span><br><span class="line">        if (window.XMLHttpRequest) &#123;</span><br><span class="line">            xhr = new XMLHttpRequest();</span><br><span class="line">        &#125; else if (window.ActiveXobject) &#123;</span><br><span class="line">            xhr = new ActiveXobject(&apos;Msml2.Xmlhttp&apos;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            xhr = new ActiveXobject(&apos;Microsoft.Xmlhttp&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        return xhr;</span><br><span class="line">    &#125;,</span><br><span class="line">    readystate: function(callback) &#123;</span><br><span class="line">        this.xhr.onreadystatechange = function() &#123;</span><br><span class="line">            if (this.readyState === 4 &amp;&amp; this.status === 200) &#123;</span><br><span class="line">                callback(this.responseText);</span><br><span class="line">                console.log(this);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    para: function(data) &#123;</span><br><span class="line">        var datastr = &apos;&apos;;</span><br><span class="line">        if (data &amp;&amp; Object.prototype.toString.call(data) === &quot;[object object]&quot;) &#123;</span><br><span class="line">            for (var i in data) &#123;</span><br><span class="line">                for (var i = 0; i &lt; lenght; i++) &#123;</span><br><span class="line">                    datastr += i + &apos;=&apos;</span><br><span class="line">                    data[i] + &apos;&amp;&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    get: function(url, data, callback) &#123;</span><br><span class="line"></span><br><span class="line">        this.readystate(callback);</span><br><span class="line">        var newurl = url;</span><br><span class="line">        var datastr = this.para(data);</span><br><span class="line">        newurl = url + &apos;?&apos; + datastr;</span><br><span class="line">        this.xhr.open(&apos;get&apos;, newurl, true);</span><br><span class="line">        this.xhr.send(null);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 后台程序的模板变量</span><br><span class="line">var localStorageSign = &apos;on&apos;;</span><br><span class="line">// 版本控制</span><br><span class="line">var resourceVersion = &apos;12312443243202&apos;;</span><br><span class="line"></span><br><span class="line">// 本地的Sdk主方法</span><br><span class="line">window.mLocalSdk = &#123;</span><br><span class="line"></span><br><span class="line">    resourceJavascriptList: [&#123;</span><br><span class="line">        id: &apos;1232131241&apos;,</span><br><span class="line">        url: &apos;/dest/js/lib/core.js&apos;,</span><br><span class="line">        type: &apos;javascript&apos;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        id: &apos;1232131242&apos;,</span><br><span class="line">        url: &apos;/dest/js/lib/log.js&apos;,</span><br><span class="line">        type: &apos;javascript&apos;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        id: &apos;1232131243&apos;,</span><br><span class="line">        url: &apos;/dest/js/lib/report.js&apos;,</span><br><span class="line">        type: &apos;javascript&apos;</span><br><span class="line">    &#125;],</span><br><span class="line"></span><br><span class="line">    needUpdate: (function() &#123;</span><br><span class="line">        return localStorage.getItem(&apos;resourceVersion&apos;) === resourceVersion;</span><br><span class="line">    &#125;)(),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    isIE: (function() &#123;</span><br><span class="line">            var v = 3;</span><br><span class="line">            var div = document.createElement(&apos;div&apos;);</span><br><span class="line">            var all = div.getElementsByTagName(&apos;i&apos;);</span><br><span class="line">            while (</span><br><span class="line">                div.innerHTML = &apos;&lt;!-- [if gt IE&apos; + (++v) + &apos;]&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif] --&gt;&apos;, !all[0])</span><br><span class="line">                 &#123;</span><br><span class="line">                    if(v &gt; 11)&#123;return false&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            return v &gt; 3 ? v : false;</span><br><span class="line">        &#125;)(),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    checkHedge: function() &#123;</span><br><span class="line">        var localStorageLength = localStorage.length;</span><br><span class="line">        var localStorageSize = 0;</span><br><span class="line">        for (var i = 0; i &lt; localStorageLength; i++) &#123;</span><br><span class="line">            var key = localStorage.key(i);</span><br><span class="line">            localStorageSize += localStorage.getItem(key).length;</span><br><span class="line">        &#125;</span><br><span class="line">        return localStorageSize;</span><br><span class="line">    &#125;,</span><br><span class="line">    saveSdk: function() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            localStorage.setItem(&apos;resourceVersion&apos;, resourceVersion);</span><br><span class="line">        &#125; catch (oException) &#123;</span><br><span class="line">            if (oException.name == &apos;QuotaExceededError&apos;) &#123;</span><br><span class="line">                localStorage.clear();</span><br><span class="line">                localStorage.setItem(&apos;resourceVersion&apos;, resourceVersion);</span><br><span class="line">            &#125;</span><br><span class="line">            alert(&apos;QuotaExceededError&apos;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (var i = 0; i &lt; this.resourceJavascriptList.length; i++) &#123;</span><br><span class="line">            _self = this;</span><br><span class="line">            (function(i)&#123;</span><br><span class="line">                var scriptId = _self.resourceJavascriptList[i][&apos;id&apos;];</span><br><span class="line">                var xhr = new Xhrfactory();</span><br><span class="line">                xhr.get(_self.resourceJavascriptList[i][&apos;url&apos;], null, function(data) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        localStorage.setItem(scriptId, data);</span><br><span class="line">                    &#125; catch (oException) &#123;</span><br><span class="line">                        console.log(&apos;oException&apos;,oException);</span><br><span class="line">                        if (oException.name == &apos;QuotaExceededError&apos;) &#123;</span><br><span class="line">                            localStorage.clear();</span><br><span class="line">                            localStorage.setItem(scriptId, data);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)(i);</span><br><span class="line">            // XXX addhtml 加载到页面</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    startup: function() &#123;</span><br><span class="line">        // 满足一下条件</span><br><span class="line">        var _self = this;</span><br><span class="line">        if (localStorageSign === &apos;on&apos; &amp;&amp; !this.isIE &amp;&amp; window.localStorage) &#123;</span><br><span class="line"></span><br><span class="line">            if (this.needUpdate === true) &#123;</span><br><span class="line">                //不需要更新</span><br><span class="line">                return (function() &#123;</span><br><span class="line"></span><br><span class="line">                    for (var i = 0; i &lt; _self.resourceJavascriptList.length; i++) &#123;</span><br><span class="line">                        // 获取本地缓存列表 输入到html上</span><br><span class="line">                        var scriptId = _self.resourceJavascriptList[i][&apos;id&apos;];</span><br><span class="line">                        // 把我们的列表中的js文件 渲染到页面</span><br><span class="line"></span><br><span class="line">                        // 去读取本地文件</span><br><span class="line">                        window.mDomUtils.addJavascriptByInline(scriptId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)();</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 保存我们请求到的js文件</span><br><span class="line">                return (function() &#123;</span><br><span class="line">                    _self.saveSdk();</span><br><span class="line">                    for (var i = 0; i &lt; _self.resourceJavascriptList.length; i++) &#123;</span><br><span class="line">                        // 获取本地缓存列表 输入到html上</span><br><span class="line">                        var scriptId = _self.resourceJavascriptList[i][&apos;id&apos;];</span><br><span class="line">                        // 把我们的 列表中的js文件 渲染到页面</span><br><span class="line"></span><br><span class="line">                        // 去读取本地文件</span><br><span class="line">                        window.mDomUtils.addJavascriptByInline(scriptId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                //***</span><br><span class="line">                // 把从网络获取到的javascript 输入到html上；</span><br><span class="line">                // save localstroage</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line"></span><br><span class="line">            return function() &#123;</span><br><span class="line">                alert(2);</span><br><span class="line">                    for (var i = 0; i &lt; resourceJavascriptList.length; i++) &#123;</span><br><span class="line">                        // 获取本地缓存列表 输入到html上</span><br><span class="line">                        var scriptId = resourceJavascriptList[i][&apos;scriptId&apos;];</span><br><span class="line">                        // 把我们的列表中的js文件 渲染到页面</span><br><span class="line"></span><br><span class="line">                        // 读取网络上得到的资源</span><br><span class="line">                        window.mDomUtils.addJavascriptByLink(scriptId, resourceJavascriptList[i][&apos;url&apos;]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //***</span><br><span class="line">                // 把从网络获取到的javascript 输入到html上；</span><br><span class="line">                // 原始方法加载javascriopt</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    // 写入本地localstorage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">window.mDomUtils = &#123;</span><br><span class="line">    // 内联方式添加javascript</span><br><span class="line">    addJavascriptByInline: function(scriptId) &#123;</span><br><span class="line">        var script = document.createElement(&apos;script&apos;);</span><br><span class="line">        script.setAttribute(&apos;type&apos;, &apos;text/javascript&apos;);</span><br><span class="line">        script.id = scriptId;</span><br><span class="line">        var heads = document.getElementsByTagName(&apos;head&apos;);</span><br><span class="line">        if (heads.lenght) &#123;</span><br><span class="line">            heads[0].appendChild(script);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            document.documentElement.appendChild(script);</span><br><span class="line">        &#125;</span><br><span class="line">        script.innerHTML = localStorage.getItem(scriptId);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 外链方式添加javascript</span><br><span class="line">    addJavascriptByLink: function(scriptId, url) &#123;</span><br><span class="line">        var script = document.createElemet(&apos;script&apos;);</span><br><span class="line">        script.setAttribute(&apos;type&apos;, &apos;text/javascript&apos;);</span><br><span class="line">        script.setAttribute(&apos;src&apos;, url);</span><br><span class="line">        script.id = scriptId;</span><br><span class="line">        var heads = document.getElementsByTagName(&apos;head&apos;);</span><br><span class="line">        if (heads.length) &#123;</span><br><span class="line">            heads[0].appendChild(script);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            document.documentElement.appendChild(script);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 外链方式添加css</span><br><span class="line"></span><br><span class="line">    addCssByLink: function(url) &#123;</span><br><span class="line">        var doc = document;</span><br><span class="line">        var link = doc.createElemet(&apos;link&apos;);</span><br><span class="line">        link.setAttribute(&apos;type&apos;, &apos;text/css&apos;);</span><br><span class="line">        link.setAttribute(&apos;rel&apos;, &apos;stylesheet&apos;);</span><br><span class="line">        link.setAttribute(&apos;href&apos;, url);</span><br><span class="line">        var heads = doc.getElementsByTagName(&apos;head&apos;);</span><br><span class="line">        if (heads.length) &#123;</span><br><span class="line">            heads[0].appendChild(link);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            doc.documentElement.appendChild(link);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 外链方式添加css</span><br><span class="line"></span><br><span class="line">        addCssByLink: function(cssString) &#123;</span><br><span class="line">        var doc = document;</span><br><span class="line">        var link = doc.createElemet(&apos;link&apos;);</span><br><span class="line">        link.setAttribute(&apos;type&apos;, &apos;text/css&apos;);</span><br><span class="line">        link.setAttribute(&apos;rel&apos;, &apos;stylesheet&apos;);</span><br><span class="line"></span><br><span class="line">        if (link.stylesheet) &#123;</span><br><span class="line">            // IE支持</span><br><span class="line">            link.stylesheet.cssText = cssString;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // w3c</span><br><span class="line">            var cssText = doc.createTextNode(cssString);</span><br><span class="line">            link.appendChild(cssText);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var heads = doc.getElementsByTagName(&apos;head&apos;);</span><br><span class="line">        if (heads.length) &#123;</span><br><span class="line">            heads[0].appendChild(link);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            doc.documentElement.appendChild(link);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>觉得比较好的，一个是它判断 IE 的方法，利用了只有 IE 可以识别的特性。另外一个是它判断 localStorage 缓存的大小。</p>
<p>还有一个是它利用了自执行函数来去做其实只用去初始化一次的工作。比如判断本地的缓存是否是需要跟新（根据版本号），而不是做成一个函数每次去执行一次。</p>
<p>不好的就是，可能是因为现场写代码，随机想的，所以有些地方可以封装，都没有封装好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下最近零零散散学的几个知识点。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;图片显示方式&quot;&gt;&lt;a href=&quot;#图片显示方式&quot; class=&quot;headerlink&quot; title=&quot;图片显示方式&quot;&gt;&lt;/a&gt;图片显示方式&lt;/h1&gt;&lt;p&gt;有的时候看到网络上有些图示由模糊变清晰，有些是一
    
    </summary>
    
    
      <category term="知识点" scheme="http://sevencai.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>小程序使用 component 组件重构</title>
    <link href="http://sevencai.github.io/2018/03/05/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8-component-%E7%BB%84%E4%BB%B6%E9%87%8D%E6%9E%84/"/>
    <id>http://sevencai.github.io/2018/03/05/小程序使用-component-组件重构/</id>
    <published>2018-03-05T13:40:58.000Z</published>
    <updated>2018-03-05T13:48:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>世界上没有一蹴而就的事情，任何事情，都有起源，发展和未来。如果你跟他就关，那就适应它，而不要抱怨它的变化，或者抱怨他为什么不一开始就这么做。</p>
</blockquote>
<hr>
<h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><p>小程序后来出了 component, 看了看自己的代码，还是最初的 template + class,心里好难受。 于是花了2天时间重构了。这段时间没有产品排期，也就是说我是拿别的项目的时间去重构的。时间略紧张，不过还是一点点的完成了。</p>
<p>component 相当于一个完整的组件，你可以对这个组件定义不同的内容。有自己的事件和 data, 这个倒是跟 vue 很像。</p>
<p>但是注意 component 中的 css 除了继承属性（h1,em）等以外，其他的样子必须都写入 component 中。如果你不想做这件事，就把 app.wxss 引入到 component 中吧。（虽然我也很不情愿）</p>
<hr>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>用 <code>Component({})</code>声明。内部可以有自己的 data, methods, behaviors,还有类似于 vue 的 attach, ready 等函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rechargeItem <span class="keyword">from</span> <span class="string">'behaviors/jump-to-order'</span></span><br><span class="line"></span><br><span class="line">Component(&#123;</span><br><span class="line">  behaviors: [rechargeItem],</span><br><span class="line"></span><br><span class="line">  properties: &#123;</span><br><span class="line">     recommendList: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span>,</span><br><span class="line">      value: []</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">     bindClickEvent() &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>behaviors 可以理解为 mixins, 多个组件都可能用到同样的内容，就把它抽离为 behaviors 吧。 比如上面，调到订单页可以从很多 component 过来，比如 推荐，搜索。那么就抽离成一个 behavior, 用到的时候引入进来即可。</p>
<p>注意任何一个 component 都需要声明它是一个 component, 我猜测是要语义更好吧，免得跟 page 搞混了(但是 component 和 page 声明就不一样，其实没必要单独再在 json 中声明下？)。component 不需要再在 app.json 里面声明，因为它不是一个 page。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;component&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后需要引入这个组件的地方，这样引入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;usingComponents&quot;: &#123;</span><br><span class="line">    &quot;recommend&quot;: &quot;../page_component/recommend/recommend&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用的时候，直接引入即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;recommend recommendList=&quot;&#123;&#123;recommendList&#125;&#125;&quot;&gt;&lt;/recommend&gt;</span><br></pre></td></tr></table></figure></p>
<p>这里的 recommendList 类似于 vue 的 props, 可以用于从父组件（page）传递内容到子组件。</p>
<p>然后就再原先的 properties 中接受即可。也可以用 <code>this.data</code>访问到。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实是不想写这个文章的的，因为文章本身没有啥太大的意义，这些好好学习官网都可以知道的。但是不写的话总觉得自己这两天没干啥。但实际上，我觉得我自己做的事情有意义，因为代码更好了呀。而且可读性也更强了，是 component 的，template的，page的，api modules 的，都清清楚楚了。开心。</p>
<p>估计随后的一段时间都不会再碰小程序了，下次讲讲学习到的 vue 源码的内容吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;世界上没有一蹴而就的事情，任何事情，都有起源，发展和未来。如果你跟他就关，那就适应它，而不要抱怨它的变化，或者抱怨他为什么不一开始就这么做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;小记&quot;&gt;&lt;a href=&quot;#小记&quot; clas
    
    </summary>
    
    
      <category term="小程序" scheme="http://sevencai.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>函数立即表达式整理</title>
    <link href="http://sevencai.github.io/2018/02/27/%E5%87%BD%E6%95%B0%E7%AB%8B%E5%8D%B3%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E7%90%86/"/>
    <id>http://sevencai.github.io/2018/02/27/函数立即表达式整理/</id>
    <published>2018-02-27T14:09:32.000Z</published>
    <updated>2018-02-28T03:22:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要介绍的是 Javascript 的<strong>立即执行函数</strong>的比较与总结, 列举了现在大部分的立即执行函数的写法，并且分析了错误的原因和正确的原因。</p>
</blockquote>
<hr>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>来看几种写法，你能分辨出来，哪个是正确的，哪个是错误的吗？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 写法1</span><br><span class="line">function a() &#123;</span><br><span class="line">	console.log(&quot;a&quot;)</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">// 写法2</span><br><span class="line">(function b() &#123;</span><br><span class="line">	console.log(&quot;b&quot;)</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">// 写法3</span><br><span class="line">（function c() &#123;</span><br><span class="line">	console.log(&quot;c&quot;)</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">// 写法4</span><br><span class="line">var d = function d() &#123;</span><br><span class="line">	console.log(&quot;d&quot;)</span><br><span class="line">&#125;</span><br><span class="line">(d)()</span><br><span class="line"></span><br><span class="line">// 写法5</span><br><span class="line">var e = function e() &#123;</span><br><span class="line">	console.log(&quot;e&quot;)</span><br><span class="line">&#125;;</span><br><span class="line">(e)()</span><br><span class="line"></span><br><span class="line">// 写法6</span><br><span class="line">!function f() &#123;</span><br><span class="line">	console.log(&quot;f&quot;)</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">// 写法7</span><br><span class="line">+function g() &#123;</span><br><span class="line">	console.log(&quot;g&quot;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 写法8</span><br><span class="line">var h = function () &#123;</span><br><span class="line">	console.log(&quot;h&quot;)</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">// 写法9</span><br><span class="line">(a === 1) &amp;&amp; function () &#123; /* ... */ &#125; ();</span><br><span class="line"></span><br><span class="line">// 写法 10</span><br><span class="line">1, function () &#123; /* ... */ &#125;();</span><br><span class="line"></span><br><span class="line">// 写法 11</span><br><span class="line">function （）&#123;</span><br><span class="line">	console.log(&quot;a&quot;)</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">// 写法 12</span><br><span class="line">function j() &#123;</span><br><span class="line">	console.log(&quot;j&quot;)</span><br><span class="line">&#125;(1)</span><br></pre></td></tr></table></figure></p>
<p>上面的写法中，有几种是错误❌的，你找出来了吗？</p>
<hr>
<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>首先基本知识是，声明  javascript 的函数有两种方式，分别是语句（函数声明）的形式和表达式的形式，其中语句的形式是有变量提升的说法的，而表达式不会：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 函数声明</span><br><span class="line">function f() &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 表达式</span><br><span class="line">var f = function f() &#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>对于 Javscript 引擎而言， 如果 <code>function</code> 关键字出现在行首，会被解析成函数声明的形式。函数声明必须包括 ： 关键词 function, 函数名，形参，函数体。</strong></p>
<p>第一种（写法1）❌，因为直接开头出现 function 关键字， 有函数名，浏览器会认为这是函数声明，下面是函数的定义，但是它又是以圆括号结尾，所以就报错了。</p>
<p>实际上写法1等同于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">	// ...</span><br><span class="line">&#125;</span><br><span class="line">()</span><br></pre></td></tr></table></figure></p>
<p>这个空的<code>()</code>里面没有操作符，所以报了相应的错。<br>报错的内容是<code>Uncaught SyntaxError: Unexpected token )</code>。</p>
<p>而第11种（写法11），浏览器也认为是函数声明的形式，<strong>但是却没有找到函数名</strong>，所以也是错误❌的。报错是：<code>VM143:1 Uncaught SyntaxError: Unexpected token (</code> 。所以说这两种类似，但是报错的原因并不相同。</p>
<p>对于写法12， 实际上等同于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function j() &#123;</span><br><span class="line">	console.log(&quot;j&quot;)</span><br><span class="line">&#125;</span><br><span class="line">(1)</span><br></pre></td></tr></table></figure></p>
<p><strong>所以实际上，它不会报错，因为<code>()</code>有操作符，但是 j 函数也不会被执行， 最后返回的是 1， 因为只有 (1) 执行了。</strong></p>
<p>那么，为什么2，3写法是正确✅的呢？<strong>因为当浏览器解析碰到了<code>()</code>时，<code>()</code>里面不能包含函数声明，所以浏览器会把这个解析成函数表达式。当它是函数表达式的时候，自然就立即执行了。并且也不会报错。</strong></p>
<p>因此下面两种都是正确的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123; /* ... */ &#125;());</span><br><span class="line">(function()&#123; /* ... */ &#125;)();</span><br></pre></td></tr></table></figure></p>
<p>所以如果我们要让它可以被浏览器识别，那么就让浏览器知道它是一个表达式吧。 因此6，7，9，10他们都是正确的。9,10这两种写法，前面一个是表达式，浏览器自然也认为后面一个也是表达式。</p>
<p>这种称为<strong>“立即调用的函数表达式”（Immediately-Invoked Function Expression），简称 IIFE。</strong> 然而实际中，<strong>我们通常会叫立即执行函数。</strong></p>
<p>但是注意立即调用的函数表达式后面一定要是有分号，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!function () &#123; /* ... */ &#125;();</span><br><span class="line">~function () &#123; /* ... */ &#125;();</span><br><span class="line">-function () &#123; /* ... */ &#125;();</span><br><span class="line">+function () &#123; /* ... */ &#125;();</span><br></pre></td></tr></table></figure></p>
<p>如果没有分号，浏览器又会错误的识别了。认为第二行是第一行的参数。所以写法4正确，写法5错误❌， 这个一定要注意了。</p>
<hr>
<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>立即执行函数的作用，最常见的是配合闭包的使用，来保存函数局部状态。因为立即执行函数也能够传参数。所以有了最经典的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">  (function (i) &#123;</span><br><span class="line">     setTimeout(() =&gt; &#123;</span><br><span class="line">		console.log(&quot;i&quot;,i)</span><br><span class="line">	 &#125;,0)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样可以分别打印出 i 从 1-5， 但是如果你像下面这样写，就会打印出5个5了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">     console.log(&quot;i&quot;,i)</span><br><span class="line">  &#125;,0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>更为经典的一个例子如下, 你想要对每个 a 元素都绑定一个不同的事件，这里 log 出 i 的值。但是却得不到你想要的结果，因为在我们执行点击事件的时候， i 已经被执行完，为5了。所以对于 a0, a1,a2,a3都没有被绑定相应的事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var elems = document.getElementsByTagName( &apos;a&apos; );</span><br><span class="line"></span><br><span class="line">for ( var i = 0; i &lt; elems.length; i++ ) &#123;</span><br><span class="line">  elems[i].addEventListener( &apos;click&apos;, function(e)&#123;</span><br><span class="line">    console.log( &apos;i,&apos; + i );</span><br><span class="line">  &#125;, &apos;false&apos; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们用立即执行函数和闭包来改写下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var elems = document.getElementsByTagName( &apos;a&apos; );</span><br><span class="line"></span><br><span class="line">for (var i = 0; i &lt; eles.length; i++) &#123;</span><br><span class="line">  (function (i) &#123;</span><br><span class="line">    elems[i].addEventListener( &apos;click&apos;, function(e)&#123;</span><br><span class="line">      console.log( &apos;i,&apos; + i );</span><br><span class="line">    &#125;, &apos;false&apos; );</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样就 ok 了。注意 i 一定要在外部括号和里面的括号都传递进去，否则 i 不会被锁住。</p>
<p>立即执行函数当然还有别的好处，经常见的就是<strong>减少全局变量的定义</strong>，比如 jquery 的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(function( $ ) &#123;</span><br><span class="line">  $.fn.myPlugin = function() &#123;</span><br><span class="line">	var a = 1;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)( jQuery );</span><br></pre></td></tr></table></figure></p>
<p>这样减少了全局变量，每个插件自己用自己的变量，以防止冲突。性能也会好些。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>主要是以前其实这些知识点都是知道的，但是没有系统的总结或者思考过，这次算是有个稍微整体一点的认识。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要介绍的是 Javascript 的&lt;strong&gt;立即执行函数&lt;/strong&gt;的比较与总结, 列举了现在大部分的立即执行函数的写法，并且分析了错误的原因和正确的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;问题&quot;&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://sevencai.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>GBK, GB2312, UTF-8, Unicode,encodeURI, escape的区别和联系</title>
    <link href="http://sevencai.github.io/2018/02/27/GBK-GB2312-UTF-8-Unicode-encodeURI-escape%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/"/>
    <id>http://sevencai.github.io/2018/02/27/GBK-GB2312-UTF-8-Unicode-encodeURI-escape的区别和联系/</id>
    <published>2018-02-27T04:00:04.000Z</published>
    <updated>2018-02-28T03:09:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇目的主要是搞清楚UTF-8, GBK,  Unicode, ASCII码，Unicode, escape, encodeURIComponent, encodeURI 编码等等的区别和联系。</p>
</blockquote>
<hr>
<h1 id="文章起源"><a href="#文章起源" class="headerlink" title="文章起源"></a>文章起源</h1><p>事情起源是，今天在做小程序的时候，发现我请求业务接口时，业务接口返回的是gbk编码。</p>
<p>然后这个在小程序中不支持，会返回内容如：<code>fail response data convert to UTF8 fail</code>, 在  pc 端及 android 端表现正常，但是在 ios 下会返回此错误码。</p>
<p>于是很不好意思的找到了业务方的同事，看能不能把返回的内容变成标准的 utf8 无 bom编码格式。话说，我遇到的这个同事真的好 nice, 以前跨部门的合作没有1-2天下不来，这个同事效率比较高，每次有问题找到他，都能够很快的反馈给我（感恩）。然后他就跟我说了下面这样一句话：</p>
<blockquote>
<p>你请求参数用gbk编码  我返回给你utf8你看如何？</p>
</blockquote>
<p>大概是都统一用 utf8 对于他改动比较大，于是他提出我请求的时候用 gbk 编码。于是我把这段话错误理解为了：</p>
<blockquote>
<p>你请求的时候，用 gbk 编码请求，我返回给你 utf8。</p>
</blockquote>
<p>也就是说我会在请求 header 里加入 <code>charset=gbk</code>, 他返回给我 utf8 编码内容就好。</p>
<p>但实际上同事这句话的意思是：</p>
<blockquote>
<p>把调用他接口的<strong>请求参数</strong>用gbk编码，而不是在请求头里加 header。我掉了参数两个字。</p>
</blockquote>
<p>因为我们组内的前端统一用的都是 utf8, 编码都是用 encodeURI, encodeURIComponent,  以前也没有用过把参数做 gbk 编码的这种方式，导致了我认为是在请求头里请求用 gbk。 并且对 encodeURI 等等的不深入了解，导致了我浪费了同事的时间。 encodeURI, encodeURIComponent 都是针对 utf-8 的编码， 不能够指定编码方式。 gbk 编码在 github 上有这种成熟的 npm。</p>
<p>大概的思路是,如果是 ASCII 码，直接 encode， 判断不是 ASCII 码后，再进行 GBK 的比对编码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export const encodeUrlGbk = (str) =\&gt; &#123;</span><br><span class="line">    return str &amp;&amp; str.replace(/./g,function (a) &#123;</span><br><span class="line">         var code = a.charCodeAt(0);</span><br><span class="line">         if (_isAscii(code)) &#123;</span><br><span class="line">            return encodeURIComponent(a);</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">            var key = code.toString(16);</span><br><span class="line">         if (key.length !== 4) &#123;</span><br><span class="line">            key = (&apos;000&apos; \+ key).match(/....$/)\[0\];</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         return _charHash.U2Ghash\[key\] || a;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>虽然问题解决了，但是发现了自己对这块是不是根本没有弄清楚，今天仔细的查了资料，从新学习和认识下，想把这些内容都了解并且比较清楚。</p>
<hr>
<h1 id="escape-encodeURIComponent-encodeURI-的区别和联系"><a href="#escape-encodeURIComponent-encodeURI-的区别和联系" class="headerlink" title="escape, encodeURIComponent, encodeURI 的区别和联系"></a>escape, encodeURIComponent, encodeURI 的区别和联系</h1><p>如果你想直接看结论，可以跳过下部分引用内容。</p>
<blockquote>
<p>escape() 函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。</p>
</blockquote>
<p>该方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： * @ - _ + . / 。其他所有的字符都会被转义序列替换。他的解码为 unescape。</p>
<p><strong>ECMAScript v3 反对使用该方法</strong>，应用使用 decodeURI() 和 decodeURIComponent() 替代它。</p>
<blockquote>
<p>encodeURI() 函数可把字符串作为 URI 进行编码。</p>
</blockquote>
<p>该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： - _ . ! ~ * ‘ ( ) 。</p>
<p>该方法的目的是对 URI 进行完整的编码，因此对以下在 URI 中具有特殊含义的 ASCII 标点符号，encodeURI() 函数是不会进行转义的：;/?:@&amp;=+$,#</p>
<p><strong>如果 URI 组件中含有分隔符，比如 ? 和 #，则应当使用 encodeURIComponent() 方法分别对各组件进行编码。</strong></p>
<blockquote>
<p>encodeURIComponent() 函数可把字符串作为 URI 组件进行编码。</p>
</blockquote>
<p>该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： - _ . ! ~ * ‘ ( ) 。（这点与 encodeURI 相同）</p>
<p>其他字符（比如 ：;/?:@&amp;=+$,# 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。 （这点与 encodeURIComponent 不同）</p>
<p>关于这三个函数总结下如下：</p>
<p><strong>如果是跟url编码有关系的，先忘掉 escape 这个函数，他跟 url 编码毫无关系，它只是能够达到类似于 URL Encode 这类似的效果，但是它对于非 ASCII 字符使用了一种非标准的实现，比如某些汉字会被编码成 %uxxxx 这种形式， 在小程序中，url使用 escape, 会报错： fail request:fail _invalid url 这类似的消息。并且 W3C 把这个函数废弃了，能不使用尽量不要去使用 </strong></p>
<p><strong>对于 url 的编码，就使用 encodeURI 及 encodeURIComponent, 他们都是为了 url 编码而设计，不同的地方在于 encodeURI 用于对完整的 url 进行编码，于是URL中的功能字符，比如&amp;, ?, /, =等等这些并不会被转义， 而 encodeURIComponent 被设计用来对某段 query（某个值） 编码。所以正确用法是 encodeURIComponent 经常用于对每个 key value 进行分别编码。</strong></p>
<hr>
<h1 id="延伸阅读-escape-encodeURI的编码方式-百分号编码"><a href="#延伸阅读-escape-encodeURI的编码方式-百分号编码" class="headerlink" title="延伸阅读-escape, encodeURI的编码方式-百分号编码"></a>延伸阅读-escape, encodeURI的编码方式-百分号编码</h1><blockquote>
<p><strong>百分号编码</strong>（英语：Percent-encoding）, 也称作URL编码（英语：URL encoding）, 是特定上下文的统一资源定位符 (URL)的编码机制. 实际上也适用于统一资源标志符（URI）的编码。也用于为”application/x-www-form-urlencoded” MIME准备数据, 因为它用于通过HTTP的请求操作(request)提交HTML表单数据。</p>
</blockquote>
<p>对于 escape 以及 encodeURI 都是属于 <code>percent-encoding</code>。差不多都是把 URI 非法字符转化为合法字符， 转化以后有 <code>%</code>, 所以我猜才叫 percent-encoding 吧，哈哈。</p>
<p>首先 escape 和 encodeURI 在处理 0xff 以内的内容时，都是相同的。也就是说是 %xx,  这里的 xx 是字符的 16进制 unicode (此时的 unicode === utf8值， 所以 escape 的值也等于 encodeURI 的值)。</p>
<p><strong>但 escape 在处理 0xff 之外的时候， 直接使用字符的 unicode , 并且在前面再加上一个 <code>%u</code>（不标准） , 而 encodeURI 是先对 unicode 进行 utf-8 编码，再在每个 utf-8 编码前加上 %（标准）。</strong></p>
<p>比如中文的【我】字， 他的 unicode 为 0x6211,  对他进行 utf8 编码变成了 0xe6, 0x88, 0x91, 因此 escape 得到的值为 <code>\u6211</code>, 但是encodeURI 的结果是 <code>%E6%88%91</code>。</p>
<p>对 escape, encodeURI 这些其实以前是了解的， 但是这次是真正的总结清楚了，挺开心。上面是不是提到了很多比如 utf8, gbk, unicode 之类的词。 下面对这些名词也做一些简单的归类和总结。</p>
<hr>
<h1 id="UTF-8-Unicode-ASCII码的区别和联系"><a href="#UTF-8-Unicode-ASCII码的区别和联系" class="headerlink" title="UTF-8, Unicode, ASCII码的区别和联系"></a>UTF-8, Unicode, ASCII码的区别和联系</h1><blockquote>
<p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于<a href="https://baike.baidu.com/item/%E6%8B%89%E4%B8%81%E5%AD%97%E6%AF%8D" target="_blank" rel="noopener">拉丁字母</a>的一套电脑编码系统，主要用于显示现代<a href="https://baike.baidu.com/item/%E8%8B%B1%E8%AF%AD/109997" target="_blank" rel="noopener">英语</a>和其他<a href="https://baike.baidu.com/item/%E8%A5%BF%E6%AC%A7" target="_blank" rel="noopener">西欧</a>语言。它是现今最通用的单<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82" target="_blank" rel="noopener">字节</a><a href="https://baike.baidu.com/item/%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">编码</a>系统，并等同于<a href="https://baike.baidu.com/item/%E5%9B%BD%E9%99%85" target="_blank" rel="noopener">国际</a>标准ISO/IEC 646。</p>
</blockquote>
<p> 注意 ASCII 码是 <code>American Standard Code for Information Interchange</code>的简称， 后面的两个II 并不是罗马数字2哦。</p>
<p>我们知道计算机里面存储所有信息都是通过一个二进制值。每一个二进制位（bit）都有两种状态 0或者1， 规定了8个二进制位为一个字节（byte），可以表示256种状态，包括了 <code>00000000</code> 到 <code>11111111</code> 。</p>
<p>美国🇺🇸人们自然想到了可以他们自己规定一套字符编码，把26英文字母，及一些特殊符号和控制字符统一编码。他们一共规定了 128个字符，比如说 A 是 65（01000001）。128位只需要占用7位，最高位统一为0。</p>
<blockquote>
<p>比如遇到0x10 就是换行， 遇到 Ox1b 就打印反白字。这类0x20以下的字节称为控制字节。空格，标点符号，数字，大小写字母用连续的字节状态表示，一直到127号。</p>
</blockquote>
<p>所以 ASCII码就是0-127这套编码方案所形成的编码，这套编码方案叫做ANSI。</p>
<p>下面给出两种判断字符是不是 ASCII 码的方案：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isASCII (unicode) &#123;</span><br><span class="line">    return ((unicode === 0x20AC) || (unicode &lt;= 0x007F &amp;&amp; unicode &gt;= 0x0000));</span><br><span class="line">&#125;</span><br><span class="line">// 另外一种用正则判断</span><br><span class="line">isASCII(str) &#123;</span><br><span class="line">    return /^\[\\x00-\\x7F\]*$/.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是问题来了，英语用128个编码就足够了，但是其他语言用这些字符是远远不够的，于是延伸出了256编码，也就是最高位也被使用上(<strong>这称为扩展字符集</strong>)。但是不同的国家有不同的字母，同样的编码可能也代表着不同的内容。比如 150，可能法国是一个，俄语又是一个。他们0-127都是相同，但是128-256不一定相同了，这就看不同的国家自己的制定方式了。</p>
<p>但是再想想中国🇨🇳就更可怕了，一共有10几万的文字。显然256种符号是没有办法完全表达的。于是又出现了多字节的形式。比如两个字节，做多表示 256*256 种。大概又6w多符号。最常见的中文编码就是这种2个字节的编码方式，如 GB2312。</p>
<p>下面就介绍下 GB2312, GBK等的区别和联系。</p>
<hr>
<h1 id="GB2312-GBK-GB18030的区别和联系"><a href="#GB2312-GBK-GB18030的区别和联系" class="headerlink" title="GB2312,GBK,GB18030的区别和联系"></a>GB2312,GBK,GB18030的区别和联系</h1><p>中国用到计算机比较晚，那个时候 256个符号已经没有可以用来表达中文文字的了。并且中文10w+个，只能够另辟蹊径了。于是中国人把127号之后的字符都去掉了，并且进行了规定。</p>
<blockquote>
<p>每个汉字及符号以两个字节表示。第一个为高字节，第二个为低字节。一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE。</p>
</blockquote>
<p>具体这个字符范围的得来，涉及区位等知识，这些我不打算认识，不做介绍。</p>
<p>这种方案称之为GB2312, 他是对ASCII码的中文扩展。这样就 6000+汉字可以得到表示。</p>
<blockquote>
<p>GB 2312标准共收录6763个汉字，其中一级汉字3755个，二级汉字3008个；同时收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的682个字符。 GB 2312的出现，基本满足了汉字的计算机处理需要，它所收录的汉字已经覆盖中国大陆99.75%的使用频率。但对于人名、古汉语等方面出现的罕用字和繁体字，GB 2312不能处理，因此后来GBK及GB 18030汉字字符集相继出现以解决这些问题。–wiki</p>
</blockquote>
<p>后来GB2312这种方案还是不够用，于是就不再要求低字节一定是127之后的内码， 只要是第一个字节大于127，就表示这是汉字的开始，不用管低字节是否是扩展字符集的内容。这种GB2312被扩展之后的内容称之为 GBK， GBK 包括了GB2312的所有内容，并且新增加了20000个汉字。</p>
<p>后来少数民族也需要用电脑，于是又增加了少数名族的内容，GBK 被扩展为了 GB18030。</p>
<p><strong>也就是说 GB18030 &gt; GBK &gt; GB2312。 这一系列的中文编码，称为 DBCS(Double Byte Character Set 双字节字符集)。</strong></p>
<blockquote>
<p>在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。–wiki</p>
</blockquote>
<p>于是就出现了后来编程时候的默念： <strong>一个中文字符占两个字节，1个英文字符占用1个字节</strong>。</p>
<p>注意这个时候 GBK, GB2312 等，只是中文对于ASCII码的扩展，和 UTF8,Unicode 这些并无联系。下面再来看看 Unicode 及 UTF-8。</p>
<hr>
<h1 id="Unicode-及-UTF-8"><a href="#Unicode-及-UTF-8" class="headerlink" title="Unicode 及 UTF-8"></a>Unicode 及 UTF-8</h1><blockquote>
<p>结论： UTF-8 是 Unicode 的实现方式之一。</p>
</blockquote>
<p>前面我们说过，世界上存在着很多编码方式，每个国家可能会去规定和制作自己的编码方式。不同的二进制因而有可能会被解释成不同的内容。 因此如果你不知道一个文件的编码，然后随意用编辑器打开了就会出现我们经常出现的乱码现象。</p>
<p>聪明的人们当然意识到了这一点，所以如果有一种编码方式能够把世界所有的符号都纳入其中，那该多好？ 再也不会有乱码现象了。</p>
<p>于是 Unicode 出现了（union code ？） , <strong>一定要注意 Unicode 并不是一个编码方式，不是一个算法，而是一个集合，集合了所有的符号，它只是规定了所有符号的二进制代码，并没有一个算法来说怎么存储这个内容。比如<code>U+0041</code>表示大写字母A。</strong>  （其实我在想，它能把所有符号录入进去，已经是很大的工作量了。）</p>
<blockquote>
<p>这里就有两个严重的问题，第一个问题是，如何才能区别 Unicode 和 ASCII ？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。    —- 引用自<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">阮一峰的文章</a></p>
</blockquote>
<p>后来的人们也进行了很多尝试， 发明了 unicode 的多种存储方式（不同的二进制编码方式或者称之为一种算法）。<strong>直到 UTF-8 这种编码方式的出现， Unicode 才得以推广。 所以前面才说 UTF-8 是一种是Unicode的实现方式。</strong></p>
<blockquote>
<p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的<strong>可变长度字符编码</strong>，也是一种前缀码。它可以用来表示Unicode标准中的任何字符，且其编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部分修改，即可继续使用。因此，它逐渐成为电子邮件、网页及其他存储或发送文字的应用中，优先采用的编码。</p>
</blockquote>
<p><strong>关键字是可变长度字符编码，也就是说对于不同类型的符号，它占用的字节长度不一样。这样可以节省很多空间。并且比较灵活。一般情况下，它使用1-4个字节来表示。</strong>比如：</p>
<blockquote>
<p>128个US-ASCII字符只需一个字节编码（Unicode范围由U+0000至U+007F）。</p>
<p>带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文及它拿字母则需要两个字节编码（Unicode范围由U+0080至U+07FF）。</p>
<p>其他基本多文种平面（BMP）中的字符（这包含了大部分常用字，如大部分的汉字）使用三个字节编码（Unicode范围由U+0800至U+FFFF）。</p>
<p>其他极少使用的Unicode 辅助平面的字符使用四至六字节编码（Unicode范围由U+10000至U+1FFFFF使用四字节，Unicode范围由U+200000至U+3FFFFFF使用五字节，Unicode范围由U+4000000至U+7FFFFFFF使用六字节）。 –wiki</p>
</blockquote>
<p><strong>utf-8的具体编码实现，我引用了阮一峰老师的文章的部分内容，他总是能把复杂的东西讲的很简单。</strong> 地址为：<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">ascii_unicode_and_utf</a></p>
<p>(<strong>以下内容为引用内容</strong>)</p>
<p>UTF-8 的编码规则很简单，只有二条：</p>
<p>1）对于单字节的符号，字节的第一位设为<code>0</code>，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</p>
<p>2）对于<code>n</code>字节的符号（<code>n &gt; 1</code>），第一个字节的前<code>n</code>位都设为<code>1</code>，第<code>n + 1</code>位设为<code>0</code>，后面字节的前两位一律设为<code>10</code>。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。</p>
<p>下表总结了编码规则，字母<code>x</code>表示可用编码的位。</p>
<blockquote>
<p>Unicode符号范围     |        UTF-8编码方式<br>(十六进制)        |              （二进制）<br>———————-+———————————————<br>0000 0000-0000 007F | 0xxxxxxx<br>0000 0080-0000 07FF | 110xxxxx 10xxxxxx<br>0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx<br>0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</p>
</blockquote>
<p>跟据上表，解读 UTF-8 编码非常简单。如果一个字节的第一位是<code>0</code>，则这个字节单独就是一个字符；如果第一位是<code>1</code>，则连续有多少个<code>1</code>，就表示当前字符占用多少个字节。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好开心，大概的把这些东西都有了一些了解。不再只是停留在认识阶段，而是了解阶段了。算是对这两天的一个交代了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇目的主要是搞清楚UTF-8, GBK,  Unicode, ASCII码，Unicode, escape, encodeURIComponent, encodeURI 编码等等的区别和联系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设置我的 eslint 配置</title>
    <link href="http://sevencai.github.io/2018/01/23/%E8%AE%BE%E7%BD%AE%E6%88%91%E7%9A%84-eslint-%E9%85%8D%E7%BD%AE/"/>
    <id>http://sevencai.github.io/2018/01/23/设置我的-eslint-配置/</id>
    <published>2018-01-23T09:16:21.000Z</published>
    <updated>2018-01-23T09:52:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇主要记录了我针对自己的习惯，对 eslint 的一些配置的更改。我一般用的是 <a href="https://github.com/airbnb/javascrip" target="_blank" rel="noopener">Airbnb</a> 的编码规范。</p>
</blockquote>
<p>最开始我会自己去配置 webpack 的相关插件等。后来发现中间去使用的成本太高了，往往配置就花费了我不少时间，现在我主要是使用一些比较成熟的 cli, 比如 vue-cli, react-cli 等。下面的这份 eslint 继承自 <code>airbnb-base</code>, 覆盖了一些我不习惯使用的配置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://eslint.org/docs/user-guide/configuring</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">'babel-eslint'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// consider switching to `plugin:vue/strongly-recommended` or `plugin:vue/recommended` for stricter rules.</span></span><br><span class="line">  extends: [<span class="string">'plugin:vue/essential'</span>, <span class="string">'airbnb-base'</span>],</span><br><span class="line">  <span class="comment">// required to lint *.vue files</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'vue'</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// check if imports actually resolve</span></span><br><span class="line">  settings: &#123;</span><br><span class="line">    <span class="string">'import/resolver'</span>: &#123;</span><br><span class="line">      webpack: &#123;</span><br><span class="line">        config: <span class="string">'build/webpack.base.conf.js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// add your custom rules here</span></span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="comment">// don't require .vue extension when importing</span></span><br><span class="line">    <span class="string">'import/extensions'</span>: [<span class="string">'error'</span>, <span class="string">'always'</span>, &#123;</span><br><span class="line">      js: <span class="string">'never'</span>,</span><br><span class="line">      vue: <span class="string">'never'</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="comment">// disallow reassignment of function parameters</span></span><br><span class="line">    <span class="comment">// disallow parameter object manipulation except for specific exclusions</span></span><br><span class="line">    <span class="string">'no-param-reassign'</span>: [<span class="string">'error'</span>, &#123;</span><br><span class="line">      props: <span class="literal">true</span>,</span><br><span class="line">      ignorePropertyModificationsFor: [</span><br><span class="line">        <span class="string">'vm'</span>,</span><br><span class="line">        <span class="string">'state'</span>, <span class="comment">// for vuex state</span></span><br><span class="line">        <span class="string">'acc'</span>, <span class="comment">// for reduce accumulators</span></span><br><span class="line">        <span class="string">'e'</span> <span class="comment">// for e.returnvalue</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="comment">// allow optionalDependencies</span></span><br><span class="line">    <span class="string">'import/no-extraneous-dependencies'</span>: [<span class="string">'error'</span>, &#123;</span><br><span class="line">      optionalDependencies: [<span class="string">'test/unit/index.js'</span>]</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="comment">// 禁止分号 auto</span></span><br><span class="line">    <span class="string">'semi'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      <span class="string">'never'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 禁止使用拖尾逗号</span></span><br><span class="line">    <span class="string">'comma-dangle'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      <span class="string">'never'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 箭头函数的括号，只在有多个参数时才使用</span></span><br><span class="line">    <span class="string">'arrow-parens'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      <span class="string">'as-needed'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'arrow-body-style'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      <span class="string">'always'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 允许我使用 表达式</span></span><br><span class="line">    <span class="string">'no-unused-expressions'</span>: [<span class="string">'error'</span>, &#123; <span class="string">'allowShortCircuit'</span>: <span class="literal">true</span>, <span class="string">'allowTernary'</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    <span class="comment">// 放宽最大的支持宽度</span></span><br><span class="line">    <span class="string">'max-len'</span>: [<span class="number">2</span>, <span class="number">150</span>, <span class="number">4</span>, &#123; <span class="string">'ignoreUrls'</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    <span class="comment">// allow debugger during development</span></span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这上面因为是已经继承自 <code>airbnb-base</code> ,所以很多默认的配置都没有写下来，比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 强制单引号 auto</span></span><br><span class="line"><span class="string">"quotes"</span>: [</span><br><span class="line">    <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"single"</span></span><br><span class="line">],</span><br><span class="line"> <span class="comment">// 变量定义或参数声明未使用</span></span><br><span class="line"><span class="string">"no-cond-assign"</span>: [</span><br><span class="line">    <span class="string">"warn"</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 关键字空格 auto</span></span><br><span class="line"><span class="string">"keyword-spacing"</span>: [</span><br><span class="line">    <span class="string">"error"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"before"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"after"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 强制单行代码块中使用空格 auto</span></span><br><span class="line"><span class="string">"block-spacing"</span>: [</span><br><span class="line">    <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"always"</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 逗号前面不能由空格, 后面要空格 auto</span></span><br><span class="line"><span class="string">"comma-spacing"</span>: [</span><br><span class="line">    <span class="string">"error"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"before"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"after"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 冒号前面不能有空格, 后面必须有空格, 键值需水平对齐 auto</span></span><br><span class="line"><span class="string">"key-spacing"</span>: [</span><br><span class="line">    <span class="string">"error"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"beforeColon"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"afterColon"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"align"</span>: <span class="string">"value"</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 参数未使用提示</span></span><br><span class="line"><span class="string">"no-unused-vars"</span>: [</span><br><span class="line">    <span class="string">"warn"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"var"</span>: <span class="string">"all"</span>,</span><br><span class="line">        <span class="string">"all"</span>: <span class="string">"all"</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"> <span class="comment">// 函数左括号左边不能有空格 auto</span></span><br><span class="line"><span class="string">"space-before-function-paren"</span>: [</span><br><span class="line">    <span class="string">"error"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"anonymous"</span>: <span class="string">"always"</span>,</span><br><span class="line">        <span class="string">"named"</span>: <span class="string">"never"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<hr>
<p>对了，顺便记录一个 vue-cli 配置的问题（不值得开一个新文章，但是想记录下）。</p>
<p>有的时候，如果我们配置了 host , 在本地访问是也许会出现 invalid host 之类的错误，正常访问不了页面，这个时候只需要找到 devServer, 增加一个 <code>disableHostCheck: true</code> 即可。让它不去检测 host, 等到正式上线，再把这个去掉或者更改为 false 即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    disableHostCheck: true,</span><br><span class="line">    clientLogLevel: &apos;warning&apos;,</span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      rewrites: [</span><br><span class="line">        &#123; from: /.*/, to: path.posix.join(config.dev.assetsPublicPath, &apos;index.shtml&apos;) &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>
<hr>
<p>在项目中使用 eslint 当然是好处多多，规范自己的代码，心情也会好很多。下面是我记录的一些对 airbnb ，自己老是会忘记的几个点。</p>
<h3 id="No-Object-assign"><a href="#No-Object-assign" class="headerlink" title="No Object.assign"></a>No Object.assign</h3><p>Prefer the object spread operator over Object.assign to shallow-copy objects. Use the object rest operator to get a new object with certain properties omitted.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// very bad</span><br><span class="line">const original = &#123; a: 1, b: 2 &#125;;</span><br><span class="line">const copy = Object.assign(original, &#123; c: 3 &#125;); // this mutates `original` ಠ_ಠ</span><br><span class="line">delete copy.a; // so does this</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">const original = &#123; a: 1, b: 2 &#125;;</span><br><span class="line">const copy = Object.assign(&#123;&#125;, original, &#123; c: 3 &#125;); // copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const original = &#123; a: 1, b: 2 &#125;;</span><br><span class="line">const copy = &#123; ...original, c: 3 &#125;; // copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span><br><span class="line"></span><br><span class="line">const &#123; a, ...noA &#125; = copy; // noA =&gt; &#123; b: 2, c: 3 &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Use-array-spreads-…-to-copy-arrays"><a href="#Use-array-spreads-…-to-copy-arrays" class="headerlink" title="Use array spreads … to copy arrays."></a>Use array spreads … to copy arrays.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const len = items.length;</span><br><span class="line">const itemsCopy = [];</span><br><span class="line">let i;</span><br><span class="line"></span><br><span class="line">for (i = 0; i &lt; len; i += 1) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const itemsCopy = [...items];</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="To-convert-an-array-like-object-to-an-array-use-spreads-…-instead-of-Array-from"><a href="#To-convert-an-array-like-object-to-an-array-use-spreads-…-instead-of-Array-from" class="headerlink" title="To convert an array-like object to an array, use spreads … instead of Array.from."></a>To convert an array-like object to an array, use spreads … instead of Array.from.</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> nodes = [...foo];</span><br></pre></td></tr></table></figure>
<p>Use Array.from instead of spread … for mapping over iterables, because it avoids creating an intermediate array.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const baz = [...foo].map(bar);</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const baz = Array.from(foo, bar);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Use-object-destructuring-when-accessing-and-using-multiple-properties-of-an-object-eslint-prefer-destructuring-jscs-requireObjectDestructuring"><a href="#Use-object-destructuring-when-accessing-and-using-multiple-properties-of-an-object-eslint-prefer-destructuring-jscs-requireObjectDestructuring" class="headerlink" title="Use object destructuring when accessing and using multiple properties of an object. eslint: prefer-destructuring jscs: requireObjectDestructuring"></a>Use object destructuring when accessing and using multiple properties of an object. eslint: prefer-destructuring jscs: requireObjectDestructuring</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">function getFullName(user) &#123;</span><br><span class="line">  const firstName = user.firstName;</span><br><span class="line">  const lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  return `$&#123;firstName&#125; $&#123;lastName&#125;`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">function getFullName(user) &#123;</span><br><span class="line">  const &#123; firstName, lastName &#125; = user;</span><br><span class="line">  return `$&#123;firstName&#125; $&#123;lastName&#125;`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// best</span><br><span class="line">function getFullName(&#123; firstName, lastName &#125;) &#123;</span><br><span class="line">  return `$&#123;firstName&#125; $&#123;lastName&#125;`;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Use-array-destructuring-eslint-prefer-destructuring-jscs-requireArrayDestructuring"><a href="#Use-array-destructuring-eslint-prefer-destructuring-jscs-requireArrayDestructuring" class="headerlink" title="Use array destructuring. eslint: prefer-destructuring jscs: requireArrayDestructuring"></a>Use array destructuring. eslint: prefer-destructuring jscs: requireArrayDestructuring</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1, 2, 3, 4];</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">const first = arr[0];</span><br><span class="line">const second = arr[1];</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const [first, second] = arr;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Never-use-arguments-opt-to-use-rest-syntax-…-instead-eslint-prefer-rest-params"><a href="#Never-use-arguments-opt-to-use-rest-syntax-…-instead-eslint-prefer-rest-params" class="headerlink" title="Never use arguments, opt to use rest syntax … instead. eslint: prefer-rest-params"></a>Never use arguments, opt to use rest syntax … instead. eslint: prefer-rest-params</h3><p>自己老是用第一种方法，哈哈，第二种多好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">function concatenateAll() &#123;</span><br><span class="line">  const args = Array.prototype.slice.call(arguments);</span><br><span class="line">  return args.join(&apos;&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">function concatenateAll(...args) &#123;</span><br><span class="line">  return args.join(&apos;&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Why-Modules-are-the-future-let’s-start-using-the-future-now"><a href="#Why-Modules-are-the-future-let’s-start-using-the-future-now" class="headerlink" title="Why? Modules are the future, let’s start using the future now."></a>Why? Modules are the future, let’s start using the future now.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const AirbnbStyleGuide = require(&apos;./AirbnbStyleGuide&apos;);</span><br><span class="line">module.exports = AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line">// ok</span><br><span class="line">import AirbnbStyleGuide from &apos;./AirbnbStyleGuide&apos;;</span><br><span class="line">export default AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line">// best</span><br><span class="line">import &#123; es6 &#125; from &apos;./AirbnbStyleGuide&apos;;</span><br><span class="line">export default es6;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Do-not-use-wildcard-imports"><a href="#Do-not-use-wildcard-imports" class="headerlink" title="Do not use wildcard imports."></a>Do not use wildcard imports.</h3><p>有的时候我还是会用到 * 的，因为也许里面的内容如果我都需要使用到呢。<br>Why? This makes sure you have a single default export.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">import * as AirbnbStyleGuide from &apos;./AirbnbStyleGuide&apos;;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">import AirbnbStyleGuide from &apos;./AirbnbStyleGuide&apos;;</span><br></pre></td></tr></table></figure></p>
<p> In modules with a single export, prefer default export over named export. eslint: import/prefer-default-export</p>
<p>Why? To encourage more files that only ever export one thing, which is better for readability and maintainability.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">export function foo() &#123;&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">export default function foo() &#123;&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Multiline-imports-should-be-indented-just-like-multiline-array-and-object-literals"><a href="#Multiline-imports-should-be-indented-just-like-multiline-array-and-object-literals" class="headerlink" title="Multiline imports should be indented just like multiline array and object literals."></a>Multiline imports should be indented just like multiline array and object literals.</h3><p>Why? The curly braces follow the same indentation rules as every other curly brace block in the style guide, as do the trailing commas.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">import &#123;longNameA, longNameB, longNameC, longNameD, longNameE&#125; from &apos;path&apos;;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">import &#123;</span><br><span class="line">  longNameA,</span><br><span class="line">  longNameB,</span><br><span class="line">  longNameC,</span><br><span class="line">  longNameD,</span><br><span class="line">  longNameE,</span><br><span class="line">&#125; from &apos;path&apos;;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇主要记录了我针对自己的习惯，对 eslint 的一些配置的更改。我一般用的是 &lt;a href=&quot;https://github.com/airbnb/javascrip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Airbnb
    
    </summary>
    
    
      <category term="工具/配置" scheme="http://sevencai.github.io/tags/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>2017我的年度小结</title>
    <link href="http://sevencai.github.io/2018/01/02/2017%E6%88%91%E7%9A%84%E5%B9%B4%E5%BA%A6%E5%B0%8F%E7%BB%93/"/>
    <id>http://sevencai.github.io/2018/01/02/2017我的年度小结/</id>
    <published>2018-01-02T11:33:28.000Z</published>
    <updated>2018-01-02T13:14:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>2017 年 6 月底，我毕业了。4月份到了学校，花了大概1个半月学车，半个多月论文，半个月跟我最爱的室友一起浪。可能是先前一直实习，已经熟悉了【哦，原来工作是这个样子】，当7月份再次回到公司的时候，我一点都没有觉得不适应。也没有16年刚来的懵和恐慌。</p>
</blockquote>
<p>当时的懵是从学校到社会的转变，很多东西都不懂。记得刚来的第一天， 中午大家都在睡觉，当时我导师坐在我前面，我中午敲了一个中午的键盘，把环境布置好了。但是后面才意识到，我那天肯定影响了我师父休息。那天我一上午加一下午没有去厕所，没有喝水。因为不好意思问，组里的同事都是男生。</p>
<p>当时的恐慌来自对工作的不熟悉，对环境的不适应。我当时觉得好像什么都不懂，工具也不懂，知识点也不再是学校用的那些，然后业务逻辑也不懂。好在我真的有个很好很好的师父。直到现在我跟他一起做项目，不懂的都是问他。他很耐心，懂的很多，也非常帅气，真的这一年以来，多亏了的导师。感恩。好在我自己也还算努力，一年下来真的觉得自己进步了。</p>
<p>进步了哪些？ 我时常会去看一些跟我一起进来的毕业生，看看他们的成长速度。看到有的优秀的前端，都已经是 nodejs 的 collabrator 了，写的文章也很有意思。 我会经常鞭策自己要向他们看齐，虽然我现在没有他们这么厉害，工作大部分也是写业务逻辑。但是并不代表我没有努力和梦想，至少我还知道自己不足，还知道自己想要努力的方向。说的业务层面，我觉得我已经进步很多了，因为腾讯是一个很大的公司，业务很多很杂，我们部门又承载了公司的整个虚拟支付的体系，涉及到的就不是单个业务，而是一群业务组。各种各样的游戏币，q币以及包月服务等。通过组里的一个项目我已经了解了很多了，不在是当时那个连听他们讨论问题都听不懂的我了。</p>
<p>我有没有想过放弃过？ 没有放弃过，只有难过过， 有的时候工作搞不定， 加了几个星期很长时间的班，有的时候一个问题找了一天发现是重构的 bug, 有的时候跟同事沟通不顺畅的时候，都有难过过。但是你会发现，再难的问题总有解决的一天，真的一切都会过去。就比如你很在意的今天，在很多年后，也只是你人生中的一点点。有一次，路过科技园的天桥，哇的一下就哭了，没有原因，不是因为工作，也不是因为生活，哭的很惨很放肆，但是哭完好开心。哈哈。</p>
<p>提到了科技园的天桥，我今年一整年只要不是下雨或者大姨妈，都是走路回家，差不多5km, 走到腾大底下的时候，如果大龙也下班，他就会送我回家。可是大部分时间他也很忙，一般都到11，12点了，我就会一个人回家。差不多10点20左右下班， 11点左右能到家。提到这里不知道为啥他很忙，可能也是忙业务。大龙是个非常优秀的员工，至少在我心里是。如果我是个老板，我一定雇佣他当我的员工，很认真，很负责，很会处理问题，沟通能力很强。但是写代码方面，我觉得他没有什么进步，可能是因为他现在已经逐渐转运维了。我这毕业半年来都没有感过冒，我怀疑跟我每天走路回家有关系， 还有我现在住的房子很通气。嘻嘻。</p>
<p>我想到哪里就写到哪里了。刚刚提到了大姨妈，这个是我工作的克星。 两次请病假其实都是因为大姨妈。不知道为啥，从高中起，我就反应这么激烈。老是动不动就疼的晕倒，你肯定不懂我的痛苦。真的是折磨死我了。好在大部分时间都在周末。新的一年我希望上帝能保佑我不再疼的晕倒。</p>
<p>我一直想写一篇关于人性善良的文章。对于这个我深有理解。因为我的大姨妈，我真的认识到世界上的好人真的很多。善良的人都很多。</p>
<p>第一次晕倒是高中跟妈妈在超市逛家具，逛着逛着就晕倒在了沙发上，妈妈说我当时脸色发白，浑身出汗，只有一点一点的意识是妈妈吓死了，赶紧跟伯伯一起把我送到了医院。 我好爱好爱我的妈妈。后来还有几次印象深刻的，高中又一次晕倒在了厕所，老师把我带到了医务室，给我付了医药费。当时我一个星期一共就20块钱，没有钱还给他，他就说没关系，不用还，后面再还都可以的。后来我过了好几个星期才还给他。还有好几次是跟大龙在一起，有一次大龙去我家接我，我准备跟他一起去腾大加班。结果地铁上忽然昏倒了，完全失去了意识， 后来大龙把我托下了地铁，有人给我让了位置，我一会就醒了，当时完全出不了地铁站，短短2分钟的路程，我走了半个小时，一直坐在地上，想想当时来来往往那么多人，大龙都完全没有嫌弃我，还给我买水喝，真的很感动。还有一次是在超市门口，出来就不行了，扫地的阿姨帮我叫了人，收营员姐姐给我拿了牛奶，后来打电话让大龙送了我回家。 我当时心想， 我一定要当一个好人，有能力也去帮助别人。因为我受到了太多人的帮助，虽然再他们看起来虽然微不足道，但是这些小小的举动，都让那时候的我感到了深深的力量。还有在办公室疼的不行的，我真的觉得好丢人好丢人。</p>
<p>扯远了，不过都是我的这一年最深的感受。再提到工作总结，上半年实习的时候，还有好些产出，下半年的时候很忙，写的文章很少了。其实我有学到很多东西，但是都没有产出，因为没有时间去总结，这也导致了我有些东西半知半解。<br>下半年的时候一直在用 vue 全家桶，vue 真的是个好框架。现在只是停留在熟悉怎么用的阶段，下个阶段争取能把里面核心实现的机制了解清楚。</p>
<p>今年自己写代码，总是这样写：</p>
<blockquote>
<p>create by sevencai@2017/11/11<br>contact seven.cailidan@gmail.com</p>
</blockquote>
<p>就是短短的这几行字，让我有动力去不断的 review 自己的代码，能不能写的更好，是不是语法没有符合规范，是不是有可以优化的方法。我觉得这点没有变过，我不想让以后如果有人看我的代码，说我写的不好。至少不要那么难看，尽力做到最好。 不管项目再怎么赶， 我一直提醒着自己。千万不要被后人骂，说不定你的代码要跑10年呢。</p>
<p>没有去旅行， 因为没有钱。大龙哥跟我是同一类人。以前大学的时候，基本上每年都跟小伙伴们去旅行，每个人就1000块钱，做硬座，睡旅馆，3，4个人挤在一个房间里，买一份东西大家一起吃，都是很美好的回忆，但是到了工作，真的是因为没有那1000块钱了吗？ 还是因为自己已经懒到连去看更远更大的世界的心都没有了？ 我觉得是第二种。人可怕的不是没有目标，可怕的是还要为自己没有目标找借口。嗯，就是这样。要改变。</p>
<p>提到了2018， 2018是个不一样的一年。 2018，妈妈就50岁了。 2018，我的小侄子要出生了。2018，是我跟大龙认识的第7年。 2018，我将在鹅厂工作满一年。 2008年的时候，爸爸带我去了北京，看了别人升旗。转眼间10年就过去了。2018，我想去趟北京，爬下长城，去胡同里吃遍小吃。对自己有下面些期待。等到2018结束的时候，再来看看自己的这些 flag 有没有成功。</p>
<ol>
<li>办港澳通行证，带妈妈来深圳香港，逛一逛。吃一次三千日本料理。</li>
<li>去一趟北京，爬下长城。</li>
<li>坚持运动，每天中午坚持吃饭，晚上吃水果，锻炼锻炼身体，出出汗。</li>
<li>能瘦8斤（这个怕是最不可能实现的了，但是梦想还是要有的，万一呢）。</li>
<li>晚上1点之前睡觉。（12.59关手机睡觉）</li>
<li>跟最爱的雪琴，盼盼或者干夫，伟成他们几个一起去趟成都。</li>
<li>在把自己工作做好的情况下，对业务熟悉的情况下，多提升自己的专业技能。</li>
<li>把鸟哥的 linux 私房菜好好再学习下。</li>
<li>对 JS 原生，还要再多花时间弄清楚，最好再把书完整的过一遍。</li>
<li>多学点 Nodejs 、Http 吧, 争取把学的内容都整理到博客来，不要偷懒。</li>
<li>知其然，知其所以然。</li>
</ol>
<p>2018！ 你要去看更大更远的世界！不止脚下，不止书中，不止将来！(To discover a bigger world!)</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2017 年 6 月底，我毕业了。4月份到了学校，花了大概1个半月学车，半个多月论文，半个月跟我最爱的室友一起浪。可能是先前一直实习，已经熟悉了【哦，原来工作是这个样子】，当7月份再次回到公司的时候，我一点都没有觉得不适应。也没有16年刚来的懵和恐
    
    </summary>
    
    
      <category term="生活与总结" scheme="http://sevencai.github.io/tags/%E7%94%9F%E6%B4%BB%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>mac 下 zsh: command not found</title>
    <link href="http://sevencai.github.io/2017/12/15/mac-%E4%B8%8B-zsh-command-not-found/"/>
    <id>http://sevencai.github.io/2017/12/15/mac-下-zsh-command-not-found/</id>
    <published>2017-12-15T02:54:30.000Z</published>
    <updated>2017-12-15T03:53:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单来说，是我使用 <code>tnpm install -g webpack</code> 或者任何使用 -g 来安装的全局 npm 包都报错： <code>zsh: command not found</code>,</p>
<p>想到了肯定是环境变量引起的，zsh 找不到全局包安装的位置。</p>
<p>zsh 的配置文件在 <code>~/.zshrc</code> 文件中，里面已经有被配置了的环境变量如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> $PATH = <span class="regexp">/usr/</span>bin:<span class="regexp">/usr/</span>local/bin:<span class="regexp">/usr/</span>bin:<span class="regexp">/bin:/u</span>sr/sbin:<span class="regexp">/sbin</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 或者你可以直接在终端工具中 echo $PATH 查看暴露的全局环境变量</span></span><br></pre></td></tr></table></figure>
<p>发现问题后，找到了 npm -g 安装的全部目录为（…为自己的目录） <code>/usr/local/bin/node/.../bin</code> 下， 添加到 $PATH 后面即可。</p>
<p>每个 : 代表的是多个环境变量的分割。</p>
<p>过程中做了一件特别傻的事情，没有把 npm 的目录直接在原来的 export 后面加，而是直接新建了一行，大概是下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> PATH = <span class="regexp">/usr/</span>bin:<span class="regexp">/usr/</span>local/bin:<span class="regexp">/usr/</span>bin:<span class="regexp">/bin:/u</span>sr/sbin:<span class="regexp">/sbin</span></span><br><span class="line"><span class="regexp">export PATH = /u</span>sr/local/bin/node/.../bin</span><br><span class="line"></span><br><span class="line">zsh 启动会报错：</span><br><span class="line">/Users/sevencai/.oh-my-zsh/oh-my-zsh.sh:<span class="number">3</span>: command not found: env</span><br><span class="line">env_default:<span class="number">1</span>: command not found: env</span><br><span class="line">env_default:<span class="number">1</span>: command not found: grep</span><br><span class="line">env_default:<span class="number">1</span>: command not found: env</span><br><span class="line">env_default:<span class="number">1</span>: command not found: grep</span><br></pre></td></tr></table></figure>
<p>这样会导致最后的环境变量是后面一项，前面被覆盖了。导致一些最基本的命令，如 cat/vi/vim 都不能使用了。哈哈，连vi都不能用了，我知道错了，怎么改回来？</p>
<p>直接在命令行中<code>export PATH=/bin:/usr/bin:/usr/local/bin</code>， 然后再去 vi ~/.zshrc 更改就好了。</p>
<p>zshrc 是 zsh 的配置文件，如果你不是用的 zsh, 而是 bash 或者 shell , 配置文件就不是这个了，有可能是 .bash_profile 之类的。</p>
<p>记得每次 modify …rc 文件后都 source 下哦， 要不不会生效。</p>
<p>上面或者直接使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> PATH = <span class="regexp">/usr/</span>bin:<span class="regexp">/usr/</span>local/bin:<span class="regexp">/usr/</span>bin:<span class="regexp">/bin:/u</span>sr/sbin:<span class="regexp">/sbin</span></span><br><span class="line"><span class="regexp">export PATH = $PATH:/u</span>sr/local/bin/node/.../bin</span><br></pre></td></tr></table></figure></p>
<p>即在路径前或路径后添加 <code>$PATH</code> 变量，也可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单来说，是我使用 &lt;code&gt;tnpm install -g webpack&lt;/code&gt; 或者任何使用 -g 来安装的全局 npm 包都报错： &lt;code&gt;zsh: command not found&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;想到了肯定是环境变量引起的，zsh 找
    
    </summary>
    
    
      <category term="工具/配置" scheme="http://sevencai.github.io/tags/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>嗯，又是纪录几个小的知识点</title>
    <link href="http://sevencai.github.io/2017/10/20/%E5%97%AF%EF%BC%8C%E5%8F%88%E6%98%AF%E7%BA%AA%E5%BD%95%E5%87%A0%E4%B8%AA%E5%B0%8F%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://sevencai.github.io/2017/10/20/嗯，又是纪录几个小的知识点/</id>
    <published>2017-10-20T11:54:29.000Z</published>
    <updated>2017-12-19T12:40:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hash-maps-without-side-effects"><a href="#Hash-maps-without-side-effects" class="headerlink" title="Hash maps without side effects"></a>Hash maps without side effects</h3><p>简单的来说，当我们用 对象字面量 <code>{}</code> 来创建这个 hash 表时，他会默认从 Object 继承属性，这等同于 <code>Object.create(Object.prototype)</code> , 这么来创建的话，就会有脏数据，因为其实你只是需要一个 map 而已。并且在 <code>for in</code> 的时候，还需要使用 <code>hasOwnProperty</code> 来判断。</p>
<p>但如果使用 <code>Object.create(null)</code>, 我们明确的指定其原型为 null, 因此他才是真正的没有构造器，没有 <code>toString()</code>, <code>hasOwnProperty</code>, <code>valueOf</code> 等。注意这里不要使用 <code>Object.create({})</code>,这个效果跟前面是一样的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dirtyMap = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> cleanMap = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">dirtyMap.constructor    <span class="comment">// function Object() &#123; [native code] &#125;</span></span><br><span class="line"></span><br><span class="line">cleanMap.constructor    <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterating maps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key;</span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> dirtyMap)&#123;</span><br><span class="line">  <span class="keyword">if</span> (dirtyMap.hasOwnProperty(key)) &#123;   <span class="comment">// Check to avoid iterating over inherited properties.</span></span><br><span class="line">    <span class="built_in">console</span>.log(key + <span class="string">" -&gt; "</span> + dirtyMap[key]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> cleanMap)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" -&gt; "</span> + cleanMap[key]);    <span class="comment">// No need to add extra checks, as the object will always be clean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="angular-双向绑定和-vue双向绑定"><a href="#angular-双向绑定和-vue双向绑定" class="headerlink" title="angular 双向绑定和 vue双向绑定"></a>angular 双向绑定和 vue双向绑定</h3><p>AngularJS 采用“脏值检测”的方式，数据发生变更后，对于所有的数据和视图的绑定关系进行一次检测，识别是否有数据发生了改变，有变化进行处理，可能进一步引发其他数据的改变，所以这个过程可能会循环几次，一直到不再有数据变化发生后，将变更的数据发送到视图，更新页面展现。如果是手动对 ViewModel 的数据进行变更，为确保变更同步到视图，需要手动触发一次“脏值检测”。</p>
<p>VueJS 则使用 ES5 提供的 Object.defineProperty() 方法，监控对数据的操作，从而可以自动触发数据同步。并且，由于是在不同的数据上触发同步，可以精确的将变更发送给绑定的视图，而不是对所有的数据都执行一次检测。</p>
<p><a href="http://www.jianshu.com/p/d3a15a1f94a0" target="_blank" rel="noopener"></a></p>
<hr>
<h3 id="移动端调试-eruda"><a href="#移动端调试-eruda" class="headerlink" title="移动端调试- eruda"></a>移动端调试- eruda</h3><p>eruda 类似于 小程序的 console 控制台。但是比小程序的更好，他还可以看 network,cookies,localStorage 这些都可以显示出来，非常的方便。用法也很方便。引入文件，init下就可以了。如果觉得引入了多余的文件，生产环境去掉就行。 github 地址是：<a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener">eruda</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//cdn.jsdelivr.net/npm/eruda"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;eruda.init();<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="编译和解释的区别"><a href="#编译和解释的区别" class="headerlink" title="编译和解释的区别"></a>编译和解释的区别</h3><h4 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h4><blockquote>
<p>编译器是一种计算机程序，负责把一种编程语言编写的源码转换成另外一种计算机代码，后者往往是以二进制的形式被称为目标代码(object code)。这个转换的过程通常的目的是生成可执行的程序。</p>
</blockquote>
<p>编译器需要产出另外一个代码。他往往是执行前的一步，产出可执行或者再需要编译的代码。</p>
<h4 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h4><blockquote>
<p>解释器是一种计算机程序，它直接执行由编程语言或脚本语言编写的代码，并不会把源代码预编译成机器码。一个解释器，通常会用以下的姿势来执行程序代码：分析源代码，并且直接执行。把源代码翻译成相对更加高效率的中间码，然后立即执行它。执行由解释器内部的编译器预编译后保存的代码</p>
</blockquote>
<p>可以把解释器看成一个黑盒子，我们输入源码，它就会实时返回结果。</p>
<p>总结起来可以像下面这样理解：<br>编译 Compile：把整个程序源代码翻译成另外一种代码，然后等待被执行，发生在运行之前，产物是「另一份代码」。</p>
<p>解释 Interpret：把程序源代码一行一行的读懂然后执行，发生在运行时，产物是「运行结果」。</p>
<p><a href="https://mp.weixin.qq.com/s/Z0uldTCJehk4SQR-98fvNA" target="_blank" rel="noopener"></a></p>
<hr>
<h3 id="Javascript-Style-Guide"><a href="#Javascript-Style-Guide" class="headerlink" title="Javascript Style Guide"></a>Javascript Style Guide</h3><p>最近看到了一个我觉得很合理的 Javascript 的规范指南。 github 地址是： <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">Airbnb Javascript Style Guide</a> 可以利用他的 eslint 规范自己的代码。我觉得不错。</p>
<hr>
<h3 id="Google-PageSpeed-Insights"><a href="#Google-PageSpeed-Insights" class="headerlink" title="Google PageSpeed Insights"></a>Google PageSpeed Insights</h3><p>想要快速提高网站的性能，用这个网站非常好。他会给你详细的分析，根据网页的代码质量得出报告。开发者根据这个报告，进行调整。除了这个外，使用 WebPagetest 也是很好的。</p>
<hr>
<h3 id="什么是关键-CSS"><a href="#什么是关键-CSS" class="headerlink" title="什么是关键 CSS"></a>什么是关键 CSS</h3><p>对CSS文件的请求可以显著增加网页呈现所需的时间。 原因是默认情况下，浏览器将延迟页面呈现，直到它完成加载、解析和执行所有在“页面”中引用的CSS文件。 这样做是因为它需要计算页面的布局。</p>
<p>不幸的是，这意味着如果我们有一个非常大的CSS文件，并且需要一段时间才能完成下载，我们的用户将在浏览器开始呈现页面之前等待整个文件被下载下来。 幸运的是，有一个巧妙的技术，使我们能够优化我们的CSS的传输并减轻阻塞。这种技术被称为优化关键渲染路径。关键渲染路径表示浏览器呈现页面的所有必须步骤。 我们想要找到最小的阻塞CSS集合 ，或者关键 CSS，以使页面显示给用户。 关键资源是可能阻塞页面首屏呈现的所有资源。 这背后的想法是，网站应该在前几个TCP数据包响应中为用户获取第一个屏幕的内容（或“首屏”内容）。</p>
<p>人工去找 关键 CSS，当然不太方便，现在出来了很多的工具，可以帮助我们提取出关键CSS， 比如 grunt 这类工具来提取。只是单纯的好奇什么是关键 CSS， 但是我已经好久没有写过 CSS 了。</p>
<hr>
<h3 id="解决个-http-缓存的困惑"><a href="#解决个-http-缓存的困惑" class="headerlink" title="解决个 http 缓存的困惑"></a>解决个 http 缓存的困惑</h3><p>访问百度首页的时候，为什么刷新页面后，静态资源都是返回 200， from cache? 有的人问，from cache 不是返回 304 才合理吗？</p>
<p>其实不是的，百度首页再资源在刷新后实际没有发送任何请求， 因为 caache-control 的缓存时间还没到期，也就是在 chrome 中根本没有发送请求。只要是 chrome 没有发送请求，资源从本地读取，都会在 network 中显示 状态为 200， from cache, 其中的 response 只是上一次回包留下的数据。如果 cache-control 的缓存到期了，然后发了请求到服务器，但是服务器通过 etag 等，发现资源没改变，这时候肯定就是返回 304 了。不要被绕道坑里了。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>开始工作了以后，基本上都是零零散散的学习。有些东西想要系统的写成博客，但是基本上一篇精心想写的文章，要花至少3个小时，时间略不够。我会想办法解决。比如上面的双向绑定，想仔细的写篇文章说说里面的原理，再比如 http 缓存。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hash-maps-without-side-effects&quot;&gt;&lt;a href=&quot;#Hash-maps-without-side-effects&quot; class=&quot;headerlink&quot; title=&quot;Hash maps without side effects&quot;&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://sevencai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>纪录最近遇到的坑</title>
    <link href="http://sevencai.github.io/2017/10/01/%E7%BA%AA%E5%BD%95%E6%9C%80%E8%BF%91%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://sevencai.github.io/2017/10/01/纪录最近遇到的坑/</id>
    <published>2017-10-01T13:39:56.000Z</published>
    <updated>2017-10-01T13:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录最近遇到的坑"><a href="#记录最近遇到的坑" class="headerlink" title="记录最近遇到的坑"></a>记录最近遇到的坑</h1><h3 id="ssi-未被解析"><a href="#ssi-未被解析" class="headerlink" title="ssi 未被解析"></a>ssi 未被解析</h3><p>今天接入 ssi 配置，本以为只需要 include 地址正确就行了。结果执行 gulp 命令后，竟然生成的 dist 里显示不出来 ssi 地址。我以为是我 virtual 绝对地址错误了。后来换成了 file,还是不正确。</p>
<p>最终发现我在压缩 HTML 的时候，用的 <code>gulp-minify-html</code> 竟然把我的 ssi 当成注释给去掉了。解决方法是 把这个插件换成 <code>gulp-htmlmin</code>,这个解析机制会稍微好一些，会保留我的 ssi 的内容。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#include virtual="h5/test.js"--&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Mixed-Content"><a href="#Mixed-Content" class="headerlink" title="Mixed Content"></a>Mixed Content</h3><p>今天在公司加班，突然同事让我帮他看个问题， 页面点击没反应。我猜测是 JS 未被正常加载，一看果然是： 页面显示</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mixed Content: The page at was loaded over HTTPS, but requested an insecure script This request has been blocked; the content must be served over HTTPS.</span><br></pre></td></tr></table></figure>
<p>错误就直白的显示页面是以 https 加载的， 但是却请求了一个不安全的 script, 这个 script 不是 https 的，而是 https 的。因此请求被浏览器拦截了。</p>
<p>这个问题我以前是知道的，但是这次才知道这个现象只出现在 ios 的机器上， 某些 android 对应的浏览器 上是没问题的。因此仔细了解了下这个问题，记录如下。</p>
<h4 id="什么是混合内容？"><a href="#什么是混合内容？" class="headerlink" title="什么是混合内容？"></a>什么是混合内容？</h4><blockquote>
<p>混合内容在以下情况下出现：初始 HTML 内容通过安全的 HTTPS 连接加载，但其他资源（例如，图像、视频、样式表、脚本）则通过不安全的 HTTP 连接加载。之所以称为混合内容，是因为同时加载了 HTTP 和 HTTPS 内容以显示同一个页面，且通过 HTTPS 加载的初始请求是安全的。现代浏览器会针对此类型的内容显示警告，以向用户表明此页面包含不安全的资源。</p>
</blockquote>
<p>之所以用 https 很清楚， https 可以帮助我们：</p>
<ol>
<li>身份验证， 不被重定向</li>
<li>数据完整性，不会有人篡改正在发送和接收的内容</li>
<li>保密性，会使用 TLS 提供加密</li>
</ol>
<p>但是并不是每个网站的每个访问者都会使用最新的浏览器，并且不同的浏览器商的不同版本的浏览器处理混合内容的方式也不是完全一样的。</p>
<p>注意混合内容不仅仅在 https 引入 http 文件中，在 https 页面里通过 ajax 的形式请求 http 资源，也是会被 block 掉的。</p>
<p>如果你的项目很大，一下子没办法全部转换完成，就可以使用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Security-Policy"</span> content=<span class="string">"upgrade-insecure-requests"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>可以在相应的页面的<head>里加上这句代码，<code>upgrade-insecure-requests</code>  意思是自动将http的不安全请求升级为https。 </head></p>
<hr>
<h3 id="微信开发工具"><a href="#微信开发工具" class="headerlink" title="微信开发工具"></a>微信开发工具</h3><p>微信开发工具自从更新了新版本后，我真的觉得好难用啊。。。这里记录一个刚开始使用 微信开发工具发现无法使用的情况。是因为他们工具有个 bug, 自动没有转成 https。那个错误是可以在微信开发工具的请求中看到的，是个 debug 请求。要用 fiddler 或者 whistle 重定向下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 微信开发者工具https whistle</span><br><span class="line">http:<span class="comment">//mp.weixin.qq.com https://mp.weixin.qq.com</span></span><br></pre></td></tr></table></figure>
<p>顺便提下：whistle 是个很好的代替 fiddler 的工具，因为配置更加灵活，比如正则通配啥的，而且直接在浏览器中，跨平台使用，完全没有隔阂。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记录最近遇到的坑&quot;&gt;&lt;a href=&quot;#记录最近遇到的坑&quot; class=&quot;headerlink&quot; title=&quot;记录最近遇到的坑&quot;&gt;&lt;/a&gt;记录最近遇到的坑&lt;/h1&gt;&lt;h3 id=&quot;ssi-未被解析&quot;&gt;&lt;a href=&quot;#ssi-未被解析&quot; class=&quot;head
    
    </summary>
    
    
      <category term="javascripts" scheme="http://sevencai.github.io/tags/javascripts/"/>
    
  </entry>
  
  <entry>
    <title>纪录几个点</title>
    <link href="http://sevencai.github.io/2017/08/24/%E7%BA%AA%E5%BD%95%E5%87%A0%E4%B8%AA%E7%82%B9/"/>
    <id>http://sevencai.github.io/2017/08/24/纪录几个点/</id>
    <published>2017-08-24T08:24:32.000Z</published>
    <updated>2017-12-19T12:40:23.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><p>创建Object的实例有下面三种方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123;&#125;;</span><br></pre></td></tr></table></figure></p>
<p>通过：<code>var o4 = Object.create(null);</code>可以创建没有原型的Object,这个对象不能使用 <code>toString,valueOf</code>等函数。</p>
<p>创建一个以另一个空对象为原型,且拥有一个属性p的对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span> &#125; &#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h3><p>在涉及其它运算符（译注：如下面的减号’-‘）时，JavaScript语言不会把数字变为字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"37"</span> - <span class="number">7</span> <span class="comment">// 30</span></span><br><span class="line"><span class="string">"37"</span> + <span class="number">7</span> <span class="comment">// "377"</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="单目加法运算符"><a href="#单目加法运算符" class="headerlink" title="单目加法运算符"></a>单目加法运算符</h3><p>将字符串转换为数字的另一种方法是使用单目加法运算符。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"1.1"</span> + <span class="string">"1.1"</span> = <span class="string">"1.11.1"</span></span><br><span class="line">(+<span class="string">"1.1"</span>) + (+<span class="string">"1.1"</span>) = <span class="number">2.2</span>   <span class="comment">// 注：加入括号为清楚起见，不是必需的。</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="false-判断"><a href="#false-判断" class="headerlink" title="false 判断"></a>false 判断</h3><p>当传递给条件语句时，所有其他值，包括所有对象会被计算为 true 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="literal">NaN</span></span><br><span class="line">空字符串 (<span class="string">""</span>)</span><br></pre></td></tr></table></figure></p>
<p>请不要混淆原始的布尔值true和false 与 布尔对象的值true和false.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (b) <span class="comment">// this condition evaluates to true</span></span><br><span class="line"><span class="keyword">if</span> (b == <span class="literal">true</span>) <span class="comment">// this condition evaluates to false</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="promise-catch-error"><a href="#promise-catch-error" class="headerlink" title="promise catch error"></a>promise catch error</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgLoad</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    request.open(<span class="string">'GET'</span>, url);</span><br><span class="line">    request.responseType = <span class="string">'blob'</span>;</span><br><span class="line">    request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(request.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="built_in">Error</span>(<span class="string">'Image didn\'t load successfully; error code:'</span></span><br><span class="line">                     + request.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      reject(<span class="built_in">Error</span>(<span class="string">'There was a network error.'</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    request.send();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="for…of-statement"><a href="#for…of-statement" class="headerlink" title="for…of statement"></a>for…of statement</h3><p>该新特性属于 ECMAScript 2015（ES6）规范，在使用时请注意浏览器兼容性。<br>下面的这个例子展示了 for…of 和 for…in 两种循环语句之间的区别。与 for…in 循环遍历的结果是数组元素的下标不同的是， for…of 遍历的结果是元素的值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line">arr.foo = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i); <span class="comment">// logs "0", "1", "2", "foo"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i); <span class="comment">// logs "3", "5", "7" // 注意这里没有 hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="剩余参数-rest-parameters"><a href="#剩余参数-rest-parameters" class="headerlink" title="剩余参数(rest parameters)"></a>剩余参数(rest parameters)</h3><p>剩余参数语法允许将不确定数量的参数表示为数组。在下面的例子中，使用剩余参数收集从第二个到最后参数。然后，我们将这个数组的每一个数与第一个参数相乘。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">multiplier, ...theArgs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> theArgs.map(<span class="function"><span class="params">x</span> =&gt;</span> multiplier * x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = multiply(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="列举对象属性"><a href="#列举对象属性" class="headerlink" title="列举对象属性"></a>列举对象属性</h3><p>从 ECMAScript 5 开始，有三种原生的方法用于列出或枚举对象的属性：</p>
<p>1.<code>for...in</code> 循环<br>该方法依次访问一个对象及其原型链中所有可枚举的属性。</p>
<p>2.<code>Object.keys(o)</code><br>该方法返回一个对象 o 自身包含（不包括原型中）的所有属性的名称的数组。</p>
<p>3.<code>Object.getOwnPropertyNames(o)</code><br>该方法返回一个数组，它包含了对象 o 所有拥有的属性（无论是否可枚举）的名称。</p>
<hr>
<h3 id="使用-defineProperty-为已存在的对象定义-setter"><a href="#使用-defineProperty-为已存在的对象定义-setter" class="headerlink" title="使用 defineProperty 为已存在的对象定义 setter"></a>使用 defineProperty 为已存在的对象定义 setter</h3><p>set  语法将对象属性绑定到要调用的一个函数上， <strong>当尝试设置该属性时</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">a</span>:<span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(o, &#123;</span><br><span class="line">    <span class="string">"b"</span>: &#123; <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span>; &#125; &#125;,</span><br><span class="line">    <span class="string">"c"</span>: &#123; <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">this</span>.a = x / <span class="number">2</span>; &#125; &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">o.c = <span class="number">10</span> <span class="comment">// Runs the setter, which assigns 10 / 2 (5) to the 'a' property</span></span><br><span class="line"><span class="built_in">console</span>.log(o.b) <span class="comment">// Runs the getter, which yields a + 1 or 6</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="使用defineProperty在存在的对象上定义-getter"><a href="#使用defineProperty在存在的对象上定义-getter" class="headerlink" title="使用defineProperty在存在的对象上定义 getter"></a>使用defineProperty在存在的对象上定义 getter</h3><p>get 语法将一个对象属性绑定到<strong>查询该属性时</strong>将被调用的一个函数上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">a</span>:<span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"b"</span>, &#123; <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span>; &#125; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.b) <span class="comment">// Runs the getter, which yields a + 1 (which is 1)</span></span><br></pre></td></tr></table></figure></p>
<p>defineProperty 的 getter/setter 方法就是 Vue 双向绑定的一部分机制。</p>
<hr>
<h3 id="判断浏览器高度"><a href="#判断浏览器高度" class="headerlink" title="判断浏览器高度"></a>判断浏览器高度</h3><p>注意，navigator的信息可以很容易地被用户修改，所以JavaScript读取的值不一定是正确的。很多初学者为了针对不同浏览器编写不同的代码，喜欢用if判断浏览器版本，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> width;</span><br><span class="line"><span class="keyword">if</span> (getIEVersion(navigator.userAgent) &lt; <span class="number">9</span>) &#123;</span><br><span class="line">    width = <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">&#125;</span><br><span class="line">但这样既可能判断不准确，也很难维护代码。正确的方法是充分利用JavaScript对不存在属性返回<span class="literal">undefined</span>的特性，直接用短路运算符||计算：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> width = <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.body.clientWidth;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="几个高度"><a href="#几个高度" class="headerlink" title="几个高度"></a>几个高度</h3><p>1.window对象不但充当全局作用域，而且表示浏览器窗口。</p>
<p>2.window对象有innerWidth和innerHeight属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高。</p>
<p>3.outerWidth和outerHeight属性，可以获取浏览器窗口的整个宽高。</p>
<p>4.screen对象表示屏幕的信息，常用的属性有：screen.width：屏幕宽度，以像素为单位；screen.height：屏幕高度，以像素为单位；</p>
<hr>
<h3 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h3><p>location对象表示当前页面的URL信息。例如，一个完整的URL：<br><code>http://www.example.com:8080/path/index.html?a=1&amp;b=2#TOP</code>可以用<code>location.href</code>获取。要获得URL各个部分的值，可以这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location.protocol; <span class="comment">// 'http'</span></span><br><span class="line">location.host; <span class="comment">// 'www.example.com'</span></span><br><span class="line">location.port; <span class="comment">// '8080'</span></span><br><span class="line">location.pathname; <span class="comment">// '/path/index.html'</span></span><br><span class="line">location.search; <span class="comment">// '?a=1&amp;b=2'</span></span><br><span class="line">location.hash; <span class="comment">// 'TOP'</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="DOM-对象"><a href="#DOM-对象" class="headerlink" title="DOM 对象"></a>DOM 对象</h3><p>低版本的IE&lt;8不支持querySelector和querySelectorAll。IE8仅有限支持。</p>
<hr>
<h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify"></a>JSON.stringify</h3><p>哈哈， 今天才知道 <code>JSON.stringify</code> 有第二个参数和第三个参数，是不是很菜。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="string">"skills"</span>: [</span><br><span class="line">    <span class="string">"JavaScript"</span>,</span><br><span class="line">    <span class="string">"Java"</span>,</span><br><span class="line">    <span class="string">"Python"</span>,</span><br><span class="line">    <span class="string">"Lisp"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入数组，用于筛选需要得到的key和value，传入key</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj, [<span class="string">"name"</span>, <span class="string">"skills"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; "&#123;"name":"小明","skills":["JavaScript","Java","Python","Lisp"]&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入函数， 用于在序列化之前对每对键值进行处理</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> value === <span class="string">"string"</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> value.toUpperCase();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj, convert);</span><br></pre></td></tr></table></figure>
<p>同样， <code>JSON.parse</code> 也有第二个参数，用来处理得到后的JSON串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(obj, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key === <span class="string">"name"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value + <span class="string">"小朋友"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter 一般可能我们只用第一个参数，其实还有第二个，第三个参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line"><span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, self</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(element); <span class="comment">// 依次打印'A', 'B', 'C'</span></span><br><span class="line">    <span class="built_in">console</span>.log(index); <span class="comment">// 依次打印0, 1, 2</span></span><br><span class="line">    <span class="built_in">console</span>.log(self); <span class="comment">// self就是变量arr</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>利用 filter 去除里面未定义元素或者空字符串：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">''</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="string">'R'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ele &amp;&amp; ele.trim();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; ["A", "R"]</span></span><br></pre></td></tr></table></figure></p>
<p>利用 filter 去重：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>, <span class="string">'apple'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = fruits.filter(<span class="function"><span class="keyword">function</span> (<span class="params">ele, index, self</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.indexOf(ele) === index;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; ["apple", "orange", "banana"]</span></span><br></pre></td></tr></table></figure></p>
<p>利用 filter 去除偶数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r =  arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ele % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; [1, 3, 5, 7]</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="千万不要直接用-JS-里的-Sort"><a href="#千万不要直接用-JS-里的-Sort" class="headerlink" title="千万不要直接用 JS 里的 Sort"></a>千万不要直接用 JS 里的 Sort</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 看上去正常的结果:</span></span><br><span class="line">[<span class="string">'Google'</span>, <span class="string">'Apple'</span>, <span class="string">'Microsoft'</span>].sort(); <span class="comment">// ['Apple', 'Google', 'Microsoft'];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// apple排在了最后:</span></span><br><span class="line">[<span class="string">'Google'</span>, <span class="string">'apple'</span>, <span class="string">'Microsoft'</span>].sort(); <span class="comment">// ['Google', 'Microsoft", 'apple']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法理解的结果:</span></span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>].sort(); <span class="comment">// [1, 10, 2, 20]</span></span><br></pre></td></tr></table></figure>
<p>字符串都是按照 ASCII 码来排列，所以1,2 没问题，只是平常要注意这个地方。后面一个一定要记住 Array.sort 默认都会把元素转换为 字符串，再来排序。所以连基本的数字排序他都没做好。</p>
<p>但是 sort 可以传入一个 function 用来自定义排序：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从小到大</span></span><br><span class="line"><span class="keyword">var</span> r = arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; y) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x = y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort 方法会对原数组进行修改，并且返回的也是修改后的数组</span></span><br><span class="line"><span class="comment">// arr =&gt;  [1, 2, 10, 20]</span></span><br><span class="line"><span class="comment">// r =&gt;  [1, 2, 10, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x = y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr =&gt; [20, 10, 2, 1]</span></span><br><span class="line"><span class="comment">// r =&gt; [20, 10, 2, 1]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;Object-create&quot;&gt;&lt;a href=&quot;#Object-create&quot; class=&quot;headerlink&quot; title=&quot;Object.create()&quot;&gt;&lt;/a&gt;Object.create()&lt;/h3&gt;&lt;p&gt;创建Object的实例有下面三种方
    
    </summary>
    
    
      <category term="other" scheme="http://sevencai.github.io/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Vuex</title>
    <link href="http://sevencai.github.io/2017/07/11/Understanding-Vuex/"/>
    <id>http://sevencai.github.io/2017/07/11/Understanding-Vuex/</id>
    <published>2017-07-11T09:21:39.000Z</published>
    <updated>2017-07-12T06:44:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Recently, I try to use Vuex to do some small projects. After some studies, I find a better way for myself to understand and use it. Here, I just put them done in my blog for later reading.  If you find any grammar mistakes or misleading opinions, please let me kown. Thank you.</p>
</blockquote>
<hr>
<h3 id="define-a-store"><a href="#define-a-store" class="headerlink" title="define a store"></a>define a store</h3><p>First define a store. A <code>store</code> should contain 4 parts, they are</p>
<ol>
<li>state</li>
<li>mutaions</li>
<li>actions</li>
<li>getters</li>
</ol>
<p>after define these 4 parts, combine them by using  <code>Vue.Store()</code>.</p>
<p><code>State</code> is an Object.  It contains all the data information of your app.  Each Vuex instance is just a single state tree.</p>
<p><code>mutations</code> are operations that actually mutates state.  And state can only be changed by mutations. Each mutaion handler gets the entire state tree as the first argument, followed by additional payload arguments. <code>Mutations must be synchronous and be recorded by plugins for debugging purposes</code>.</p>
<p><code>actions</code> are functions that causes side effects and handle your logical process . Unlike  <code>mutations</code>,  you can involve asynchronous operations.</p>
<p><code>getters are functions</code>.</p>
<p>let’s see an counter example.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">//define  root state object.</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define mutaions</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  increment (state) &#123;</span><br><span class="line">    state.count++</span><br><span class="line">  &#125;,</span><br><span class="line">  decrement (state) &#123;</span><br><span class="line">    state.count--</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define actions</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  increment: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> commit(<span class="string">'increment'</span>),</span><br><span class="line">  decrement: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> commit(<span class="string">'decrement'</span>),</span><br><span class="line">  incrementIfOdd (&#123; commit, state &#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((state.count + <span class="number">1</span>) % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      commit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  incrementAsync (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'increment'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define getters</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  evenOrOdd: <span class="function"><span class="params">state</span> =&gt;</span> state.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A Vuex instance is created by combining the state, mutations, actions,</span></span><br><span class="line"><span class="comment">// and getters.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  actions,</span><br><span class="line">  mutations</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>   The above example comes from <a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">https://github.com/vuejs/vuex</a>. You can see that all the four parts are been written in one file, which is bad for big and complex projects.  To avoid this, just split them, and then combine them together.</p>
<hr>
<h3 id="define-entry"><a href="#define-entry" class="headerlink" title="define entry"></a>define entry</h3><p>You may have an root element in your app.  Just set the store and the view component to the root element. In this way , your store will be available in any place of your application.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'./Counter.vue'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    store,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(Counter)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>Then, you just need to include this file in your index.html. <code>Shared.js</code> is common code that you extract by  webpack.<br><code>bundle.js</code> includes all the code that you need in this app.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"shared.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="write-your-view-component"><a href="#write-your-view-component" class="headerlink" title="write your view component"></a>write your view component</h3><p>After defining the entry, We can begin write our component. Notice that you can use your <code>Store</code> Object now.</p>
<p>Use <code>$store.state.count</code>  to get your state info. And by functions like  <code>mapGetters</code> and <code>mapActions</code> ,you can get the functions that you have just  defined in store a moment ago.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    Clicked: &#123;&#123; $store.state.count &#125;&#125; times, count is &#123;&#123; evenOrOdd &#125;&#125;.</span><br><span class="line">    &lt;button @click=<span class="string">"increment"</span>&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &lt;button @click=<span class="string">"decrement"</span>&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &lt;button @click=<span class="string">"incrementIfOdd"</span>&gt;Increment <span class="keyword">if</span> odd&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="incrementAsync"&gt;Increment async&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; mapGetters, mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      computed: mapGetters([</span><br><span class="line">        <span class="string">'evenOrOdd'</span></span><br><span class="line">      ]),</span><br><span class="line">      methods: mapActions([</span><br><span class="line">        <span class="string">'increment'</span>,</span><br><span class="line">        <span class="string">'decrement'</span>,</span><br><span class="line">        <span class="string">'incrementIfOdd'</span>,</span><br><span class="line">        <span class="string">'incrementAsync'</span></span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="run-the-app"><a href="#run-the-app" class="headerlink" title="run the app"></a>run the app</h3><p>We have just used ES2015 and vue, so it’s necessary to use webpack compiling all the code.</p>
<p>Actually, I am not very skilled in webpack. So I  keep them down, and give some small introductions for later checking out.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./app.js'</span>,</span><br><span class="line"></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="attr">loader</span>: <span class="string">'babel-loader'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="attr">loader</span>: <span class="string">'vue-loader'</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name: <span class="string">'shared'</span>,</span><br><span class="line">            filename: <span class="string">'shared.js'</span></span><br><span class="line">        &#125;),  <span class="comment">//get share.js</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;   <span class="comment">// 编译时配置的全局变量</span></span><br><span class="line">            <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(process.env.NODE_ENV || <span class="string">'development'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),   <span class="comment">//热更新插件</span></span><br><span class="line">        <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin() <span class="comment">//不触发错误,即编译后运行的包正常运行</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>After make the <code>webpack.config</code>,let’s start the server. Here, we can use <code>express</code>  to build a little server.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackHotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)</span><br><span class="line"><span class="keyword">const</span> opn = <span class="built_in">require</span>(<span class="string">'opn'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">8080</span></span><br><span class="line"><span class="keyword">const</span> autoOpenBrowser = <span class="literal">true</span>                  <span class="comment">//you can load the config from your config file.</span></span><br><span class="line"><span class="keyword">const</span> compiler = webpack(webpackConfig)</span><br><span class="line"></span><br><span class="line">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class="line">    stats: &#123;</span><br><span class="line">        colors: <span class="literal">true</span>,</span><br><span class="line">        chunks: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.use(webpackHotMiddleware(compiler))</span><br><span class="line">app.use(express.static(__dirname))</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = app.listen(port, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Server listening on http://localhost:<span class="subst">$&#123;port&#125;</span>, Ctrl+C to stop`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(autoOpenBrowser) &#123;</span><br><span class="line">        opn(<span class="string">`http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>npm package <code>opn</code> was used to force open the browser.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Recently, I try to use Vuex to do some small projects. After some studies, I find a better way for myself to understand and 
    
    </summary>
    
    
      <category term="Javascript" scheme="http://sevencai.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>由 Fetch 跨域 看 CORS</title>
    <link href="http://sevencai.github.io/2017/03/06/%E7%94%B1-Fetch-API-%E7%9C%8B-CORS/"/>
    <id>http://sevencai.github.io/2017/03/06/由-Fetch-API-看-CORS/</id>
    <published>2017-03-06T07:59:49.000Z</published>
    <updated>2017-07-11T09:31:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看 react 获取服务器数据时， 看到了一新的 API <a href="https://fetch.spec.whatwg.org/" target="_blank" rel="noopener">fetch</a>， 上手来用了用，觉得十分好用。但是使用的过程中遇到了一些问题，还是决定整体的记录下。 fetch 类似于 Ajax, 区别自在与 fetch 结合了 promise 的友好调用方式，有效的防止了 callback hell。</p>
<blockquote>
<p>fetch() allows you to make network requests similar to XMLHttpRequest (XHR). The main difference is that the Fetch API uses Promises, which enables a simpler and cleaner API, avoiding callback hell and having to remember the complex API of XMLHttpRequest.</p>
</blockquote>
<hr>
<h3 id="对比传统方式与-fetch"><a href="#对比传统方式与-fetch" class="headerlink" title="对比传统方式与 fetch"></a><strong>对比传统方式与 fetch</strong></h3><p>先感受下好用在哪儿：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'./api/some.json'</span>)  </span><br><span class="line">  .then(  </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;  </span><br><span class="line">      <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Looks like there was a problem. Status Code: '</span> +  </span><br><span class="line">          response.status);  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Examine the text in the response  </span></span><br><span class="line">      response.json().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(data);  </span><br><span class="line">      &#125;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  )  </span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Fetch Error :-S'</span>, err);  </span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p>
<p>相比于传统的 <code>XMLHttpRequest</code> 的如下写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reqListener</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);  </span><br><span class="line">  <span class="built_in">console</span>.log(data);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reqError</span>(<span class="params">err</span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Fetch Error :-S'</span>, err);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">oReq.onload = reqListener;  </span><br><span class="line">oReq.onerror = reqError;  </span><br><span class="line">oReq.open(<span class="string">'get'</span>, <span class="string">'./api/some.json'</span>, <span class="literal">true</span>);  </span><br><span class="line">oReq.send();</span><br></pre></td></tr></table></figure>
<p>传统的 <code>XMLHttpRequest</code> 需要使用两个回调函数，分别在 onload 和 onerror 的时候使用。并且使用 open 和 send 两个 api, 这么看来 fetch 是不是很好用。</p>
<hr>
<h3 id="fetch-跨域"><a href="#fetch-跨域" class="headerlink" title="fetch 跨域"></a><strong>fetch 跨域</strong></h3><p>在用 fetch 的时候，跟普通 ajax 一样，经常会遇到 跨域的情况，那么跨域应该如何解决呢？</p>
<p>分为下面两种情况，也可以看我在<a href="https://www.zhihu.com/question/47029864/answer/150069385" target="_blank" rel="noopener">知乎</a>上的回答：</p>
<p><strong>1. 如果服务器不支持 CORS， 则不用使用 Fetch Api 了。</strong></p>
<p>因为此时如果你设置了 <code>{mode: &#39; cors &#39;}</code>，就会报错告诉你你请求的服务器不支持 CORS。大概会报下面的错误：</p>
<blockquote>
<p>Response to preflight request doesn’t pass access control check: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p>
</blockquote>
<p>如果设置成 <code>{mode: &#39; no-cors &#39;}</code>, 虽然不会报错，但是结果会 返回被标记了为 <code>opaque</code> 的数据，表明你没有权限访问。<br><img src="http://www.cailidan.cn/images/corswrong.png" alt="opaque"></p>
<p>这种情况下可以使用 <code>JSONP</code>。</p>
<p><strong>2. 如果服务器支持 CORS, 则在客户端设置相应的  <code>Access-Control-Allow-Origin</code>  即可得到数据。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">    <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">&#125;);</span><br><span class="line">fetch(url, &#123;</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    headers: myHeaders,</span><br><span class="line">    mode: <span class="string">'cors'</span></span><br><span class="line">&#125;) .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// TODO </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>回到刚刚的第一种情况， 如果 设置 <code>{mode: &#39;no-cors&#39;}</code> 返回的数据都是 opaque 的，那还要这种 mode 干嘛呢？ </p>
<blockquote>
<p>no-cors is intended to make requests to other origins that do not have CORS headers and result in an opaque response, but as stated, this isn’t possible in the window global scope at the moment.</p>
</blockquote>
<p><a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch" target="_blank" rel="noopener">introduction-to-fetch</a>这篇文章给了我们解释，就是比如你发送一些 log_data 的数据， 上报一些数据，这个时候你是不需要返回的，那利用 <code>no-cors</code> 就是没问题的了。也就是说 {mode: ‘no-cors’} 模式允许来自 CDN 的脚本、其他域的图片和其他一些跨域资源或者不需要返回资源的, 但是 cors 模式一般用来跨域请求，从而从第三方提供的 API 获取数据。</p>
<hr>
<h3 id="缺点与优点"><a href="#缺点与优点" class="headerlink" title="缺点与优点"></a><strong>缺点与优点</strong></h3><p>优点上面已经讲到了，比如支持 <code>primise</code> 的方式，比如简介的 API, 多样的设置。 但是还有一种情况可能会使用到：</p>
<p>比如你需要的传给服务器的数据很大，这时候用传统的 JSONP 不太合适，因为 JSONP 只支持 GET, 不支持 POST, 这个时候也可以用 Fetch, 给相应的服务器设置一下 CORS 即可。</p>
<p>有一个缺点是浏览器不兼容，还有一个缺点 和 promise 一样，一旦发生了就不能取消。</p>
<hr>
<h3 id="其他注意的地方"><a href="#其他注意的地方" class="headerlink" title="其他注意的地方"></a><strong>其他注意的地方</strong></h3><p>1.在 Firefox 39, Chrome 42 以上都支持了， 对于其他浏览器，建议使用 <a href="https://github.com/github/fetch" target="_blank" rel="noopener">Fetch Polyfil</a> </p>
<p>2.Fetch 引入了 3 个接口，分别是 <code>Headers</code>，<code>Request</code> 和 <code>Response</code>， 这里就不讲解具体怎么用了。</p>
<hr>
<h3 id="理解CORS"><a href="#理解CORS" class="headerlink" title="理解CORS"></a><strong>理解CORS</strong></h3><p>在用 fetch 的过程中， 发现自己对 CORS 的理解还是不完全，又学习了下：</p>
<blockquote>
<p>跨来源资源共享（CORS）是一份浏览器技术的规范，提供了 Web 服务从不同网域传来沙盒脚本的方法，以避开浏览器的同源策略[1]，是 JSONP 模式的现代版。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。用 CORS 可以让网页设计师用一般的 XMLHttpRequest，这种方式的错误处理比 JSONP 要来的好。另一方面，JSONP 可以在不支持 CORS 的老旧浏览器上运作。现代的浏览器都支持 CORS</p>
</blockquote>
<p><strong>简单的说，我们只需要在服务器上发送一个响应标头， 就可以允许一个域上的网络向另外一个域提交跨域请求。  这种方法就是 CORS ,是一种跨域的访问机制。</strong></p>
<p>比如在我的 php 代码中 header 一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Access-Control-Allow-Origin: *"</span>);</span><br></pre></td></tr></table></figure>
<p>然后再浏览器返回给我们的 Response Headers 里面就有下面的信息：</p>
<p><img src="http://cailidan.cn/images/accesscontrol.png" alt="结果"></p>
<p>CORS 的请求又包括了 两类，有简单请求以及非简单请求两种。两种具体不同在于对服务器请求的不同。</p>
<p>如果是简单的 <code>HEAD、GET、POST</code> ，Content-Type只限于三个值：<code>application/x-www-form-urlencoded、multipart/form-data、text/plain</code>，这种情况就是简单请求。</p>
<p>如果有请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code> 的时候，那么可以认为是复杂请求。</p>
<p>两者的区别在于 后者（复杂请求）回去在真正的请求服务器资源前， 先发一次预检请求，浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。<strong>而第一种就是不管怎么样都会先发一次 XMLHttpRequest。</strong></p>
<p>更加具体的可以参考文章<a href="https://spring.io/understanding/CORS" target="_blank" rel="noopener">understanding/CORS</a>和文章<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">from 软老师的cors</a></p>
<hr>
<h3 id="other-tips"><a href="#other-tips" class="headerlink" title="other tips"></a><strong>other tips</strong></h3><p>在学习 fetch 的过程中， 看到了一篇文章<a href="http://andrewhfarmer.com/ajax-libraries/" target="_blank" rel="noopener">javascript ajax libraries</a>, 这篇文章里面总结了下我们发起 http 请求时，用到的一些库的对比。我觉得总结的很好。附文章中的一个图。</p>
<p><img src="http://cailidan.cn/images/ajax12.png" alt=""></p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>总体来说就是学习了一个新的 API, 然后又进一步了解了下 CORS, 了解了什么时候该用 Fetch, CORS 又是场合下用，并且分为哪些中情况。</p>
<p>阅读并推荐资源如下，十分感谢：</p>
<ul>
<li><a href="http://bubkoo.com/2015/05/08/introduction-to-fetch/#cors" target="_blank" rel="noopener">introduction-to-fetch</a></li>
<li><a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch" target="_blank" rel="noopener">introduction-to-fetch</a></li>
<li><a href="https://hacks.mozilla.org/2015/03/this-api-is-so-fetching/" target="_blank" rel="noopener">fetch的具体使用方法</a></li>
<li><a href="https://spring.io/understanding/CORS" target="_blank" rel="noopener">CORS的两种处理方式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看 react 获取服务器数据时， 看到了一新的 API &lt;a href=&quot;https://fetch.spec.whatwg.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fetch&lt;/a&gt;， 上手来用了用，觉得十分好用。但是使用的过程中
    
    </summary>
    
    
      <category term="javascript" scheme="http://sevencai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>探索Promise用法和机制</title>
    <link href="http://sevencai.github.io/2017/02/27/%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2Promise%E6%9C%BA%E5%88%B6/"/>
    <id>http://sevencai.github.io/2017/02/27/深度探索Promise机制/</id>
    <published>2017-02-27T13:36:38.000Z</published>
    <updated>2017-12-19T12:40:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前就会经常用到 Promise，但是没有去探究内部的实现机制。 正好由这次在小程序中引入了 Promise ，探究下内部原理。</p>
<hr>
<h3 id="为什么使用-Promise"><a href="#为什么使用-Promise" class="headerlink" title="为什么使用 Promise"></a><strong>为什么使用 Promise</strong></h3><p>Promise 可以让我们避免回调的地狱。以前我们可能使用的是 bluebird 或者 Q,现在我们已经有了原生的实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func1(<span class="function"><span class="keyword">function</span> (<span class="params">value1</span>) </span>&#123;</span><br><span class="line">    func2(value1, <span class="function"><span class="keyword">function</span> (<span class="params">value2</span>) </span>&#123;</span><br><span class="line">        func3(value2, <span class="function"><span class="keyword">function</span> (<span class="params">value3</span>) </span>&#123;</span><br><span class="line">            func4(value3, <span class="function"><span class="keyword">function</span> (<span class="params">value4</span>) </span>&#123;</span><br><span class="line">                func5(value4, <span class="function"><span class="keyword">function</span> (<span class="params">value5</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// Do something with value 5</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>使用 Promise 后，可以把平行的代码变成竖状的易读的代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func1(value)</span><br><span class="line">	.then(func2)</span><br><span class="line">	.then(func3)</span><br><span class="line">	.then(func4)</span><br><span class="line">	.then(func5)</span><br></pre></td></tr></table></figure></p>
<p>一个最常见的 Promise 的例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"> request.get(url, (error, response, body) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(body) &#123;</span><br><span class="line">   resolve(<span class="built_in">JSON</span>.parse(body));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   resolve(&#123;&#125;); <span class="comment">//reject(....);</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="小程序-Promise-化实现"><a href="#小程序-Promise-化实现" class="headerlink" title="小程序 Promise 化实现"></a><strong>小程序 Promise 化实现</strong></h3><p>小程序里，包括官方文档的 demo 里会看到很多的 cb, 比如我们获取用户身份信息就需要下面的操作：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wx.login(&#123;</span><br><span class="line">	success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	  wx.getUserInfo(&#123;</span><br><span class="line">	    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">	      that.globalData.userInfo = res.userInfo;</span><br><span class="line">	      <span class="keyword">typeof</span> cb == <span class="string">"function"</span> &amp;&amp; cb(that.globalData.userInfo)</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这样略微深的嵌套一定程度的阻碍了我们的阅读和理解，代码整体也不好查 bug 和 扩展。所以我考虑到用 Promise 扩展一层。</p>
<p>但是由于小程序已经去除了 自带的 Promise ，所以需要开发者自动引入 Promise 库，或者编写相应的 Promise 库。这里我引入 <a href="https://github.com/stefanpenner/es6-promise" target="_blank" rel="noopener">es6-promise</a> 这个库。注意不要使用 bluebird ，bluebird 会导致android 上有报错，因为这个里面有用到一些小程序不支持的比如 document, window之类的对象。</p>
<p>选取一小段没使用的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'es6-promise'</span>).Promise; </span><br><span class="line"><span class="keyword">var</span> wxLib = <span class="built_in">require</span>(<span class="string">'../wxLib);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wxLib.login()</span></span><br><span class="line"><span class="string">.then(()=&gt;&#123;</span></span><br><span class="line"><span class="string"> wxLib.getUserInfo();</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">.catch(()=&gt;&#123;</span></span><br><span class="line"><span class="string"> wxLib.showErrorMsg();</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure></p>
<p>promise 更易我们看清整个的结构。更好的控制异步流程， 也可以让我们使用本来不方便使用的 return, throw 等。</p>
<hr>
<h3 id="更多其他的用法"><a href="#更多其他的用法" class="headerlink" title="更多其他的用法"></a><strong>更多其他的用法</strong></h3><h4 id="关于-Promise-的几个注意的地方"><a href="#关于-Promise-的几个注意的地方" class="headerlink" title="关于 Promise 的几个注意的地方"></a><strong>关于 Promise 的几个注意的地方</strong></h4><ol>
<li>Promise 对象是一个构造函数，所以才需要 new Promise 生成一个 Pormise 的实例对象。</li>
<li>Promise 构造函数接受了两个参数，分别是 resolve 和 reject, 这两个函数由 js 引擎提供，不需要自己实现。</li>
<li>resolve 是将 Promise 对象从 未完成 =&gt; 成功。（pending =&gt; resolved）, reject 是 将对象的状态从 未完成=&gt; 失败。（pending=&gt;rejected）</li>
<li>then 方法接收两个回调函数。第一个是 Promise 返回 resolved 的时候调用的， 第二个是 返回 rejected 的时候调用的。</li>
<li>Promise catch 是 .then(null, rejection)的别名，里面的回调用于发生错误时使用。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种情况不会捕捉then 里的错误</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; <span class="comment">//cb</span></span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="关于Promise-all的用法"><a href="#关于Promise-all的用法" class="headerlink" title="关于Promise.all的用法"></a><strong>关于Promise.all的用法</strong></h4><blockquote>
<p>var p = Promise.all([p1, p2, p3]);<br>其中 Promise.all 会接收一个数组作为参数， p1,p2,p3都是 Promise 对象的实例。 如果不是，则调用 Promise.resolve 方法，将参数转化为 Promise 实例。 </p>
</blockquote>
<p>他们三个之间的关系是： 必须都变成 fulfilled ， p才是 fulfilled, 只要有一个是 rejected, 就会是 rejected, 并且这个第一个被 reject 的实例的返回值就会给到 P。 haha, 挺团结的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urls = [</span><br><span class="line">  <span class="string">'/api/commits'</span>,</span><br><span class="line">  <span class="string">'/api/issues/opened'</span>,</span><br><span class="line">  <span class="string">'/api/issues/assigned'</span>,</span><br><span class="line">  <span class="string">'/api/issues/completed'</span>,</span><br><span class="line">  <span class="string">'/api/issues/comments'</span>,</span><br><span class="line">  <span class="string">'/api/pullrequests'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promises = urls.map(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  $.ajax(&#123; <span class="attr">url</span>: url &#125;)</span><br><span class="line">   .done(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">	 resolve(data);</span><br><span class="line">   &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(promises)</span><br><span class="line"> .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// results is an array list</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>有一个方法叫做 Promise.race() 跟 Promise.all 差不多。也是</p>
<blockquote>
<p>var p = Promise.race([p1, p2, p3]);</p>
</blockquote>
<p>p1, p2, p3 只要有一个率先改变，p 的状态就会改，并且把这个率先改的返回值给到 P。</p>
<hr>
<h4 id="Promise-resolve-的-用法"><a href="#Promise-resolve-的-用法" class="headerlink" title="Promise.resolve() 的 用法"></a><strong>Promise.resolve() 的 用法</strong></h4><p>上面提到了， promise.all 和 promise.race 的参数 p1, p2, p3 都必须是 promise 的实例对象。 如果不是，就需要转化为 Promise 对象。 Promise.resolve 就派上了用法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'foo'</span>));</span><br></pre></td></tr></table></figure>
<p>Promise.resolve 方法的参数分成下面几个情况：</p>
<blockquote>
<p>Promise.resolve(value);</p>
<p>Promise.resolve(promise);</p>
<p>Promise.resolve(thenable);</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">"Success"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// "Success"</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 不会被调用</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v[<span class="number">0</span>]); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="实现一个简易的-Promise"><a href="#实现一个简易的-Promise" class="headerlink" title="实现一个简易的 Promise"></a><strong>实现一个简易的 Promise</strong></h3><p>这里实现的过程我参考阅读了很多篇文章，感谢，具体有：</p>
<ol>
<li><a href="https://github.com/xieranmaya/blog/issues/3" target="_blank" rel="noopener">剖析Promise内部结构</a></li>
<li><a href="https://blog.coding.net/blog/how-do-promises-work" target="_blank" rel="noopener">how-do-promises-work</a></li>
<li><a href="http://bruce-xu.github.io/blogs/js/promise" target="_blank" rel="noopener">JS Promise的实现原理</a></li>
</ol>
<p>先搭一个简单的框架。</p>
<hr>
<h4 id="构造函数的实现"><a href="#构造函数的实现" class="headerlink" title="构造函数的实现"></a><strong>构造函数的实现</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// processor 就是传给 Promise 的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">processor</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.status = <span class="string">'pending'</span>;</span><br><span class="line">	<span class="keyword">this</span>.data = <span class="literal">undefined</span>;</span><br><span class="line">	<span class="keyword">this</span>.onResolvedCb = [];</span><br><span class="line">	<span class="keyword">this</span>.onRejectedCb = [];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">		(<span class="keyword">typeof</span> processor === <span class="string">'function'</span>) &amp;&amp; processor(resolve, reject);</span><br><span class="line">	&#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line">		reject(e);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是对 resolve 和 reject 的实现， 我们用原生的 Promise 的时候不需要实现这两个函数，是因为 JS 引擎已经帮我们做了这件事情。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'resolved'</span> || <span class="keyword">this</span>.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.status = <span class="string">'resolved'</span>;</span><br><span class="line">  <span class="keyword">this</span>.data = value;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.onResolvedCb.length; i &lt; l; i++) &#123;</span><br><span class="line">   <span class="comment">//执行回调函数</span></span><br><span class="line">   <span class="keyword">this</span>.onResolvedCb[i].value;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reject 就和 resolve 非常像</span></span><br><span class="line"><span class="keyword">this</span>.reject = <span class="function">(<span class="params">reson</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'rejected'</span> || <span class="keyword">this</span>.status === <span class="string">'pending'</span>)&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = <span class="string">'rejected'</span>;</span><br><span class="line">   <span class="comment">//......</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="then-函数的实现"><a href="#then-函数的实现" class="headerlink" title="then 函数的实现"></a><strong>then 函数的实现</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function">(<span class="params">onResolved, onRejected</span>) =&gt;</span> &#123;</span><br><span class="line">	onResolved = <span class="keyword">typeof</span> onResolved === <span class="string">'function'</span> ? onResolved : <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'resolved'</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="keyword">let</span> x = onResolved(self.data);</span><br><span class="line">				<span class="keyword">if</span>(x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">					x.then(resolve, reject);</span><br><span class="line">				&#125;</span><br><span class="line">				resolve(x);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">				reject(e);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">//TODO</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//pending</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">//TODO</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>上面只是一个粗浅的大概。如果要丰富 Promise ， 还要去实现很多其他的内容，比如 catch 之类的。关于异步还有很多要学习，其实大部分都学习过，只是因为使用的少，没有考虑他内部的实现，也比较容易忘记。还是实践是王道。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前就会经常用到 Promise，但是没有去探究内部的实现机制。 正好由这次在小程序中引入了 Promise ，探究下内部原理。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;为什么使用-Promise&quot;&gt;&lt;a href=&quot;#为什么使用-Promise&quot; class=&quot;headerli
    
    </summary>
    
    
      <category term="javascript" scheme="http://sevencai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React 读书笔记（一）</title>
    <link href="http://sevencai.github.io/2017/02/21/React-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://sevencai.github.io/2017/02/21/React-读书笔记/</id>
    <published>2017-02-21T03:07:36.000Z</published>
    <updated>2017-07-11T09:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近又把 React 的官方文档和有关的书籍看了下，又有新的收获。下面记录下我最近有感受的或者觉得重要的一些地方。也体会到了其实最好的书籍就是官方文档。 而且React的文档写的很好，有很好的例子，有codepen,也有相应的解释说明。赞。</p>
<p><img src="http://www.cailidan.cn/images/react.png" alt=""></p>
<hr>
<h4 id="Adding-React-to-an-Existing-Application"><a href="#Adding-React-to-an-Existing-Application" class="headerlink" title="Adding React to an Existing Application"></a><strong>Adding React to an Existing Application</strong></h4><p>You don’t need to rewrite your app to start using React.</p>
<p>We recommend adding React to a small part of your application, such as an individual widget, so you can see if it works well for your use case.</p>
<p><strong>如果已经有现有的 App，没有必要重头全部重构，可以先选取其中一个模块。</strong></p>
<hr>
<h4 id="React-Only-Updates-What’s-Necessary"><a href="#React-Only-Updates-What’s-Necessary" class="headerlink" title="React Only Updates What’s Necessary"></a><strong>React Only Updates What’s Necessary</strong></h4><p>React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.</p>
<p>也就是传说中的虚拟DOM,每次render之前比较前后节点的区别，<strong>只更新需要更新的部分。</strong></p>
<hr>
<h4 id="Components-and-Props"><a href="#Components-and-Props" class="headerlink" title="Components and Props"></a><strong>Components and Props</strong></h4><p>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.</p>
<p>Conceptually, components are like JavaScript functions. They <strong>accept arbitrary inputs (called “props”) and return React elements</strong> describing what should appear on the screen.</p>
<p>组件就像函数一样，接受 props ，然后返回对应的 元素。所以我的理解似乎组件一定要是<strong>可复用，简洁，并且保持独立。</strong></p>
<hr>
<h4 id="Functional-and-Class-Components"><a href="#Functional-and-Class-Components" class="headerlink" title="Functional and Class Components"></a><strong>Functional and Class Components</strong></h4><p>函数和 es6 的类都可以生成 Components。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>This function is a valid React component because it accepts a single “props” object argument with data and returns a React element. We call such components “functional” because they are literally JavaScript functions.</p>
<p>You can also use an ES6 class to define a component:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>can both be used as<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Sara"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">ReactDOM.render(</span></span><br><span class="line"><span class="xml">  element,</span></span><br><span class="line"><span class="xml">  document.getElementById('root')</span></span><br><span class="line"><span class="xml">);</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="Rules-to-Follow"><a href="#Rules-to-Follow" class="headerlink" title="Rules to Follow"></a><strong>Rules to Follow</strong></h4><p>不要害怕把 大的 components 切分成小的。这一点我开始就有点害怕。总觉得分的大了就越开了，是不是越难维护了。但实际上只要组件<strong>确实是独立可复用</strong>，就完全可以大胆的分割。</p>
<p><strong>Extracting Components</strong><br>Don’t be afraid to split components into smaller components.</p>
<p><strong>Props are Read-Only</strong><br>React is pretty flexible but it has a single strict rule:</p>
<p><strong>All React components must act like pure functions with respect to their props.</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pure, they do not attempt to change their inputs, and always return the same result for the same inputs.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//impure because it changes its own input</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params">account, amount</span>) </span>&#123;</span><br><span class="line">  account.total -= amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So,<strong>we need <code>State</code>, State allows React components to change their output over time in response to user actions, network responses</strong>, and anything else, without violating this rule.</p>
<hr>
<h4 id="Converting-a-Function-to-a-Class"><a href="#Converting-a-Function-to-a-Class" class="headerlink" title="Converting a Function to a Class"></a>Converting a Function to a Class</h4><p>You can convert a functional component like Clock to a class in five steps:</p>
<ol>
<li><p>Create an ES6 class with the same name that extends React.Component.</p>
</li>
<li><p>Add a single empty method to it called render().</p>
</li>
<li><p>Move the body of the function into the render() method.</p>
</li>
<li><p>Replace props with this.props in the render() body.</p>
</li>
<li><p>Delete the remaining empty function declaration.</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        &lt;h2&gt;It is &#123;<span class="keyword">this</span>.props.date.toLocaleTimeString()&#125;.&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Components defined as classes have some additional features. Local state is exactly that: a feature available only to classes.</strong></p>
<hr>
<h4 id="Adding-Lifecycle-Methods-to-a-Class"><a href="#Adding-Lifecycle-Methods-to-a-Class" class="headerlink" title="Adding Lifecycle Methods to a Class"></a><strong>Adding Lifecycle Methods to a Class</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.timerID = setInterval(</span><br><span class="line">      () =&gt; <span class="keyword">this</span>.tick(),</span><br><span class="line">      <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        &lt;h2&gt;It is &#123;<span class="keyword">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Clock /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="Using-State-Correctly"><a href="#Using-State-Correctly" class="headerlink" title="Using State Correctly"></a><strong>Using State Correctly</strong></h4><ol>
<li>Do Not Modify State Directly<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="keyword">this</span>.state.comment = <span class="string">'Hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">comment</span>: <span class="string">'Hello'</span>&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>The only place where you can assign this.state is the constructor.</strong></p>
<ol>
<li>State Updates May Be Asynchronous<br>意思是state的更新可能是异步的，并且为了细嫩那个，有可能会合并setState。所以不能够依赖他们当前的值来计算下面的一个状态。<br>React may batch multiple setState() calls into a single update for performance.</li>
</ol>
<p>Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.</p>
<p>下面就使用了prevState来保存了当前的state,这样再计算，就不会因setState异步的原因，而导致结果错误。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  counter: <span class="keyword">this</span>.state.counter + <span class="keyword">this</span>.props.increment,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  counter: prevState.counter + props.increment</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function"><span class="keyword">function</span>(<span class="params">prevState, props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: prevState.counter + props.increment</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li>The Data Flows Down<br>Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t care whether it is defined as a function or a class.</li>
</ol>
<p>This is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.</p>
<hr>
<h4 id="Handling-Events"><a href="#Handling-Events" class="headerlink" title="Handling Events"></a><strong>Handling Events</strong></h4><p>这里注意this的绑定方法有下面几种：<br>第一种：<code>this.handleClick = this.handleClick.bind(this);</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This binding is necessary to make `this` work in the callback</span></span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      isToggleOn: !prevState.isToggleOn</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.isToggleOn ? <span class="string">'ON'</span> : <span class="string">'OFF'</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Toggle /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>第二种：使用arrow functions<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'this is:'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>我自己比较喜欢这种，简单方便。如果真的像第一种方法绑定， 。。总觉得写的代码不太干净的样子。</strong></p>
<p>第三种，在callback中使用arror function<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line"><span class="comment">// This syntax ensures `this` is bound within handleClick</span></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">	  &lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.handleClick(e)&#125;&gt;</span><br><span class="line">	    Click me</span><br><span class="line">	  &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">	);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="Conditional-Rendering"><a href="#Conditional-Rendering" class="headerlink" title="Conditional Rendering"></a><strong>Conditional Rendering</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = props.isLoggedIn;</span><br><span class="line">  <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">UserGreeting</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  return <span class="tag">&lt;<span class="name">GuestGreeting</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<p>也可以在render函数中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> button = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">      button = <span class="xml"><span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">    &#125; else &#123;</span></span><br><span class="line">      button = &lt;LoginButton onClick=&#123;this.handleLoginClick&#125; /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125; /&gt;</span><br><span class="line">        &#123;button&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>也可以不用if else, 而用 condition ? true : false。</p>
<hr>
<h4 id="Preventing-Component-from-Rendering"><a href="#Preventing-Component-from-Rendering" class="headerlink" title="Preventing Component from Rendering"></a><strong>Preventing Component from Rendering</strong></h4><p><strong>直接 <code>return null</code>，即可防止rendering.</strong></p>
<blockquote>
<p>In rare cases you might want a component to hide itself even though it was rendered by another component. To do this return null instead of its render output.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WarningBanner</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!props.warn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"warning"</span>&gt;</span><br><span class="line">      Warning!</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="Lists-and-Keys"><a href="#Lists-and-Keys" class="headerlink" title="Lists and Keys"></a><strong>Lists and Keys</strong></h4><p>A “key” is a special string attribute you need to include when creating lists of elements.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class="line">      &#123;number&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p><strong>Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity.</strong></p>
<p>微信小程序貌似也是借用了这种方法。<strong>有key的时候渲染会快一点，性能会更好。</strong></p>
<p>如果渲染的 obj 里面有唯一标示 id, 就用次 id, 如果没有，就用 index 也是可以的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ok</span></span><br><span class="line"><span class="keyword">const</span> todoItems = todos.map(<span class="function">(<span class="params">todo</span>) =&gt;</span></span><br><span class="line">  &lt;li key=&#123;todo.id&#125;&gt;</span><br><span class="line">    &#123;todo.text&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ok</span></span><br><span class="line"><span class="regexp">const todoItems = todos.map((todo, index) =&gt;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ Only do this if items have no stable IDs</span></span><br><span class="line"><span class="regexp">  &lt;li key=&#123;index&#125;&gt;</span></span><br><span class="line"><span class="regexp">    &#123;todo.text&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>li&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="keys需要注意的地方"><a href="#keys需要注意的地方" class="headerlink" title="keys需要注意的地方"></a><strong>keys需要注意的地方</strong></h4><p>Keys only make sense in the context of the surrounding array.</p>
<ol>
<li><strong>keys 一定只能在需要它并且它确实在此处（上下文）有意义的时候再使用。</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = props.value;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// Wrong! There is no need to specify the key here:</span></span><br><span class="line">    &lt;li key=&#123;value.toString()&#125;&gt;</span><br><span class="line">      &#123;value&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function NumberList(props) &#123;</span></span><br><span class="line"><span class="regexp">  const numbers = props.numbers;</span></span><br><span class="line"><span class="regexp">  const listItems = numbers.map((number) =&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ Wrong! The key should have been specified here:</span></span><br><span class="line"><span class="regexp">    &lt;ListItem value=&#123;number&#125; /</span>&gt;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;listItems&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const numbers = [1, 2, 3, 4, 5];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;NumberList numbers=&#123;numbers&#125; /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>正确的用法应该如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Correct! There is no need to specify the key here:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;props.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    <span class="comment">// Correct! Key should be specified inside the array.</span></span><br><span class="line">    &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class="line">              value=&#123;number&#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;listItems&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const numbers = [1, 2, 3, 4, 5];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;NumberList numbers=&#123;numbers&#125; /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>总结起来就是有 map 的后面就需要有个 key.</p>
<blockquote>
<p>A good rule of thumb is that elements inside the map() call need keys.</p>
</blockquote>
<ol>
<li><strong>Keys Must Only Be Unique Among Siblings</strong><br>Keys used within arrays should be unique among their siblings. However they don’t need to be globally unique. </li>
</ol>
<p>当然要是唯一的，如果不唯一他的本身的作用就失去了。只要在 map 里面 id 是唯一的即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Blog</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line"><span class="comment">//key 1</span></span><br><span class="line">  <span class="keyword">const</span> sidebar = (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;props.posts.map(<span class="function">(<span class="params">post</span>) =&gt;</span></span><br><span class="line">        &lt;li key=&#123;post.id&#125;&gt;</span><br><span class="line">          &#123;post.title&#125;</span><br><span class="line">        &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      )&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  );</span><br><span class="line"><span class="comment">//key 2</span></span><br><span class="line">  <span class="keyword">const</span> content = props.posts.map(<span class="function">(<span class="params">post</span>) =&gt;</span></span><br><span class="line">    &lt;div key=&#123;post.id&#125;&gt;</span><br><span class="line">      &lt;h3&gt;&#123;post.title&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;&#123;post.content&#125;&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &#123;sidebar&#125;</span></span><br><span class="line"><span class="regexp">      &lt;hr /</span>&gt;</span><br><span class="line">      &#123;content&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const posts = [</span></span><br><span class="line"><span class="regexp">  &#123;id: 1, title: 'Hello World', content: 'Welcome to learning React!'&#125;,</span></span><br><span class="line"><span class="regexp">  &#123;id: 2, title: 'Installation', content: 'You can install React from npm.'&#125;</span></span><br><span class="line"><span class="regexp">];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Blog posts=&#123;posts&#125; /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>Keys serve as a hint to React but they don’t get passed to your components. If you need the same value in your component, pass it explicitly as a prop with a different name.</strong> keys 不作为上下文传递给component参数, 如果需要 key 值传给下面的 component 就显示的传递下即可。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> content = posts.map(<span class="function">(<span class="params">post</span>) =&gt;</span></span><br><span class="line">  &lt;Post</span><br><span class="line">    key=&#123;post.id&#125;</span><br><span class="line">    id=&#123;post.id&#125;</span><br><span class="line">    title=&#123;post.title&#125; /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="Lifting-State-Up"><a href="#Lifting-State-Up" class="headerlink" title="Lifting State Up"></a><strong>Lifting State Up</strong></h4><blockquote>
<p>There should be a single “source of truth” for any data that changes in a React application. Usually, the state is first added to the component that needs it for rendering. Then, if other components also need it, you can lift it up to their closest common ancestor. Instead of trying to sync the state between different components, you should rely on the top-down data flow.</p>
</blockquote>
<p><strong>在React 应用中任何数据变动都应该是基于一个”source of truth”。通常state 被首先加入组件去渲染。然后，如果另一个组件也需要它，那么你就可以将它们提升到它们的父组件中。而不是尝试在不同的组件中同步state，你应该依赖top-down data flow。</strong></p>
<p>提升状态涉及编写比双向绑定方法更多的‘样板’代码。但好处是找到和隔离bug需要较少的工作。由于任何状态存在于特定的组件中，并且该组件可以单独改变它，所以大大减少了错误的表面积。此外，你可以实现任何自定义逻辑以拒绝或转换用户输入。</p>
<p>如果数据可以从props或state派生，那么它就不应该在状态之中。例如，我们只存储了最后编辑的value和scale，<strong>而不是存储两个celsiusValue和fahrenheitValue</strong>。另一个输入的值总是可以从render()方法中计算出来。这允许我们清除或应用四舍五入到其他字段，而不会丢失用户输入的任何精度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近又把 React 的官方文档和有关的书籍看了下，又有新的收获。下面记录下我最近有感受的或者觉得重要的一些地方。也体会到了其实最好的书籍就是官方文档。 而且React的文档写的很好，有很好的例子，有codepen,也有相应的解释说明。赞。&lt;/p&gt;
&lt;p&gt;&lt;img src=
    
    </summary>
    
    
      <category term="javascript" scheme="http://sevencai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发体会</title>
    <link href="http://sevencai.github.io/2017/01/22/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E4%BD%93%E4%BC%9A/"/>
    <id>http://sevencai.github.io/2017/01/22/小程序开发体会/</id>
    <published>2017-01-22T09:45:02.000Z</published>
    <updated>2017-02-09T12:02:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>过去的两个月，在组里参与了【腾讯充值小程序】以及【腾讯周边】两个项目。<br>其中充值项目，由于IOS对于微信小程序的虚拟商品的限制，暂时搁浅上线，周边已上。<br>下面是我遇到的一些体会，坑，以及一些感受。</p>
<hr>
<h3 id="小程序快的原理"><a href="#小程序快的原理" class="headerlink" title="小程序快的原理"></a>小程序快的原理</h3><p>轻应用，快一定是个最大的优点。小程序为什么这么快？平时开发是在PC端开发者工具上，可以看到各个资源的请求情况，包括js，cgi等。在真实手机上，又是怎么样的呢？</p>
<ol>
<li>资源最初全部下载下来</li>
<li>图片缓存策略</li>
<li>小程序大小限制，最多1M</li>
<li>小程序页面状态缓存，webview不会被回收销毁</li>
<li>每个程序都是单独的进程，并且最多5个进程</li>
</ol>
<p>前期我曾抓了个包试试，如下：</p>
<p><img src="http://cailidan.cn/images/xiaochengxu.jpg" alt="抓包实例"></p>
<p><strong>可以看到没有我们平时在开发者工具上看到的js等资源，原因是小程序在第一次打开时就把资源预先全部从微信服务器 down 了下来到本地，（appbrand/pkg目录下，后缀名为wxapkg），存放在了本地的文件系统中，所以在你使用的过程中，只会有CGI请求发出，不会再请求其他代码资源了。</strong></p>
<p>所以这也是为什么微信会限制开发者包的大小不得超过1M。这保证了第一次加载的速度，也不至于在无WIFI情况下，耗费太多流量。</p>
<p>所以如果完全可以通过一些API比如setStorage、getStorage等使用户在离线状态下也可以使用。</p>
<p>后期我再抓包时，发现请求又有了写变化，如下：</p>
<p><img src="http://cailidan.cn/images/1123123.png" alt="rid/sid"></p>
<p>猜想（未验证仅参考）这个rid/sid可能是用来判断小程序有没有资源发生变化，比如如果开发者提交了审核新版本，那么这个时候就去判断，如果有变化就从服务器拉去新的资源。如果没有变动，就用本地文件中的资源。</p>
<p>再：微信对于访问过的图片，都有缓存策略，所以对比如腾讯周边小程序这样的图片很多的应用，也比较快。</p>
<hr>
<h3 id="小程序发布流程思考"><a href="#小程序发布流程思考" class="headerlink" title="小程序发布流程思考"></a>小程序发布流程思考</h3><ol>
<li>开发者本地开发，通过开发者工具，本地预览，提交发布。然后微信通过审核，开发者发布审核版本，用户即可搜到。</li>
<li>上传的代码是到了微信服务器上，统一管理。所以这里是微信服务器，第三方服务器，微信客户端三方的交互。</li>
</ol>
<p>这个过程中情形是这样的：</p>
<p><img src="http://cailidan.cn/images/xiaochengxu123.png" alt="小程序流程图"></p>
<p>小程序框架分为两层</p>
<ol>
<li>View视图层， 用于渲染页面结构。使用Webview渲染。</li>
<li>App Service逻辑层，用来逻辑处理，网络请求，接口调用等等。运行在JSCore中。</li>
</ol>
<p>视图层和逻辑层通过JSBridge通信。逻辑层通知视图层数据发生变化，从而出发视图层更新。视图层则绑定事件，通知到逻辑层进行相应的业务处理。</p>
<p>如在视图层：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"updateData"</span>&gt;</span>页面跳转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>逻辑层：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        config: &#123;</span><br><span class="line">            title: <span class="string">''</span>,</span><br><span class="line">            name: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    updateData() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        <span class="string">'config.title'</span>: <span class="string">'腾讯周边'</span>,</span><br><span class="line">        <span class="string">'config.name'</span>: <span class="string">'Seven'</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="在View层渲染数据"><a href="#在View层渲染数据" class="headerlink" title="在View层渲染数据"></a>在View层渲染数据</h3><p><strong>用户打开小程序后，选择左上角的关闭或按返回键时小程序只是隐藏到后台，webview不会被销毁或者回收。比如在ios上，从小程序转到另外一个应用中，再回来微信，打开的webview仍然存在。再android上则是可以在窗口进程中再次找到先前打开的小程序。</strong></p>
<ol>
<li>Native预先加载额外一个Webview，当打开指定页面时，无需请求额外资源，直接渲染</li>
<li>model和view双线程，单向数据绑定</li>
<li>重渲染使用Virtual DOM减少开销，采用diff算法局部更新</li>
</ol>
<p>这里的单向数据绑定确实是有不方便的地方。先前用过Vue等双向绑定的，能够及时反馈用户的输入，相对来说这种可能更方便操作，也更适合小型应用。<br>但是单向绑定就是可能更加高效一些了。</p>
<hr>
<h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><p>1.小程序并发请求数不超过5，这里可以做优化，比如使用接口将所有的请求合并。</p>
<p>2.小程序关于登录态与移动应用和网页应用的不同之处是抛弃了access_token的验证方式，而是采用session_key加签名的方式，为小程序与服务器交换敏感数据提供了对称加密方法。签名方法对小程序透明，后端服务实现相应的解密程序以及登录态验证和控制能力。由于我们部门的后台接口基本都是基于access_token这一套，后来与WX侧协商还是可以用ac.否则后台就会有很大的改动。</p>
<p>3.要好好的利用小程序模板机制，这样可以减少很多代码量，也更便于维护。</p>
<p>4.对于WX官方文档上的API,最好是自己封装一个WXLIB文件。这样可以减少代码量，统一整个代码。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wxLib</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    share(obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            title: obj.title,</span><br><span class="line">            desc: obj.desc,</span><br><span class="line">            path: obj.path</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在每一个想要分享的页面就可以：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wxLib <span class="keyword">from</span> <span class="string">'../../service/lib/wxLib'</span>;</span><br><span class="line">Page(&#123;</span><br><span class="line">    onShareAppMessage() &#123;</span><br><span class="line">        <span class="keyword">return</span> wxLib.share(&#123;</span><br><span class="line">            title: <span class="string">'腾讯周边'</span>,</span><br><span class="line">            desc: <span class="string">'正品周边'</span>,</span><br><span class="line">            path: <span class="string">'page/index/index'</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>(233,这个好像看起来没有代码量减少，但是统一了以后，其他的也统一，就会发现后来方便很多。)</p>
<p>5.可以利用本地存储，解决离线的时候，黑屏无数据的情况。</p>
<p>6.文档很容易理解，API也好用。基本上按照文档来大部分功能都可以实现。</p>
<hr>
<h3 id="关于小程序定位"><a href="#关于小程序定位" class="headerlink" title="关于小程序定位"></a>关于小程序定位</h3><p>小程序即用即走的定位原本是很好的，比如非常适合线下的营销，非常适合生活服务。比如查火车票，膜拜单车，打麻将和牌的小游戏都很合适。用户生活方便，娱乐也方便。</p>
<p>但是目前来看小程序除了刚发布的时候，现在的流量目测已经越来越少，除开微信好像没有做很多推广以外，小程序还没有形成用户的习惯，可能是一个问题。</p>
<p>小程序要发展起来，一定是要在用户形成了使用习惯，产生【不用装这个app,直接用小程序就可以满足我的需求】的这种想法。</p>
<p>未来会怎样，取决于微信的推广和未来长远的看法。也取决是不是有很好的小程序出来。期待未来超出想象。</p>
<p>下次准备写一些小程序的用法，比如模板消息，客服等等。以上内容如果有不对的地方，欢迎指正，感谢阅读。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过去的两个月，在组里参与了【腾讯充值小程序】以及【腾讯周边】两个项目。&lt;br&gt;其中充值项目，由于IOS对于微信小程序的虚拟商品的限制，暂时搁浅上线，周边已上。&lt;br&gt;下面是我遇到的一些体会，坑，以及一些感受。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;小程序快的原理&quot;&gt;&lt;a hre
    
    </summary>
    
    
      <category term="小程序 javascript" scheme="http://sevencai.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F-javascript/"/>
    
  </entry>
  
  <entry>
    <title>利用onerror/onload写的jsonp在IE下不兼容的问题</title>
    <link href="http://sevencai.github.io/2017/01/22/onload%E5%8F%8Aonerror%E5%9C%A8IE%E4%B8%8B%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://sevencai.github.io/2017/01/22/onload及onerror在IE下不兼容的问题/</id>
    <published>2017-01-22T09:01:43.000Z</published>
    <updated>2017-01-22T09:39:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>某一天，我用 js 写了一段 jsonp 的代码。以前在学校也这么写，因为在学校没有测试IE所有的版本兼容性，一直觉得这段代码木有问题。</p>
<p>代码是这样子的：</p>
<p>简单来说就是将一个script标签添加进入dom,这样就可以伪造一次请求，因为同源策略可以用script/image之类标签回避掉。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Util.prototype.loadScript = <span class="function"><span class="keyword">function</span> (<span class="params">url, params, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> path = url + <span class="string">'?'</span> + <span class="keyword">this</span>.serializeParam(params);</span><br><span class="line">  <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  <span class="keyword">var</span> format = params.format.substr(<span class="number">6</span>), result;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>[format] = <span class="function"><span class="keyword">function</span> (<span class="params">_res</span>) </span>&#123;</span><br><span class="line">    result = _res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!script) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    head.removeChild(script);</span><br><span class="line">    script = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">window</span>[format] = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">typeof</span> cb == <span class="string">'function'</span> &amp;&amp; cb(result);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  script.src =  path;</span><br><span class="line">  script.async = <span class="literal">true</span>;</span><br><span class="line">  script.charset = <span class="string">'utf-8'</span>;</span><br><span class="line">  script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  script.onload = handler;</span><br><span class="line">  script.onerror = handler;</span><br><span class="line"></span><br><span class="line">  head.insertBefore(script, head.firstChild);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>直到测试同事那天在测试的时候，发现IE7,IE6的时候，请求可以发送，但是 callback 函数没有执行。导致了一个按钮好像像点不动一样。</p>
<p>这种 bug 算得上是严重的 bug 了，经过排查，发现确实是代码不完善，没有考虑到：</p>
<blockquote>
<p>在多数浏览器（包括Firefox和Chrome）下会触发onload和onerror， 但是在IE下只会触发 onreadystatechange，也就是说在IE8及IE8以下，onerror和onload都不能够使用。</p>
</blockquote>
<p>所以要调用回调函数一定需要再写一个针对 onreadystatechange 时的操作。错误中成长。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = script.readyState;</span><br><span class="line">  <span class="keyword">if</span> (r === <span class="string">'loaded'</span> || r === <span class="string">'complete'</span>) &#123;</span><br><span class="line">     handler();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="http://www.cailidan.cn/images/53832.png" alt="淘宝率先不支持IE8及以下，真的是一件美好的事情"></p>
<p>完整的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Util.prototype.loadScript = <span class="function"><span class="keyword">function</span> (<span class="params">url, params, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> path = url + <span class="string">'?'</span> + <span class="keyword">this</span>.serializeParam(params);</span><br><span class="line">  <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  <span class="keyword">var</span> format = params.format.substr(<span class="number">6</span>), result;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>[format] = <span class="function"><span class="keyword">function</span> (<span class="params">_res</span>) </span>&#123;</span><br><span class="line">    result = _res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!script) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    head.removeChild(script);</span><br><span class="line">    script = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">window</span>[format] = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">typeof</span> cb == <span class="string">'function'</span> &amp;&amp; cb(result);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  script.src =  path;</span><br><span class="line">  script.async = <span class="literal">true</span>;</span><br><span class="line">  script.charset = <span class="string">'utf-8'</span>;</span><br><span class="line">  script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"></span><br><span class="line">  script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = script.readyState;</span><br><span class="line">    <span class="keyword">if</span> (r === <span class="string">'loaded'</span> || r === <span class="string">'complete'</span>) &#123;</span><br><span class="line">      handler();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  script.onload = handler;</span><br><span class="line">  script.onerror = handler;</span><br><span class="line"></span><br><span class="line">  head.insertBefore(script, head.firstChild);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;某一天，我用 js 写了一段 jsonp 的代码。以前在学校也这么写，因为在学校没有测试IE所有的版本兼容性，一直觉得这段代码木有问题。&lt;/p&gt;
&lt;p&gt;代码是这样子的：&lt;/p&gt;
&lt;p&gt;简单来说就是将一个script标签添加进入dom,这样就可以伪造一次请求，因为同源策略可以
    
    </summary>
    
    
      <category term="javascript" scheme="http://sevencai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Redux 中 combineReducers 和 createStore的实现原理</title>
    <link href="http://sevencai.github.io/2016/10/25/Redux%20%E4%B8%AD%20combineReducers%20%E5%92%8C%20createStore%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://sevencai.github.io/2016/10/25/Redux 中 combineReducers 和 createStore的实现原理/</id>
    <published>2016-10-25T14:46:27.000Z</published>
    <updated>2017-01-22T09:42:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在学习 redux, 感到了深深的难过，都两天了，感觉还是不知道怎么写代码，倒不是不知道是Redux 里面涉及的概念，是不知道什么代码该放在哪里。怎么样组织结构。希望再过两天能更清晰。</p>
<p><img src="http://cailidan.cn/images/redux.png" alt="Redux"></p>
<p>下面是中间学习到的 combineReducers 和 createStore 的实现原理，了解这些后，确实帮助了我更好的理解整个流程。</p>
<hr>
<h4 id="combineReducers-的实现原理"><a href="#combineReducers-的实现原理" class="headerlink" title="combineReducers 的实现原理"></a><strong>combineReducers 的实现原理</strong></h4><p>在探究 <code>combineReducers</code> 的实现原理之前，先看下 <code>combineReducers</code> 的用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todoApp = combineReducers(&#123;</span><br><span class="line">    visibilityFilter,</span><br><span class="line">    todos</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里为了逻辑上的分离，我们把 <code>reducers</code> 拆分成了 <code>visibilityFilter</code> 和 <code>todos</code>, 然后利用了 <code>combineReducers</code>  合成了一个 <code>reducer</code>。</p>
<p>先看下我们的 todos  和 visibilityFilter 是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todos </span></span><br><span class="line"><span class="keyword">const</span> todos = <span class="function">(<span class="params">state = [], action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//visibilityFilter</span></span><br><span class="line"><span class="keyword">const</span> visibilityFilter = <span class="function">(<span class="params">state = <span class="string">'SHOW_ALL'</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SET_VISIBILITY_FILTER'</span>:</span><br><span class="line">      <span class="keyword">return</span> action.filter</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>我们的 reducers 也是跟这里的每一个分 reducer 一样，都是函数，都要通过传入 (state, action)  来唯一判断下次的状态。所以我们 <code>combineReducers</code> 的作用就是重新生成一个 可以传入 (state, action) 两个值来判断 next 的 state 的值的函数。</strong></p>
<p>所以这下我们就可以理解下面的代码，<code>combineReducers</code> 的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> combineReducers = <span class="function">(<span class="params"> reducers </span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params"> state = &#123;&#125;, action </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(reducers).reduce(</span><br><span class="line">            ( nextState, key ) =&gt; &#123;</span><br><span class="line">                nextState[key] = reducers[key](</span><br><span class="line">                    state[key],</span><br><span class="line">                    action</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">return</span> nextState;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;&#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers;</span><br></pre></td></tr></table></figure>
<p>解释下：<strong>首先是返回一个可以传入两个参数的函数。所以我们先 return  一个 function, 然后再通过 reduce 函数，遍历每一个 key 值， 然后为对应的 state 赋值为新的函数。</strong></p>
<p>当我们形成了新的 reducer 以后， 传入任何 的 action  和 status 就会返回一个明确的 状态树了。可能是下面这个样子的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  visibilityFilter: <span class="string">'SHOW_ALL'</span>,</span><br><span class="line">    todos: &#123;</span><br><span class="line">    id: <span class="number">0</span>,</span><br><span class="line">    text: <span class="string">'Hello world'</span>,</span><br><span class="line">    completed: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="createStore-的实现原理"><a href="#createStore-的实现原理" class="headerlink" title="createStore 的实现原理"></a><strong>createStore 的实现原理</strong></h4><p>同样我们先看下 createStore 的用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let &#123; subscribe, dispatch, getState &#125; = createStore(reducer);</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br></pre></td></tr></table></figure></p>
<p>createStore 通过传入 我们的 reducer 形成一个全局唯一的 store,  这个形成的 store 是一个对象，它有3个方法，分别是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch()</span><br><span class="line">store.subscribe()  </span><br><span class="line">store.getState()</span><br></pre></td></tr></table></figure>
<p><strong>所以其实我们就是要编辑一个函数，这个函数里面可以有这三个方法暴露给我们使用。</strong> 原理如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params"> reducer </span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> state;</span><br><span class="line">  <span class="keyword">let</span> listeners = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params"> action </span>) =&gt;</span> &#123;</span><br><span class="line">    state = reducer(state, action);</span><br><span class="line">    listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params"> listener </span>) =&gt;</span> &#123;</span><br><span class="line">    listeners.push(listener);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      listeners = listeners.filter(<span class="function"><span class="params">l</span> =&gt;</span> l !== listener)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  dispatch(&#123;&#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getState,</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到我们是先实现了这三个方法。下面简单看下怎么用这三个方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;createStore&#125; = Redux;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.innerHTML = store.getState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.subscribe(render)</span><br><span class="line"></span><br><span class="line">render();</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, ()=&gt;&#123;</span><br><span class="line">  store.dispatch(&#123;<span class="attr">type</span>:<span class="string">'INCREMENT'</span>&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在学习 redux, 感到了深深的难过，都两天了，感觉还是不知道怎么写代码，倒不是不知道是Redux 里面涉及的概念，是不知道什么代码该放在哪里。怎么样组织结构。希望再过两天能更清晰。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cailidan.cn/imag
    
    </summary>
    
      <category term="WEB开发" scheme="http://sevencai.github.io/categories/WEB%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="React" scheme="http://sevencai.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>在应用(微信/浏览器)中拉起手机QQ</title>
    <link href="http://sevencai.github.io/2016/10/16/%E5%9C%A8%E5%BA%94%E7%94%A8-%E5%BE%AE%E4%BF%A1-%E6%B5%8F%E8%A7%88%E5%99%A8-%E4%B8%AD%E6%8B%89%E8%B5%B7%E6%89%8B%E6%9C%BAQQ/"/>
    <id>http://sevencai.github.io/2016/10/16/在应用-微信-浏览器-中拉起手机QQ/</id>
    <published>2016-10-16T10:43:30.000Z</published>
    <updated>2016-12-12T02:33:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>场景是：当我们做一些活动用来拉新等等时，通常会限制用户只在手Q中打开。比如用户通过微信扫码到了我们H5活动页面。那么我们就可以通过伪协议将手Q拉起，并且将H5页面打开。用户到达的途径有很多，比如通过浏览器，通过微信，通过其他APP应用。</p>
<hr>
<h4 id="正解代码"><a href="#正解代码" class="headerlink" title="正解代码"></a><strong>正解代码</strong></h4><p>先不看原理的话，代码应该是像下面的。今天我也参照了许多别人的代码，但大多数不是这个不兼容，就是微信拉不起来。或者是 IOS 拉起正常，但是 Android 就是不行。这通常是由于代码没有完备造成的。更主要是因为我们的浏览器什么的都在时时更新。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 检测浏览器UA</span></span><br><span class="line"><span class="comment">* @type &#123;Function&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> condition = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> ua = navigator.userAgent,</span><br><span class="line">       chrome = ua.match(<span class="regexp">/Chrome\/([\d.]+)/</span>) || ua.match(<span class="regexp">/CriOS\/([\d.]+)/</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//利用正则获得匹配 安卓 UA</span></span><br><span class="line">   <span class="keyword">var</span> getAndroidVersion = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase(),</span><br><span class="line">           version = ua.match(<span class="regexp">/android\s([0-9\.]*)/</span>);</span><br><span class="line">       <span class="keyword">return</span> version ? version[<span class="number">1</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>] : <span class="literal">false</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">       chrome: chrome,  <span class="comment">//true or false</span></span><br><span class="line">       androidVersion: getAndroidVersion()   <span class="comment">//version</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获得伪协议</span></span><br><span class="line"><span class="comment">* @param jumpURL</span></span><br><span class="line"><span class="comment">* @returns &#123;string&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params"> normal </span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(normal) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">'mqqapi://forward/url?src_type=internal&amp;version=1&amp;url_prefix='</span>+ btoa(location.href);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">"intent://forward/url?src_type=web&amp;style=default&amp;=1&amp;version=1&amp;url_prefix="</span> + btoa(location.href) + <span class="string">"#Intent;scheme=mqqapi;package=com.tencent.mobileqq;end"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测是否安装了QQ,如果没有安装要引导用户安装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> checkIfInstallQQ = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  WeixinJSBridge.invoke(<span class="string">"getInstallState"</span>, &#123;</span><br><span class="line">      <span class="string">"packageUrl"</span>: <span class="string">"mqq://"</span>, <span class="comment">//ios</span></span><br><span class="line">      <span class="string">"packageName"</span>: <span class="string">"com.tencent.mobileqq"</span> <span class="comment">//android</span></span><br><span class="line"></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="regexp">/^get_install_state:yes/</span>.test(res.err_msg)) &#123;</span><br><span class="line">          <span class="built_in">window</span>.open( getURL( <span class="literal">true</span> ), <span class="string">'_self'</span> );</span><br><span class="line"></span><br><span class="line">          <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              WeixinJSBridge.invoke(<span class="string">"closeWindow"</span>);</span><br><span class="line">          &#125;, <span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/^get_install_state:no$/</span>.test(res.err_msg)) &#123;</span><br><span class="line">          <span class="keyword">if</span>(confirm(<span class="string">'您还没有安装手Q，现在去下载安装？'</span>)) &#123;</span><br><span class="line">              <span class="built_in">window</span>.location.replace(<span class="string">'http://im.qq.com/mobileqq/touch/index.html'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Alert.show(&#123;</span><br><span class="line">              showCancel:<span class="literal">false</span>,</span><br><span class="line">              msg: <span class="string">"err:"</span> + res.err_msg</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否在手q中打开，如果不是，则判断是否在微信打开</span></span><br><span class="line"><span class="comment"> * 如果在微信打开，调用微信的 JSBridge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span>( !U.ua.QQ )&#123;</span><br><span class="line">    Alert.show(&#123;</span><br><span class="line">        showCancel:<span class="literal">false</span>,</span><br><span class="line">        msg: <span class="string">"请在手q中打开此页面"</span>,</span><br><span class="line">        onConfirm : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//如果在微信中打开</span></span><br><span class="line">            <span class="keyword">if</span>(U.ua.weixin) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> WeixinJSBridge == <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> WeixinJSBridge.invoke == <span class="string">"function"</span>) &#123;</span><br><span class="line">                    checkIfInstallQQ();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">                        <span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, checkIfInstallQQ, <span class="literal">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;</span><br><span class="line">                        <span class="built_in">document</span>.attachEvent(<span class="string">"WeixinJSBridgeReady"</span>, checkIfInstallQQ);</span><br><span class="line">                        <span class="built_in">document</span>.attachEvent(<span class="string">"onWeixinJSBridgeReady"</span>, checkIfInstallQQ);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//这里也可以判断下是否安装了手Q</span></span><br><span class="line">                <span class="keyword">if</span>(U.ua.android &amp;&amp; condition.chrome &amp;&amp; condition.androidVersion() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">                    <span class="built_in">window</span>.open( getURL(<span class="literal">false</span>) );</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">window</span>.open( getURL(<span class="literal">true</span>) );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a><strong>代码分析</strong></h4><p>正常情况下我们拉起手q，利用伪协议就可以了。伪协议是形如上面的不是http,https,ftp,之类的协议。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mqqapi:<span class="comment">//forward/url?src_type=internal&amp;version=1&amp;url_prefix='+ btoa(location.href)</span></span><br><span class="line"></span><br><span class="line"><span class="string">"intent://forward/url?src_type=web&amp;style=default&amp;=1&amp;version=1&amp;url_prefix="</span> + btoa(location.href) + <span class="string">"#Intent;scheme=mqqapi;package=com.tencent.mobileqq;end"</span></span><br></pre></td></tr></table></figure>
<p>mqqapi是专门掉起手Q的， 后面的 btoa(location.href)是由于我们需要在手q打开我们的H5，所以这里要利用 location.href, 并且需要 base64的编码。这里的编码我们是利用的 window.btoa 函数。比起自己去编写 base64encode， 这个方法给我们提供了便利。</p>
<p>那么我们调用这一个 mqqapi 就可以了，为什么还要去判断一个 intent 呢？原因是：</p>
<p><strong>Android 4.4 以上将原生的浏览器换成了chrome,而Android 5.开始的chrome不再允许传统的scheme拉起手q。</strong> 所以当打开的浏览器是 Android5 的时候，我们就要去调用这个 intent 新协议，而不是原来的 mqqapi协议。但是也要注意，这里的拉起app是需要用户操作的，需要用户确定（点击确认按钮）拉起才可以。所以不要用JS定时器了。</p>
<p>另外要注意 IOS 9.0 safari ，IOS 9.0以后，原生的safari不支持iframe 拉起 scheme 了。可以用 location.href/top.location.href拉起。</p>
<p>那么下面这些代码是什么呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> WeixinJSBridge.invoke(<span class="string">"getInstallState"</span>, &#123;</span><br><span class="line">      <span class="string">"packageUrl"</span>: <span class="string">"mqq://"</span>, <span class="comment">//ios</span></span><br><span class="line">      <span class="string">"packageName"</span>: <span class="string">"com.tencent.mobileqq"</span> <span class="comment">//android</span></span><br><span class="line"></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;   </span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>WeixinJSBridge是微信浏览器内置的一个对象。JS API 建立在内置的这个对象中。但是有一个坑要注意。 WeixinJSBridge 不是我们一打开一个 WebView 就可以了的。我们需要在客户端初始化这个对象。当这个对象 ready 的时候，我们去监听，也就是这个 WeixinJSBridgeReady 事件。所以我们在调用这个 JS API 的时候，一定要判断下 WeixinJSBridge 是否存在。</strong>也就是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> WeixinJSBridge == <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> WeixinJSBridge.invoke == <span class="string">"function"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, checkIfInstallQQ, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>这两句话的作用。</p>
<p><code>WeixinJSBridge.invoke</code> 是 WeixinJSBridge 的一个方法，用来唤起相关的事件。这里我们唤起的是 <code>getInstallState</code> 这个事件。用来判断是否用户安装了 手机QQ。</p>
<p>当然还有很多别的 API，比如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'WeixinJSBridgeReady'</span>, <span class="function"><span class="keyword">function</span> <span class="title">onBridgeReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过下面这个API隐藏底部导航栏，‘showToolbar’是显示导航栏</span></span><br><span class="line">    WeixinJSBridge.call(<span class="string">'hideToolbar'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="延伸和扩展"><a href="#延伸和扩展" class="headerlink" title="延伸和扩展"></a><strong>延伸和扩展</strong></h4><p>这里去学习了下下面这些的区别。是可能会碰到的坑。</p>
<ol>
<li>“top.location.href”是最外层的页面跳转</li>
<li>“window.location.href”、”location.href”是本页面跳转 = self.location.href</li>
<li>“parent.location.href”是上一层页面跳转.</li>
</ol>
<hr>
<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a><strong>其他方法</strong></h4><p>上面我们使用 window.open 打开的，其实我们还可以用 ifame 打开。如下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ios 9 后，safari 打不开，可以用 location.href 或者 top.location.href 处理</span></span><br><span class="line"><span class="keyword">if</span>(mqq.IOS)&#123;</span><br><span class="line">  location.href = getURL(<span class="literal">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//利用 iframe 处理</span></span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</span><br><span class="line">  <span class="keyword">if</span>(U.ua.android &amp;&amp; condition.chrome&amp;&amp; condition.androidVersion() &gt;= <span class="number">5</span>)&#123;</span><br><span class="line">    iframe.src = getURL(<span class="literal">false</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    iframe.src = getURL(<span class="literal">true</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  iframe.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要这里也是一个简略的写法。可以更加完善的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场景是：当我们做一些活动用来拉新等等时，通常会限制用户只在手Q中打开。比如用户通过微信扫码到了我们H5活动页面。那么我们就可以通过伪协议将手Q拉起，并且将H5页面打开。用户到达的途径有很多，比如通过浏览器，通过微信，通过其他APP应用。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;正
    
    </summary>
    
      <category term="WEB开发" scheme="http://sevencai.github.io/categories/WEB%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="WEB开发" scheme="http://sevencai.github.io/tags/WEB%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
