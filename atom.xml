<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Seven&#39;s Blog</title>
  <subtitle>Share, Learn, Enjoy, Keep</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sevencai.github.io/"/>
  <updated>2017-12-15T03:53:20.000Z</updated>
  <id>http://sevencai.github.io/</id>
  
  <author>
    <name>Seven Cai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac 下 zsh: command not found</title>
    <link href="http://sevencai.github.io/2017/12/15/mac-%E4%B8%8B-zsh-command-not-found/"/>
    <id>http://sevencai.github.io/2017/12/15/mac-下-zsh-command-not-found/</id>
    <published>2017-12-15T02:54:30.000Z</published>
    <updated>2017-12-15T03:53:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单来说，是我使用 <code>tnpm install -g webpack</code> 或者任何使用 -g 来安装的全局 npm 包都报错： <code>zsh: command not found</code>,</p>
<p>想到了肯定是环境变量引起的，zsh 找不到全局包安装的位置。</p>
<p>zsh 的配置文件在 <code>~/.zshrc</code> 文件中，里面已经有被配置了的环境变量如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> $PATH = <span class="regexp">/usr/</span>bin:<span class="regexp">/usr/</span>local/bin:<span class="regexp">/usr/</span>bin:<span class="regexp">/bin:/u</span>sr/sbin:<span class="regexp">/sbin</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 或者你可以直接在终端工具中 echo $PATH 查看暴露的全局环境变量</span></span><br></pre></td></tr></table></figure>
<p>发现问题后，找到了 npm -g 安装的全部目录为（…为自己的目录） <code>/usr/local/bin/node/.../bin</code> 下， 添加到 $PATH 后面即可。</p>
<p>每个 : 代表的是多个环境变量的分割。</p>
<p>过程中做了一件特别傻的事情，没有把 npm 的目录直接在原来的 export 后面加，而是直接新建了一行，大概是下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> PATH = <span class="regexp">/usr/</span>bin:<span class="regexp">/usr/</span>local/bin:<span class="regexp">/usr/</span>bin:<span class="regexp">/bin:/u</span>sr/sbin:<span class="regexp">/sbin</span></span><br><span class="line"><span class="regexp">export PATH = /u</span>sr/local/bin/node/.../bin</span><br><span class="line"></span><br><span class="line">zsh 启动会报错：</span><br><span class="line">/Users/sevencai/.oh-my-zsh/oh-my-zsh.sh:<span class="number">3</span>: command not found: env</span><br><span class="line">env_default:<span class="number">1</span>: command not found: env</span><br><span class="line">env_default:<span class="number">1</span>: command not found: grep</span><br><span class="line">env_default:<span class="number">1</span>: command not found: env</span><br><span class="line">env_default:<span class="number">1</span>: command not found: grep</span><br></pre></td></tr></table></figure>
<p>这样会导致最后的环境变量是后面一项，前面被覆盖了。导致一些最基本的命令，如 cat/vi/vim 都不能使用了。哈哈，连vi都不能用了，我知道错了，怎么改回来？</p>
<p>直接在命令行中<code>export PATH=/bin:/usr/bin:/usr/local/bin</code>， 然后再去 vi ~/.zshrc 更改就好了。</p>
<p>zshrc 是 zsh 的配置文件，如果你不是用的 zsh, 而是 bash 或者 shell , 配置文件就不是这个了，有可能是 .bash_profile 之类的。</p>
<p>记得每次 modify …rc 文件后都 source 下哦， 要不不会生效。</p>
<p>上面或者直接使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> PATH = <span class="regexp">/usr/</span>bin:<span class="regexp">/usr/</span>local/bin:<span class="regexp">/usr/</span>bin:<span class="regexp">/bin:/u</span>sr/sbin:<span class="regexp">/sbin</span></span><br><span class="line"><span class="regexp">export PATH = $PATH:/u</span>sr/local/bin/node/.../bin</span><br></pre></td></tr></table></figure></p>
<p>即在路径前或路径后添加 <code>$PATH</code> 变量，也可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单来说，是我使用 &lt;code&gt;tnpm install -g webpack&lt;/code&gt; 或者任何使用 -g 来安装的全局 npm 包都报错： &lt;code&gt;zsh: command not found&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;想到了肯定是环境变量引起的，zsh 找
    
    </summary>
    
    
      <category term="工具/配置" scheme="http://sevencai.github.io/tags/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>嗯，又是纪录几个小的知识点</title>
    <link href="http://sevencai.github.io/2017/10/20/%E5%97%AF%EF%BC%8C%E5%8F%88%E6%98%AF%E7%BA%AA%E5%BD%95%E5%87%A0%E4%B8%AA%E5%B0%8F%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://sevencai.github.io/2017/10/20/嗯，又是纪录几个小的知识点/</id>
    <published>2017-10-20T11:54:29.000Z</published>
    <updated>2017-12-19T12:40:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hash-maps-without-side-effects"><a href="#Hash-maps-without-side-effects" class="headerlink" title="Hash maps without side effects"></a>Hash maps without side effects</h3><p>简单的来说，当我们用 对象字面量 <code>{}</code> 来创建这个 hash 表时，他会默认从 Object 继承属性，这等同于 <code>Object.create(Object.prototype)</code> , 这么来创建的话，就会有脏数据，因为其实你只是需要一个 map 而已。并且在 <code>for in</code> 的时候，还需要使用 <code>hasOwnProperty</code> 来判断。</p>
<p>但如果使用 <code>Object.create(null)</code>, 我们明确的指定其原型为 null, 因此他才是真正的没有构造器，没有 <code>toString()</code>, <code>hasOwnProperty</code>, <code>valueOf</code> 等。注意这里不要使用 <code>Object.create({})</code>,这个效果跟前面是一样的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dirtyMap = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> cleanMap = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">dirtyMap.constructor    <span class="comment">// function Object() &#123; [native code] &#125;</span></span><br><span class="line"></span><br><span class="line">cleanMap.constructor    <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterating maps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key;</span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> dirtyMap)&#123;</span><br><span class="line">  <span class="keyword">if</span> (dirtyMap.hasOwnProperty(key)) &#123;   <span class="comment">// Check to avoid iterating over inherited properties.</span></span><br><span class="line">    <span class="built_in">console</span>.log(key + <span class="string">" -&gt; "</span> + dirtyMap[key]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> cleanMap)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" -&gt; "</span> + cleanMap[key]);    <span class="comment">// No need to add extra checks, as the object will always be clean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="angular-双向绑定和-vue双向绑定"><a href="#angular-双向绑定和-vue双向绑定" class="headerlink" title="angular 双向绑定和 vue双向绑定"></a>angular 双向绑定和 vue双向绑定</h3><p>AngularJS 采用“脏值检测”的方式，数据发生变更后，对于所有的数据和视图的绑定关系进行一次检测，识别是否有数据发生了改变，有变化进行处理，可能进一步引发其他数据的改变，所以这个过程可能会循环几次，一直到不再有数据变化发生后，将变更的数据发送到视图，更新页面展现。如果是手动对 ViewModel 的数据进行变更，为确保变更同步到视图，需要手动触发一次“脏值检测”。</p>
<p>VueJS 则使用 ES5 提供的 Object.defineProperty() 方法，监控对数据的操作，从而可以自动触发数据同步。并且，由于是在不同的数据上触发同步，可以精确的将变更发送给绑定的视图，而不是对所有的数据都执行一次检测。</p>
<p><a href="http://www.jianshu.com/p/d3a15a1f94a0" target="_blank" rel="noopener"></a></p>
<hr>
<h3 id="移动端调试-eruda"><a href="#移动端调试-eruda" class="headerlink" title="移动端调试- eruda"></a>移动端调试- eruda</h3><p>eruda 类似于 小程序的 console 控制台。但是比小程序的更好，他还可以看 network,cookies,localStorage 这些都可以显示出来，非常的方便。用法也很方便。引入文件，init下就可以了。如果觉得引入了多余的文件，生产环境去掉就行。 github 地址是：<a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener">eruda</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//cdn.jsdelivr.net/npm/eruda"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;eruda.init();<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="编译和解释的区别"><a href="#编译和解释的区别" class="headerlink" title="编译和解释的区别"></a>编译和解释的区别</h3><h4 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h4><blockquote>
<p>编译器是一种计算机程序，负责把一种编程语言编写的源码转换成另外一种计算机代码，后者往往是以二进制的形式被称为目标代码(object code)。这个转换的过程通常的目的是生成可执行的程序。</p>
</blockquote>
<p>编译器需要产出另外一个代码。他往往是执行前的一步，产出可执行或者再需要编译的代码。</p>
<h4 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h4><blockquote>
<p>解释器是一种计算机程序，它直接执行由编程语言或脚本语言编写的代码，并不会把源代码预编译成机器码。一个解释器，通常会用以下的姿势来执行程序代码：分析源代码，并且直接执行。把源代码翻译成相对更加高效率的中间码，然后立即执行它。执行由解释器内部的编译器预编译后保存的代码</p>
</blockquote>
<p>可以把解释器看成一个黑盒子，我们输入源码，它就会实时返回结果。</p>
<p>总结起来可以像下面这样理解：<br>编译 Compile：把整个程序源代码翻译成另外一种代码，然后等待被执行，发生在运行之前，产物是「另一份代码」。</p>
<p>解释 Interpret：把程序源代码一行一行的读懂然后执行，发生在运行时，产物是「运行结果」。</p>
<p><a href="https://mp.weixin.qq.com/s/Z0uldTCJehk4SQR-98fvNA" target="_blank" rel="noopener"></a></p>
<hr>
<h3 id="Javascript-Style-Guide"><a href="#Javascript-Style-Guide" class="headerlink" title="Javascript Style Guide"></a>Javascript Style Guide</h3><p>最近看到了一个我觉得很合理的 Javascript 的规范指南。 github 地址是： <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">Airbnb Javascript Style Guide</a> 可以利用他的 eslint 规范自己的代码。我觉得不错。</p>
<hr>
<h3 id="Google-PageSpeed-Insights"><a href="#Google-PageSpeed-Insights" class="headerlink" title="Google PageSpeed Insights"></a>Google PageSpeed Insights</h3><p>想要快速提高网站的性能，用这个网站非常好。他会给你详细的分析，根据网页的代码质量得出报告。开发者根据这个报告，进行调整。除了这个外，使用 WebPagetest 也是很好的。</p>
<hr>
<h3 id="什么是关键-CSS"><a href="#什么是关键-CSS" class="headerlink" title="什么是关键 CSS"></a>什么是关键 CSS</h3><p>对CSS文件的请求可以显著增加网页呈现所需的时间。 原因是默认情况下，浏览器将延迟页面呈现，直到它完成加载、解析和执行所有在“页面”中引用的CSS文件。 这样做是因为它需要计算页面的布局。</p>
<p>不幸的是，这意味着如果我们有一个非常大的CSS文件，并且需要一段时间才能完成下载，我们的用户将在浏览器开始呈现页面之前等待整个文件被下载下来。 幸运的是，有一个巧妙的技术，使我们能够优化我们的CSS的传输并减轻阻塞。这种技术被称为优化关键渲染路径。关键渲染路径表示浏览器呈现页面的所有必须步骤。 我们想要找到最小的阻塞CSS集合 ，或者关键 CSS，以使页面显示给用户。 关键资源是可能阻塞页面首屏呈现的所有资源。 这背后的想法是，网站应该在前几个TCP数据包响应中为用户获取第一个屏幕的内容（或“首屏”内容）。</p>
<p>人工去找 关键 CSS，当然不太方便，现在出来了很多的工具，可以帮助我们提取出关键CSS， 比如 grunt 这类工具来提取。只是单纯的好奇什么是关键 CSS， 但是我已经好久没有写过 CSS 了。</p>
<hr>
<h3 id="解决个-http-缓存的困惑"><a href="#解决个-http-缓存的困惑" class="headerlink" title="解决个 http 缓存的困惑"></a>解决个 http 缓存的困惑</h3><p>访问百度首页的时候，为什么刷新页面后，静态资源都是返回 200， from cache? 有的人问，from cache 不是返回 304 才合理吗？</p>
<p>其实不是的，百度首页再资源在刷新后实际没有发送任何请求， 因为 caache-control 的缓存时间还没到期，也就是在 chrome 中根本没有发送请求。只要是 chrome 没有发送请求，资源从本地读取，都会在 network 中显示 状态为 200， from cache, 其中的 response 只是上一次回包留下的数据。如果 cache-control 的缓存到期了，然后发了请求到服务器，但是服务器通过 etag 等，发现资源没改变，这时候肯定就是返回 304 了。不要被绕道坑里了。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>开始工作了以后，基本上都是零零散散的学习。有些东西想要系统的写成博客，但是基本上一篇精心想写的文章，要花至少3个小时，时间略不够。我会想办法解决。比如上面的双向绑定，想仔细的写篇文章说说里面的原理，再比如 http 缓存。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hash-maps-without-side-effects&quot;&gt;&lt;a href=&quot;#Hash-maps-without-side-effects&quot; class=&quot;headerlink&quot; title=&quot;Hash maps without side effects&quot;&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://sevencai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>纪录最近遇到的坑</title>
    <link href="http://sevencai.github.io/2017/10/01/%E7%BA%AA%E5%BD%95%E6%9C%80%E8%BF%91%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://sevencai.github.io/2017/10/01/纪录最近遇到的坑/</id>
    <published>2017-10-01T13:39:56.000Z</published>
    <updated>2017-10-01T13:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录最近遇到的坑"><a href="#记录最近遇到的坑" class="headerlink" title="记录最近遇到的坑"></a>记录最近遇到的坑</h1><h3 id="ssi-未被解析"><a href="#ssi-未被解析" class="headerlink" title="ssi 未被解析"></a>ssi 未被解析</h3><p>今天接入 ssi 配置，本以为只需要 include 地址正确就行了。结果执行 gulp 命令后，竟然生成的 dist 里显示不出来 ssi 地址。我以为是我 virtual 绝对地址错误了。后来换成了 file,还是不正确。</p>
<p>最终发现我在压缩 HTML 的时候，用的 <code>gulp-minify-html</code> 竟然把我的 ssi 当成注释给去掉了。解决方法是 把这个插件换成 <code>gulp-htmlmin</code>,这个解析机制会稍微好一些，会保留我的 ssi 的内容。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#include virtual="h5/test.js"--&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Mixed-Content"><a href="#Mixed-Content" class="headerlink" title="Mixed Content"></a>Mixed Content</h3><p>今天在公司加班，突然同事让我帮他看个问题， 页面点击没反应。我猜测是 JS 未被正常加载，一看果然是： 页面显示</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mixed Content: The page at was loaded over HTTPS, but requested an insecure script This request has been blocked; the content must be served over HTTPS.</span><br></pre></td></tr></table></figure>
<p>错误就直白的显示页面是以 https 加载的， 但是却请求了一个不安全的 script, 这个 script 不是 https 的，而是 https 的。因此请求被浏览器拦截了。</p>
<p>这个问题我以前是知道的，但是这次才知道这个现象只出现在 ios 的机器上， 某些 android 对应的浏览器 上是没问题的。因此仔细了解了下这个问题，记录如下。</p>
<h4 id="什么是混合内容？"><a href="#什么是混合内容？" class="headerlink" title="什么是混合内容？"></a>什么是混合内容？</h4><blockquote>
<p>混合内容在以下情况下出现：初始 HTML 内容通过安全的 HTTPS 连接加载，但其他资源（例如，图像、视频、样式表、脚本）则通过不安全的 HTTP 连接加载。之所以称为混合内容，是因为同时加载了 HTTP 和 HTTPS 内容以显示同一个页面，且通过 HTTPS 加载的初始请求是安全的。现代浏览器会针对此类型的内容显示警告，以向用户表明此页面包含不安全的资源。</p>
</blockquote>
<p>之所以用 https 很清楚， https 可以帮助我们：</p>
<ol>
<li>身份验证， 不被重定向</li>
<li>数据完整性，不会有人篡改正在发送和接收的内容</li>
<li>保密性，会使用 TLS 提供加密</li>
</ol>
<p>但是并不是每个网站的每个访问者都会使用最新的浏览器，并且不同的浏览器商的不同版本的浏览器处理混合内容的方式也不是完全一样的。</p>
<p>注意混合内容不仅仅在 https 引入 http 文件中，在 https 页面里通过 ajax 的形式请求 http 资源，也是会被 block 掉的。</p>
<p>如果你的项目很大，一下子没办法全部转换完成，就可以使用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"Content-Security-Policy"</span> content=<span class="string">"upgrade-insecure-requests"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>可以在相应的页面的<head>里加上这句代码，<code>upgrade-insecure-requests</code>  意思是自动将http的不安全请求升级为https。 </head></p>
<hr>
<h3 id="微信开发工具"><a href="#微信开发工具" class="headerlink" title="微信开发工具"></a>微信开发工具</h3><p>微信开发工具自从更新了新版本后，我真的觉得好难用啊。。。这里记录一个刚开始使用 微信开发工具发现无法使用的情况。是因为他们工具有个 bug, 自动没有转成 https。那个错误是可以在微信开发工具的请求中看到的，是个 debug 请求。要用 fiddler 或者 whistle 重定向下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 微信开发者工具https whistle</span><br><span class="line">http:<span class="comment">//mp.weixin.qq.com https://mp.weixin.qq.com</span></span><br></pre></td></tr></table></figure>
<p>顺便提下：whistle 是个很好的代替 fiddler 的工具，因为配置更加灵活，比如正则通配啥的，而且直接在浏览器中，跨平台使用，完全没有隔阂。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;记录最近遇到的坑&quot;&gt;&lt;a href=&quot;#记录最近遇到的坑&quot; class=&quot;headerlink&quot; title=&quot;记录最近遇到的坑&quot;&gt;&lt;/a&gt;记录最近遇到的坑&lt;/h1&gt;&lt;h3 id=&quot;ssi-未被解析&quot;&gt;&lt;a href=&quot;#ssi-未被解析&quot; class=&quot;head
    
    </summary>
    
    
      <category term="javascripts" scheme="http://sevencai.github.io/tags/javascripts/"/>
    
  </entry>
  
  <entry>
    <title>纪录几个点</title>
    <link href="http://sevencai.github.io/2017/08/24/%E7%BA%AA%E5%BD%95%E5%87%A0%E4%B8%AA%E7%82%B9/"/>
    <id>http://sevencai.github.io/2017/08/24/纪录几个点/</id>
    <published>2017-08-24T08:24:32.000Z</published>
    <updated>2017-12-19T12:40:23.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><p>创建Object的实例有下面三种方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123;&#125;;</span><br></pre></td></tr></table></figure></p>
<p>通过：<code>var o4 = Object.create(null);</code>可以创建没有原型的Object,这个对象不能使用 <code>toString,valueOf</code>等函数。</p>
<p>创建一个以另一个空对象为原型,且拥有一个属性p的对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span> &#125; &#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h3><p>在涉及其它运算符（译注：如下面的减号’-‘）时，JavaScript语言不会把数字变为字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"37"</span> - <span class="number">7</span> <span class="comment">// 30</span></span><br><span class="line"><span class="string">"37"</span> + <span class="number">7</span> <span class="comment">// "377"</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="单目加法运算符"><a href="#单目加法运算符" class="headerlink" title="单目加法运算符"></a>单目加法运算符</h3><p>将字符串转换为数字的另一种方法是使用单目加法运算符。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"1.1"</span> + <span class="string">"1.1"</span> = <span class="string">"1.11.1"</span></span><br><span class="line">(+<span class="string">"1.1"</span>) + (+<span class="string">"1.1"</span>) = <span class="number">2.2</span>   <span class="comment">// 注：加入括号为清楚起见，不是必需的。</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="false-判断"><a href="#false-判断" class="headerlink" title="false 判断"></a>false 判断</h3><p>当传递给条件语句时，所有其他值，包括所有对象会被计算为 true 。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="literal">NaN</span></span><br><span class="line">空字符串 (<span class="string">""</span>)</span><br></pre></td></tr></table></figure></p>
<p>请不要混淆原始的布尔值true和false 与 布尔对象的值true和false.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (b) <span class="comment">// this condition evaluates to true</span></span><br><span class="line"><span class="keyword">if</span> (b == <span class="literal">true</span>) <span class="comment">// this condition evaluates to false</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="promise-catch-error"><a href="#promise-catch-error" class="headerlink" title="promise catch error"></a>promise catch error</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgLoad</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    request.open(<span class="string">'GET'</span>, url);</span><br><span class="line">    request.responseType = <span class="string">'blob'</span>;</span><br><span class="line">    request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (request.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(request.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="built_in">Error</span>(<span class="string">'Image didn\'t load successfully; error code:'</span></span><br><span class="line">                     + request.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      reject(<span class="built_in">Error</span>(<span class="string">'There was a network error.'</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    request.send();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="for…of-statement"><a href="#for…of-statement" class="headerlink" title="for…of statement"></a>for…of statement</h3><p>该新特性属于 ECMAScript 2015（ES6）规范，在使用时请注意浏览器兼容性。<br>下面的这个例子展示了 for…of 和 for…in 两种循环语句之间的区别。与 for…in 循环遍历的结果是数组元素的下标不同的是， for…of 遍历的结果是元素的值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line">arr.foo = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i); <span class="comment">// logs "0", "1", "2", "foo"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i); <span class="comment">// logs "3", "5", "7" // 注意这里没有 hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="剩余参数-rest-parameters"><a href="#剩余参数-rest-parameters" class="headerlink" title="剩余参数(rest parameters)"></a>剩余参数(rest parameters)</h3><p>剩余参数语法允许将不确定数量的参数表示为数组。在下面的例子中，使用剩余参数收集从第二个到最后参数。然后，我们将这个数组的每一个数与第一个参数相乘。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">multiplier, ...theArgs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> theArgs.map(<span class="function"><span class="params">x</span> =&gt;</span> multiplier * x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = multiply(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="列举对象属性"><a href="#列举对象属性" class="headerlink" title="列举对象属性"></a>列举对象属性</h3><p>从 ECMAScript 5 开始，有三种原生的方法用于列出或枚举对象的属性：</p>
<p>1.<code>for...in</code> 循环<br>该方法依次访问一个对象及其原型链中所有可枚举的属性。</p>
<p>2.<code>Object.keys(o)</code><br>该方法返回一个对象 o 自身包含（不包括原型中）的所有属性的名称的数组。</p>
<p>3.<code>Object.getOwnPropertyNames(o)</code><br>该方法返回一个数组，它包含了对象 o 所有拥有的属性（无论是否可枚举）的名称。</p>
<hr>
<h3 id="使用-defineProperty-为已存在的对象定义-setter"><a href="#使用-defineProperty-为已存在的对象定义-setter" class="headerlink" title="使用 defineProperty 为已存在的对象定义 setter"></a>使用 defineProperty 为已存在的对象定义 setter</h3><p>set  语法将对象属性绑定到要调用的一个函数上， <strong>当尝试设置该属性时</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">a</span>:<span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(o, &#123;</span><br><span class="line">    <span class="string">"b"</span>: &#123; <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span>; &#125; &#125;,</span><br><span class="line">    <span class="string">"c"</span>: &#123; <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">this</span>.a = x / <span class="number">2</span>; &#125; &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">o.c = <span class="number">10</span> <span class="comment">// Runs the setter, which assigns 10 / 2 (5) to the 'a' property</span></span><br><span class="line"><span class="built_in">console</span>.log(o.b) <span class="comment">// Runs the getter, which yields a + 1 or 6</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="使用defineProperty在存在的对象上定义-getter"><a href="#使用defineProperty在存在的对象上定义-getter" class="headerlink" title="使用defineProperty在存在的对象上定义 getter"></a>使用defineProperty在存在的对象上定义 getter</h3><p>get 语法将一个对象属性绑定到<strong>查询该属性时</strong>将被调用的一个函数上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">a</span>:<span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"b"</span>, &#123; <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span>; &#125; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.b) <span class="comment">// Runs the getter, which yields a + 1 (which is 1)</span></span><br></pre></td></tr></table></figure></p>
<p>defineProperty 的 getter/setter 方法就是 Vue 双向绑定的一部分机制。</p>
<hr>
<h3 id="判断浏览器高度"><a href="#判断浏览器高度" class="headerlink" title="判断浏览器高度"></a>判断浏览器高度</h3><p>注意，navigator的信息可以很容易地被用户修改，所以JavaScript读取的值不一定是正确的。很多初学者为了针对不同浏览器编写不同的代码，喜欢用if判断浏览器版本，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> width;</span><br><span class="line"><span class="keyword">if</span> (getIEVersion(navigator.userAgent) &lt; <span class="number">9</span>) &#123;</span><br><span class="line">    width = <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">&#125;</span><br><span class="line">但这样既可能判断不准确，也很难维护代码。正确的方法是充分利用JavaScript对不存在属性返回<span class="literal">undefined</span>的特性，直接用短路运算符||计算：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> width = <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.body.clientWidth;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="几个高度"><a href="#几个高度" class="headerlink" title="几个高度"></a>几个高度</h3><p>1.window对象不但充当全局作用域，而且表示浏览器窗口。</p>
<p>2.window对象有innerWidth和innerHeight属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高。</p>
<p>3.outerWidth和outerHeight属性，可以获取浏览器窗口的整个宽高。</p>
<p>4.screen对象表示屏幕的信息，常用的属性有：screen.width：屏幕宽度，以像素为单位；screen.height：屏幕高度，以像素为单位；</p>
<hr>
<h3 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h3><p>location对象表示当前页面的URL信息。例如，一个完整的URL：<br><code>http://www.example.com:8080/path/index.html?a=1&amp;b=2#TOP</code>可以用<code>location.href</code>获取。要获得URL各个部分的值，可以这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location.protocol; <span class="comment">// 'http'</span></span><br><span class="line">location.host; <span class="comment">// 'www.example.com'</span></span><br><span class="line">location.port; <span class="comment">// '8080'</span></span><br><span class="line">location.pathname; <span class="comment">// '/path/index.html'</span></span><br><span class="line">location.search; <span class="comment">// '?a=1&amp;b=2'</span></span><br><span class="line">location.hash; <span class="comment">// 'TOP'</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="DOM-对象"><a href="#DOM-对象" class="headerlink" title="DOM 对象"></a>DOM 对象</h3><p>低版本的IE&lt;8不支持querySelector和querySelectorAll。IE8仅有限支持。</p>
<hr>
<h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify"></a>JSON.stringify</h3><p>哈哈， 今天才知道 <code>JSON.stringify</code> 有第二个参数和第三个参数，是不是很菜。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="string">"skills"</span>: [</span><br><span class="line">    <span class="string">"JavaScript"</span>,</span><br><span class="line">    <span class="string">"Java"</span>,</span><br><span class="line">    <span class="string">"Python"</span>,</span><br><span class="line">    <span class="string">"Lisp"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入数组，用于筛选需要得到的key和value，传入key</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj, [<span class="string">"name"</span>, <span class="string">"skills"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; "&#123;"name":"小明","skills":["JavaScript","Java","Python","Lisp"]&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入函数， 用于在序列化之前对每对键值进行处理</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> value === <span class="string">"string"</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> value.toUpperCase();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj, convert);</span><br></pre></td></tr></table></figure>
<p>同样， <code>JSON.parse</code> 也有第二个参数，用来处理得到后的JSON串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(obj, <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key === <span class="string">"name"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value + <span class="string">"小朋友"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter 一般可能我们只用第一个参数，其实还有第二个，第三个参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line"><span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, self</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(element); <span class="comment">// 依次打印'A', 'B', 'C'</span></span><br><span class="line">    <span class="built_in">console</span>.log(index); <span class="comment">// 依次打印0, 1, 2</span></span><br><span class="line">    <span class="built_in">console</span>.log(self); <span class="comment">// self就是变量arr</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>利用 filter 去除里面未定义元素或者空字符串：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">''</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="string">'R'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ele &amp;&amp; ele.trim();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; ["A", "R"]</span></span><br></pre></td></tr></table></figure></p>
<p>利用 filter 去重：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>, <span class="string">'apple'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = fruits.filter(<span class="function"><span class="keyword">function</span> (<span class="params">ele, index, self</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.indexOf(ele) === index;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; ["apple", "orange", "banana"]</span></span><br></pre></td></tr></table></figure></p>
<p>利用 filter 去除偶数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r =  arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ele % <span class="number">2</span> !== <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; [1, 3, 5, 7]</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="千万不要直接用-JS-里的-Sort"><a href="#千万不要直接用-JS-里的-Sort" class="headerlink" title="千万不要直接用 JS 里的 Sort"></a>千万不要直接用 JS 里的 Sort</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 看上去正常的结果:</span></span><br><span class="line">[<span class="string">'Google'</span>, <span class="string">'Apple'</span>, <span class="string">'Microsoft'</span>].sort(); <span class="comment">// ['Apple', 'Google', 'Microsoft'];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// apple排在了最后:</span></span><br><span class="line">[<span class="string">'Google'</span>, <span class="string">'apple'</span>, <span class="string">'Microsoft'</span>].sort(); <span class="comment">// ['Google', 'Microsoft", 'apple']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法理解的结果:</span></span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>].sort(); <span class="comment">// [1, 10, 2, 20]</span></span><br></pre></td></tr></table></figure>
<p>字符串都是按照 ASCII 码来排列，所以1,2 没问题，只是平常要注意这个地方。后面一个一定要记住 Array.sort 默认都会把元素转换为 字符串，再来排序。所以连基本的数字排序他都没做好。</p>
<p>但是 sort 可以传入一个 function 用来自定义排序：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从小到大</span></span><br><span class="line"><span class="keyword">var</span> r = arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; y) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x = y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort 方法会对原数组进行修改，并且返回的也是修改后的数组</span></span><br><span class="line"><span class="comment">// arr =&gt;  [1, 2, 10, 20]</span></span><br><span class="line"><span class="comment">// r =&gt;  [1, 2, 10, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x = y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr =&gt; [20, 10, 2, 1]</span></span><br><span class="line"><span class="comment">// r =&gt; [20, 10, 2, 1]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;Object-create&quot;&gt;&lt;a href=&quot;#Object-create&quot; class=&quot;headerlink&quot; title=&quot;Object.create()&quot;&gt;&lt;/a&gt;Object.create()&lt;/h3&gt;&lt;p&gt;创建Object的实例有下面三种方
    
    </summary>
    
    
      <category term="other" scheme="http://sevencai.github.io/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Vuex</title>
    <link href="http://sevencai.github.io/2017/07/11/Understanding-Vuex/"/>
    <id>http://sevencai.github.io/2017/07/11/Understanding-Vuex/</id>
    <published>2017-07-11T09:21:39.000Z</published>
    <updated>2017-07-12T06:44:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Recently, I try to use Vuex to do some small projects. After some studies, I find a better way for myself to understand and use it. Here, I just put them done in my blog for later reading.  If you find any grammar mistakes or misleading opinions, please let me kown. Thank you.</p>
</blockquote>
<hr>
<h3 id="define-a-store"><a href="#define-a-store" class="headerlink" title="define a store"></a>define a store</h3><p>First define a store. A <code>store</code> should contain 4 parts, they are</p>
<ol>
<li>state</li>
<li>mutaions</li>
<li>actions</li>
<li>getters</li>
</ol>
<p>after define these 4 parts, combine them by using  <code>Vue.Store()</code>.</p>
<p><code>State</code> is an Object.  It contains all the data information of your app.  Each Vuex instance is just a single state tree.</p>
<p><code>mutations</code> are operations that actually mutates state.  And state can only be changed by mutations. Each mutaion handler gets the entire state tree as the first argument, followed by additional payload arguments. <code>Mutations must be synchronous and be recorded by plugins for debugging purposes</code>.</p>
<p><code>actions</code> are functions that causes side effects and handle your logical process . Unlike  <code>mutations</code>,  you can involve asynchronous operations.</p>
<p><code>getters are functions</code>.</p>
<p>let’s see an counter example.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">//define  root state object.</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define mutaions</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  increment (state) &#123;</span><br><span class="line">    state.count++</span><br><span class="line">  &#125;,</span><br><span class="line">  decrement (state) &#123;</span><br><span class="line">    state.count--</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define actions</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  increment: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> commit(<span class="string">'increment'</span>),</span><br><span class="line">  decrement: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> commit(<span class="string">'decrement'</span>),</span><br><span class="line">  incrementIfOdd (&#123; commit, state &#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((state.count + <span class="number">1</span>) % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      commit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  incrementAsync (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'increment'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define getters</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  evenOrOdd: <span class="function"><span class="params">state</span> =&gt;</span> state.count % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">'even'</span> : <span class="string">'odd'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A Vuex instance is created by combining the state, mutations, actions,</span></span><br><span class="line"><span class="comment">// and getters.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  actions,</span><br><span class="line">  mutations</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>   The above example comes from <a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">https://github.com/vuejs/vuex</a>. You can see that all the four parts are been written in one file, which is bad for big and complex projects.  To avoid this, just split them, and then combine them together.</p>
<hr>
<h3 id="define-entry"><a href="#define-entry" class="headerlink" title="define entry"></a>define entry</h3><p>You may have an root element in your app.  Just set the store and the view component to the root element. In this way , your store will be available in any place of your application.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'./Counter.vue'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    store,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(Counter)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>Then, you just need to include this file in your index.html. <code>Shared.js</code> is common code that you extract by  webpack.<br><code>bundle.js</code> includes all the code that you need in this app.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"shared.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="write-your-view-component"><a href="#write-your-view-component" class="headerlink" title="write your view component"></a>write your view component</h3><p>After defining the entry, We can begin write our component. Notice that you can use your <code>Store</code> Object now.</p>
<p>Use <code>$store.state.count</code>  to get your state info. And by functions like  <code>mapGetters</code> and <code>mapActions</code> ,you can get the functions that you have just  defined in store a moment ago.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    Clicked: &#123;&#123; $store.state.count &#125;&#125; times, count is &#123;&#123; evenOrOdd &#125;&#125;.</span><br><span class="line">    &lt;button @click=<span class="string">"increment"</span>&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &lt;button @click=<span class="string">"decrement"</span>&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &lt;button @click=<span class="string">"incrementIfOdd"</span>&gt;Increment <span class="keyword">if</span> odd&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="incrementAsync"&gt;Increment async&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; mapGetters, mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      computed: mapGetters([</span><br><span class="line">        <span class="string">'evenOrOdd'</span></span><br><span class="line">      ]),</span><br><span class="line">      methods: mapActions([</span><br><span class="line">        <span class="string">'increment'</span>,</span><br><span class="line">        <span class="string">'decrement'</span>,</span><br><span class="line">        <span class="string">'incrementIfOdd'</span>,</span><br><span class="line">        <span class="string">'incrementAsync'</span></span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="run-the-app"><a href="#run-the-app" class="headerlink" title="run the app"></a>run the app</h3><p>We have just used ES2015 and vue, so it’s necessary to use webpack compiling all the code.</p>
<p>Actually, I am not very skilled in webpack. So I  keep them down, and give some small introductions for later checking out.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./app.js'</span>,</span><br><span class="line"></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="attr">loader</span>: <span class="string">'babel-loader'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="attr">loader</span>: <span class="string">'vue-loader'</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name: <span class="string">'shared'</span>,</span><br><span class="line">            filename: <span class="string">'shared.js'</span></span><br><span class="line">        &#125;),  <span class="comment">//get share.js</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;   <span class="comment">// 编译时配置的全局变量</span></span><br><span class="line">            <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(process.env.NODE_ENV || <span class="string">'development'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),   <span class="comment">//热更新插件</span></span><br><span class="line">        <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin() <span class="comment">//不触发错误,即编译后运行的包正常运行</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>After make the <code>webpack.config</code>,let’s start the server. Here, we can use <code>express</code>  to build a little server.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackHotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)</span><br><span class="line"><span class="keyword">const</span> opn = <span class="built_in">require</span>(<span class="string">'opn'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">8080</span></span><br><span class="line"><span class="keyword">const</span> autoOpenBrowser = <span class="literal">true</span>                  <span class="comment">//you can load the config from your config file.</span></span><br><span class="line"><span class="keyword">const</span> compiler = webpack(webpackConfig)</span><br><span class="line"></span><br><span class="line">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class="line">    stats: &#123;</span><br><span class="line">        colors: <span class="literal">true</span>,</span><br><span class="line">        chunks: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.use(webpackHotMiddleware(compiler))</span><br><span class="line">app.use(express.static(__dirname))</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = app.listen(port, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Server listening on http://localhost:<span class="subst">$&#123;port&#125;</span>, Ctrl+C to stop`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(autoOpenBrowser) &#123;</span><br><span class="line">        opn(<span class="string">`http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>npm package <code>opn</code> was used to force open the browser.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Recently, I try to use Vuex to do some small projects. After some studies, I find a better way for myself to understand and 
    
    </summary>
    
    
      <category term="Javascript" scheme="http://sevencai.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>由 Fetch 跨域 看 CORS</title>
    <link href="http://sevencai.github.io/2017/03/06/%E7%94%B1-Fetch-API-%E7%9C%8B-CORS/"/>
    <id>http://sevencai.github.io/2017/03/06/由-Fetch-API-看-CORS/</id>
    <published>2017-03-06T07:59:49.000Z</published>
    <updated>2017-07-11T09:31:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看 react 获取服务器数据时， 看到了一新的 API <a href="https://fetch.spec.whatwg.org/" target="_blank" rel="noopener">fetch</a>， 上手来用了用，觉得十分好用。但是使用的过程中遇到了一些问题，还是决定整体的记录下。 fetch 类似于 Ajax, 区别自在与 fetch 结合了 promise 的友好调用方式，有效的防止了 callback hell。</p>
<blockquote>
<p>fetch() allows you to make network requests similar to XMLHttpRequest (XHR). The main difference is that the Fetch API uses Promises, which enables a simpler and cleaner API, avoiding callback hell and having to remember the complex API of XMLHttpRequest.</p>
</blockquote>
<hr>
<h3 id="对比传统方式与-fetch"><a href="#对比传统方式与-fetch" class="headerlink" title="对比传统方式与 fetch"></a><strong>对比传统方式与 fetch</strong></h3><p>先感受下好用在哪儿：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'./api/some.json'</span>)  </span><br><span class="line">  .then(  </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;  </span><br><span class="line">      <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Looks like there was a problem. Status Code: '</span> +  </span><br><span class="line">          response.status);  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Examine the text in the response  </span></span><br><span class="line">      response.json().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(data);  </span><br><span class="line">      &#125;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  )  </span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Fetch Error :-S'</span>, err);  </span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p>
<p>相比于传统的 <code>XMLHttpRequest</code> 的如下写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reqListener</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);  </span><br><span class="line">  <span class="built_in">console</span>.log(data);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reqError</span>(<span class="params">err</span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Fetch Error :-S'</span>, err);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">oReq.onload = reqListener;  </span><br><span class="line">oReq.onerror = reqError;  </span><br><span class="line">oReq.open(<span class="string">'get'</span>, <span class="string">'./api/some.json'</span>, <span class="literal">true</span>);  </span><br><span class="line">oReq.send();</span><br></pre></td></tr></table></figure>
<p>传统的 <code>XMLHttpRequest</code> 需要使用两个回调函数，分别在 onload 和 onerror 的时候使用。并且使用 open 和 send 两个 api, 这么看来 fetch 是不是很好用。</p>
<hr>
<h3 id="fetch-跨域"><a href="#fetch-跨域" class="headerlink" title="fetch 跨域"></a><strong>fetch 跨域</strong></h3><p>在用 fetch 的时候，跟普通 ajax 一样，经常会遇到 跨域的情况，那么跨域应该如何解决呢？</p>
<p>分为下面两种情况，也可以看我在<a href="https://www.zhihu.com/question/47029864/answer/150069385" target="_blank" rel="noopener">知乎</a>上的回答：</p>
<p><strong>1. 如果服务器不支持 CORS， 则不用使用 Fetch Api 了。</strong></p>
<p>因为此时如果你设置了 <code>{mode: &#39; cors &#39;}</code>，就会报错告诉你你请求的服务器不支持 CORS。大概会报下面的错误：</p>
<blockquote>
<p>Response to preflight request doesn’t pass access control check: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p>
</blockquote>
<p>如果设置成 <code>{mode: &#39; no-cors &#39;}</code>, 虽然不会报错，但是结果会 返回被标记了为 <code>opaque</code> 的数据，表明你没有权限访问。<br><img src="http://www.cailidan.cn/images/corswrong.png" alt="opaque"></p>
<p>这种情况下可以使用 <code>JSONP</code>。</p>
<p><strong>2. 如果服务器支持 CORS, 则在客户端设置相应的  <code>Access-Control-Allow-Origin</code>  即可得到数据。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">    <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">&#125;);</span><br><span class="line">fetch(url, &#123;</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    headers: myHeaders,</span><br><span class="line">    mode: <span class="string">'cors'</span></span><br><span class="line">&#125;) .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// TODO </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>回到刚刚的第一种情况， 如果 设置 <code>{mode: &#39;no-cors&#39;}</code> 返回的数据都是 opaque 的，那还要这种 mode 干嘛呢？ </p>
<blockquote>
<p>no-cors is intended to make requests to other origins that do not have CORS headers and result in an opaque response, but as stated, this isn’t possible in the window global scope at the moment.</p>
</blockquote>
<p><a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch" target="_blank" rel="noopener">introduction-to-fetch</a>这篇文章给了我们解释，就是比如你发送一些 log_data 的数据， 上报一些数据，这个时候你是不需要返回的，那利用 <code>no-cors</code> 就是没问题的了。也就是说 {mode: ‘no-cors’} 模式允许来自 CDN 的脚本、其他域的图片和其他一些跨域资源或者不需要返回资源的, 但是 cors 模式一般用来跨域请求，从而从第三方提供的 API 获取数据。</p>
<hr>
<h3 id="缺点与优点"><a href="#缺点与优点" class="headerlink" title="缺点与优点"></a><strong>缺点与优点</strong></h3><p>优点上面已经讲到了，比如支持 <code>primise</code> 的方式，比如简介的 API, 多样的设置。 但是还有一种情况可能会使用到：</p>
<p>比如你需要的传给服务器的数据很大，这时候用传统的 JSONP 不太合适，因为 JSONP 只支持 GET, 不支持 POST, 这个时候也可以用 Fetch, 给相应的服务器设置一下 CORS 即可。</p>
<p>有一个缺点是浏览器不兼容，还有一个缺点 和 promise 一样，一旦发生了就不能取消。</p>
<hr>
<h3 id="其他注意的地方"><a href="#其他注意的地方" class="headerlink" title="其他注意的地方"></a><strong>其他注意的地方</strong></h3><p>1.在 Firefox 39, Chrome 42 以上都支持了， 对于其他浏览器，建议使用 <a href="https://github.com/github/fetch" target="_blank" rel="noopener">Fetch Polyfil</a> </p>
<p>2.Fetch 引入了 3 个接口，分别是 <code>Headers</code>，<code>Request</code> 和 <code>Response</code>， 这里就不讲解具体怎么用了。</p>
<hr>
<h3 id="理解CORS"><a href="#理解CORS" class="headerlink" title="理解CORS"></a><strong>理解CORS</strong></h3><p>在用 fetch 的过程中， 发现自己对 CORS 的理解还是不完全，又学习了下：</p>
<blockquote>
<p>跨来源资源共享（CORS）是一份浏览器技术的规范，提供了 Web 服务从不同网域传来沙盒脚本的方法，以避开浏览器的同源策略[1]，是 JSONP 模式的现代版。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。用 CORS 可以让网页设计师用一般的 XMLHttpRequest，这种方式的错误处理比 JSONP 要来的好。另一方面，JSONP 可以在不支持 CORS 的老旧浏览器上运作。现代的浏览器都支持 CORS</p>
</blockquote>
<p><strong>简单的说，我们只需要在服务器上发送一个响应标头， 就可以允许一个域上的网络向另外一个域提交跨域请求。  这种方法就是 CORS ,是一种跨域的访问机制。</strong></p>
<p>比如在我的 php 代码中 header 一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Access-Control-Allow-Origin: *"</span>);</span><br></pre></td></tr></table></figure>
<p>然后再浏览器返回给我们的 Response Headers 里面就有下面的信息：</p>
<p><img src="http://cailidan.cn/images/accesscontrol.png" alt="结果"></p>
<p>CORS 的请求又包括了 两类，有简单请求以及非简单请求两种。两种具体不同在于对服务器请求的不同。</p>
<p>如果是简单的 <code>HEAD、GET、POST</code> ，Content-Type只限于三个值：<code>application/x-www-form-urlencoded、multipart/form-data、text/plain</code>，这种情况就是简单请求。</p>
<p>如果有请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code> 的时候，那么可以认为是复杂请求。</p>
<p>两者的区别在于 后者（复杂请求）回去在真正的请求服务器资源前， 先发一次预检请求，浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。<strong>而第一种就是不管怎么样都会先发一次 XMLHttpRequest。</strong></p>
<p>更加具体的可以参考文章<a href="https://spring.io/understanding/CORS" target="_blank" rel="noopener">understanding/CORS</a>和文章<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">from 软老师的cors</a></p>
<hr>
<h3 id="other-tips"><a href="#other-tips" class="headerlink" title="other tips"></a><strong>other tips</strong></h3><p>在学习 fetch 的过程中， 看到了一篇文章<a href="http://andrewhfarmer.com/ajax-libraries/" target="_blank" rel="noopener">javascript ajax libraries</a>, 这篇文章里面总结了下我们发起 http 请求时，用到的一些库的对比。我觉得总结的很好。附文章中的一个图。</p>
<p><img src="http://cailidan.cn/images/ajax12.png" alt=""></p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>总体来说就是学习了一个新的 API, 然后又进一步了解了下 CORS, 了解了什么时候该用 Fetch, CORS 又是场合下用，并且分为哪些中情况。</p>
<p>阅读并推荐资源如下，十分感谢：</p>
<ul>
<li><a href="http://bubkoo.com/2015/05/08/introduction-to-fetch/#cors" target="_blank" rel="noopener">introduction-to-fetch</a></li>
<li><a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch" target="_blank" rel="noopener">introduction-to-fetch</a></li>
<li><a href="https://hacks.mozilla.org/2015/03/this-api-is-so-fetching/" target="_blank" rel="noopener">fetch的具体使用方法</a></li>
<li><a href="https://spring.io/understanding/CORS" target="_blank" rel="noopener">CORS的两种处理方式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看 react 获取服务器数据时， 看到了一新的 API &lt;a href=&quot;https://fetch.spec.whatwg.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fetch&lt;/a&gt;， 上手来用了用，觉得十分好用。但是使用的过程中
    
    </summary>
    
    
      <category term="javascript" scheme="http://sevencai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>探索Promise用法和机制</title>
    <link href="http://sevencai.github.io/2017/02/27/%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2Promise%E6%9C%BA%E5%88%B6/"/>
    <id>http://sevencai.github.io/2017/02/27/深度探索Promise机制/</id>
    <published>2017-02-27T13:36:38.000Z</published>
    <updated>2017-12-19T12:40:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前就会经常用到 Promise，但是没有去探究内部的实现机制。 正好由这次在小程序中引入了 Promise ，探究下内部原理。</p>
<hr>
<h3 id="为什么使用-Promise"><a href="#为什么使用-Promise" class="headerlink" title="为什么使用 Promise"></a><strong>为什么使用 Promise</strong></h3><p>Promise 可以让我们避免回调的地狱。以前我们可能使用的是 bluebird 或者 Q,现在我们已经有了原生的实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func1(<span class="function"><span class="keyword">function</span> (<span class="params">value1</span>) </span>&#123;</span><br><span class="line">    func2(value1, <span class="function"><span class="keyword">function</span> (<span class="params">value2</span>) </span>&#123;</span><br><span class="line">        func3(value2, <span class="function"><span class="keyword">function</span> (<span class="params">value3</span>) </span>&#123;</span><br><span class="line">            func4(value3, <span class="function"><span class="keyword">function</span> (<span class="params">value4</span>) </span>&#123;</span><br><span class="line">                func5(value4, <span class="function"><span class="keyword">function</span> (<span class="params">value5</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// Do something with value 5</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>使用 Promise 后，可以把平行的代码变成竖状的易读的代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func1(value)</span><br><span class="line">	.then(func2)</span><br><span class="line">	.then(func3)</span><br><span class="line">	.then(func4)</span><br><span class="line">	.then(func5)</span><br></pre></td></tr></table></figure></p>
<p>一个最常见的 Promise 的例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"> request.get(url, (error, response, body) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(body) &#123;</span><br><span class="line">   resolve(<span class="built_in">JSON</span>.parse(body));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   resolve(&#123;&#125;); <span class="comment">//reject(....);</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="小程序-Promise-化实现"><a href="#小程序-Promise-化实现" class="headerlink" title="小程序 Promise 化实现"></a><strong>小程序 Promise 化实现</strong></h3><p>小程序里，包括官方文档的 demo 里会看到很多的 cb, 比如我们获取用户身份信息就需要下面的操作：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wx.login(&#123;</span><br><span class="line">	success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	  wx.getUserInfo(&#123;</span><br><span class="line">	    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">	      that.globalData.userInfo = res.userInfo;</span><br><span class="line">	      <span class="keyword">typeof</span> cb == <span class="string">"function"</span> &amp;&amp; cb(that.globalData.userInfo)</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这样略微深的嵌套一定程度的阻碍了我们的阅读和理解，代码整体也不好查 bug 和 扩展。所以我考虑到用 Promise 扩展一层。</p>
<p>但是由于小程序已经去除了 自带的 Promise ，所以需要开发者自动引入 Promise 库，或者编写相应的 Promise 库。这里我引入 <a href="https://github.com/stefanpenner/es6-promise" target="_blank" rel="noopener">es6-promise</a> 这个库。注意不要使用 bluebird ，bluebird 会导致android 上有报错，因为这个里面有用到一些小程序不支持的比如 document, window之类的对象。</p>
<p>选取一小段没使用的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'es6-promise'</span>).Promise; </span><br><span class="line"><span class="keyword">var</span> wxLib = <span class="built_in">require</span>(<span class="string">'../wxLib);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wxLib.login()</span></span><br><span class="line"><span class="string">.then(()=&gt;&#123;</span></span><br><span class="line"><span class="string"> wxLib.getUserInfo();</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">.catch(()=&gt;&#123;</span></span><br><span class="line"><span class="string"> wxLib.showErrorMsg();</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure></p>
<p>promise 更易我们看清整个的结构。更好的控制异步流程， 也可以让我们使用本来不方便使用的 return, throw 等。</p>
<hr>
<h3 id="更多其他的用法"><a href="#更多其他的用法" class="headerlink" title="更多其他的用法"></a><strong>更多其他的用法</strong></h3><h4 id="关于-Promise-的几个注意的地方"><a href="#关于-Promise-的几个注意的地方" class="headerlink" title="关于 Promise 的几个注意的地方"></a><strong>关于 Promise 的几个注意的地方</strong></h4><ol>
<li>Promise 对象是一个构造函数，所以才需要 new Promise 生成一个 Pormise 的实例对象。</li>
<li>Promise 构造函数接受了两个参数，分别是 resolve 和 reject, 这两个函数由 js 引擎提供，不需要自己实现。</li>
<li>resolve 是将 Promise 对象从 未完成 =&gt; 成功。（pending =&gt; resolved）, reject 是 将对象的状态从 未完成=&gt; 失败。（pending=&gt;rejected）</li>
<li>then 方法接收两个回调函数。第一个是 Promise 返回 resolved 的时候调用的， 第二个是 返回 rejected 的时候调用的。</li>
<li>Promise catch 是 .then(null, rejection)的别名，里面的回调用于发生错误时使用。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种情况不会捕捉then 里的错误</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; <span class="comment">//cb</span></span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="关于Promise-all的用法"><a href="#关于Promise-all的用法" class="headerlink" title="关于Promise.all的用法"></a><strong>关于Promise.all的用法</strong></h4><blockquote>
<p>var p = Promise.all([p1, p2, p3]);<br>其中 Promise.all 会接收一个数组作为参数， p1,p2,p3都是 Promise 对象的实例。 如果不是，则调用 Promise.resolve 方法，将参数转化为 Promise 实例。 </p>
</blockquote>
<p>他们三个之间的关系是： 必须都变成 fulfilled ， p才是 fulfilled, 只要有一个是 rejected, 就会是 rejected, 并且这个第一个被 reject 的实例的返回值就会给到 P。 haha, 挺团结的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urls = [</span><br><span class="line">  <span class="string">'/api/commits'</span>,</span><br><span class="line">  <span class="string">'/api/issues/opened'</span>,</span><br><span class="line">  <span class="string">'/api/issues/assigned'</span>,</span><br><span class="line">  <span class="string">'/api/issues/completed'</span>,</span><br><span class="line">  <span class="string">'/api/issues/comments'</span>,</span><br><span class="line">  <span class="string">'/api/pullrequests'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promises = urls.map(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  $.ajax(&#123; <span class="attr">url</span>: url &#125;)</span><br><span class="line">   .done(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">	 resolve(data);</span><br><span class="line">   &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(promises)</span><br><span class="line"> .then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// results is an array list</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>有一个方法叫做 Promise.race() 跟 Promise.all 差不多。也是</p>
<blockquote>
<p>var p = Promise.race([p1, p2, p3]);</p>
</blockquote>
<p>p1, p2, p3 只要有一个率先改变，p 的状态就会改，并且把这个率先改的返回值给到 P。</p>
<hr>
<h4 id="Promise-resolve-的-用法"><a href="#Promise-resolve-的-用法" class="headerlink" title="Promise.resolve() 的 用法"></a><strong>Promise.resolve() 的 用法</strong></h4><p>上面提到了， promise.all 和 promise.race 的参数 p1, p2, p3 都必须是 promise 的实例对象。 如果不是，就需要转化为 Promise 对象。 Promise.resolve 就派上了用法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'foo'</span>));</span><br></pre></td></tr></table></figure>
<p>Promise.resolve 方法的参数分成下面几个情况：</p>
<blockquote>
<p>Promise.resolve(value);</p>
<p>Promise.resolve(promise);</p>
<p>Promise.resolve(thenable);</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">"Success"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// "Success"</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 不会被调用</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v[<span class="number">0</span>]); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="实现一个简易的-Promise"><a href="#实现一个简易的-Promise" class="headerlink" title="实现一个简易的 Promise"></a><strong>实现一个简易的 Promise</strong></h3><p>这里实现的过程我参考阅读了很多篇文章，感谢，具体有：</p>
<ol>
<li><a href="https://github.com/xieranmaya/blog/issues/3" target="_blank" rel="noopener">剖析Promise内部结构</a></li>
<li><a href="https://blog.coding.net/blog/how-do-promises-work" target="_blank" rel="noopener">how-do-promises-work</a></li>
<li><a href="http://bruce-xu.github.io/blogs/js/promise" target="_blank" rel="noopener">JS Promise的实现原理</a></li>
</ol>
<p>先搭一个简单的框架。</p>
<hr>
<h4 id="构造函数的实现"><a href="#构造函数的实现" class="headerlink" title="构造函数的实现"></a><strong>构造函数的实现</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// processor 就是传给 Promise 的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">processor</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.status = <span class="string">'pending'</span>;</span><br><span class="line">	<span class="keyword">this</span>.data = <span class="literal">undefined</span>;</span><br><span class="line">	<span class="keyword">this</span>.onResolvedCb = [];</span><br><span class="line">	<span class="keyword">this</span>.onRejectedCb = [];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">		(<span class="keyword">typeof</span> processor === <span class="string">'function'</span>) &amp;&amp; processor(resolve, reject);</span><br><span class="line">	&#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line">		reject(e);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是对 resolve 和 reject 的实现， 我们用原生的 Promise 的时候不需要实现这两个函数，是因为 JS 引擎已经帮我们做了这件事情。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'resolved'</span> || <span class="keyword">this</span>.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.status = <span class="string">'resolved'</span>;</span><br><span class="line">  <span class="keyword">this</span>.data = value;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.onResolvedCb.length; i &lt; l; i++) &#123;</span><br><span class="line">   <span class="comment">//执行回调函数</span></span><br><span class="line">   <span class="keyword">this</span>.onResolvedCb[i].value;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reject 就和 resolve 非常像</span></span><br><span class="line"><span class="keyword">this</span>.reject = <span class="function">(<span class="params">reson</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'rejected'</span> || <span class="keyword">this</span>.status === <span class="string">'pending'</span>)&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = <span class="string">'rejected'</span>;</span><br><span class="line">   <span class="comment">//......</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="then-函数的实现"><a href="#then-函数的实现" class="headerlink" title="then 函数的实现"></a><strong>then 函数的实现</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function">(<span class="params">onResolved, onRejected</span>) =&gt;</span> &#123;</span><br><span class="line">	onResolved = <span class="keyword">typeof</span> onResolved === <span class="string">'function'</span> ? onResolved : <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'resolved'</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="keyword">let</span> x = onResolved(self.data);</span><br><span class="line">				<span class="keyword">if</span>(x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">					x.then(resolve, reject);</span><br><span class="line">				&#125;</span><br><span class="line">				resolve(x);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">				reject(e);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">//TODO</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//pending</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">//TODO</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>上面只是一个粗浅的大概。如果要丰富 Promise ， 还要去实现很多其他的内容，比如 catch 之类的。关于异步还有很多要学习，其实大部分都学习过，只是因为使用的少，没有考虑他内部的实现，也比较容易忘记。还是实践是王道。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前就会经常用到 Promise，但是没有去探究内部的实现机制。 正好由这次在小程序中引入了 Promise ，探究下内部原理。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;为什么使用-Promise&quot;&gt;&lt;a href=&quot;#为什么使用-Promise&quot; class=&quot;headerli
    
    </summary>
    
    
      <category term="javascript" scheme="http://sevencai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React 读书笔记（一）</title>
    <link href="http://sevencai.github.io/2017/02/21/React-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://sevencai.github.io/2017/02/21/React-读书笔记/</id>
    <published>2017-02-21T03:07:36.000Z</published>
    <updated>2017-07-11T09:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近又把 React 的官方文档和有关的书籍看了下，又有新的收获。下面记录下我最近有感受的或者觉得重要的一些地方。也体会到了其实最好的书籍就是官方文档。 而且React的文档写的很好，有很好的例子，有codepen,也有相应的解释说明。赞。</p>
<p><img src="http://www.cailidan.cn/images/react.png" alt=""></p>
<hr>
<h4 id="Adding-React-to-an-Existing-Application"><a href="#Adding-React-to-an-Existing-Application" class="headerlink" title="Adding React to an Existing Application"></a><strong>Adding React to an Existing Application</strong></h4><p>You don’t need to rewrite your app to start using React.</p>
<p>We recommend adding React to a small part of your application, such as an individual widget, so you can see if it works well for your use case.</p>
<p><strong>如果已经有现有的 App，没有必要重头全部重构，可以先选取其中一个模块。</strong></p>
<hr>
<h4 id="React-Only-Updates-What’s-Necessary"><a href="#React-Only-Updates-What’s-Necessary" class="headerlink" title="React Only Updates What’s Necessary"></a><strong>React Only Updates What’s Necessary</strong></h4><p>React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.</p>
<p>也就是传说中的虚拟DOM,每次render之前比较前后节点的区别，<strong>只更新需要更新的部分。</strong></p>
<hr>
<h4 id="Components-and-Props"><a href="#Components-and-Props" class="headerlink" title="Components and Props"></a><strong>Components and Props</strong></h4><p>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.</p>
<p>Conceptually, components are like JavaScript functions. They <strong>accept arbitrary inputs (called “props”) and return React elements</strong> describing what should appear on the screen.</p>
<p>组件就像函数一样，接受 props ，然后返回对应的 元素。所以我的理解似乎组件一定要是<strong>可复用，简洁，并且保持独立。</strong></p>
<hr>
<h4 id="Functional-and-Class-Components"><a href="#Functional-and-Class-Components" class="headerlink" title="Functional and Class Components"></a><strong>Functional and Class Components</strong></h4><p>函数和 es6 的类都可以生成 Components。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>This function is a valid React component because it accepts a single “props” object argument with data and returns a React element. We call such components “functional” because they are literally JavaScript functions.</p>
<p>You can also use an ES6 class to define a component:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>can both be used as<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Sara"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">ReactDOM.render(</span></span><br><span class="line"><span class="xml">  element,</span></span><br><span class="line"><span class="xml">  document.getElementById('root')</span></span><br><span class="line"><span class="xml">);</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="Rules-to-Follow"><a href="#Rules-to-Follow" class="headerlink" title="Rules to Follow"></a><strong>Rules to Follow</strong></h4><p>不要害怕把 大的 components 切分成小的。这一点我开始就有点害怕。总觉得分的大了就越开了，是不是越难维护了。但实际上只要组件<strong>确实是独立可复用</strong>，就完全可以大胆的分割。</p>
<p><strong>Extracting Components</strong><br>Don’t be afraid to split components into smaller components.</p>
<p><strong>Props are Read-Only</strong><br>React is pretty flexible but it has a single strict rule:</p>
<p><strong>All React components must act like pure functions with respect to their props.</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pure, they do not attempt to change their inputs, and always return the same result for the same inputs.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//impure because it changes its own input</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params">account, amount</span>) </span>&#123;</span><br><span class="line">  account.total -= amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So,<strong>we need <code>State</code>, State allows React components to change their output over time in response to user actions, network responses</strong>, and anything else, without violating this rule.</p>
<hr>
<h4 id="Converting-a-Function-to-a-Class"><a href="#Converting-a-Function-to-a-Class" class="headerlink" title="Converting a Function to a Class"></a>Converting a Function to a Class</h4><p>You can convert a functional component like Clock to a class in five steps:</p>
<ol>
<li><p>Create an ES6 class with the same name that extends React.Component.</p>
</li>
<li><p>Add a single empty method to it called render().</p>
</li>
<li><p>Move the body of the function into the render() method.</p>
</li>
<li><p>Replace props with this.props in the render() body.</p>
</li>
<li><p>Delete the remaining empty function declaration.</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        &lt;h2&gt;It is &#123;<span class="keyword">this</span>.props.date.toLocaleTimeString()&#125;.&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Components defined as classes have some additional features. Local state is exactly that: a feature available only to classes.</strong></p>
<hr>
<h4 id="Adding-Lifecycle-Methods-to-a-Class"><a href="#Adding-Lifecycle-Methods-to-a-Class" class="headerlink" title="Adding Lifecycle Methods to a Class"></a><strong>Adding Lifecycle Methods to a Class</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.timerID = setInterval(</span><br><span class="line">      () =&gt; <span class="keyword">this</span>.tick(),</span><br><span class="line">      <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        &lt;h2&gt;It is &#123;<span class="keyword">this</span>.state.date.toLocaleTimeString()&#125;.&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Clock /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="Using-State-Correctly"><a href="#Using-State-Correctly" class="headerlink" title="Using State Correctly"></a><strong>Using State Correctly</strong></h4><ol>
<li>Do Not Modify State Directly<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="keyword">this</span>.state.comment = <span class="string">'Hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">comment</span>: <span class="string">'Hello'</span>&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>The only place where you can assign this.state is the constructor.</strong></p>
<ol>
<li>State Updates May Be Asynchronous<br>意思是state的更新可能是异步的，并且为了细嫩那个，有可能会合并setState。所以不能够依赖他们当前的值来计算下面的一个状态。<br>React may batch multiple setState() calls into a single update for performance.</li>
</ol>
<p>Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.</p>
<p>下面就使用了prevState来保存了当前的state,这样再计算，就不会因setState异步的原因，而导致结果错误。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  counter: <span class="keyword">this</span>.state.counter + <span class="keyword">this</span>.props.increment,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  counter: prevState.counter + props.increment</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function"><span class="keyword">function</span>(<span class="params">prevState, props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: prevState.counter + props.increment</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li>The Data Flows Down<br>Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t care whether it is defined as a function or a class.</li>
</ol>
<p>This is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.</p>
<hr>
<h4 id="Handling-Events"><a href="#Handling-Events" class="headerlink" title="Handling Events"></a><strong>Handling Events</strong></h4><p>这里注意this的绑定方法有下面几种：<br>第一种：<code>this.handleClick = this.handleClick.bind(this);</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toggle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This binding is necessary to make `this` work in the callback</span></span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      isToggleOn: !prevState.isToggleOn</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.isToggleOn ? <span class="string">'ON'</span> : <span class="string">'OFF'</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Toggle /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>第二种：使用arrow functions<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'this is:'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>我自己比较喜欢这种，简单方便。如果真的像第一种方法绑定， 。。总觉得写的代码不太干净的样子。</strong></p>
<p>第三种，在callback中使用arror function<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line"><span class="comment">// This syntax ensures `this` is bound within handleClick</span></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">	  &lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.handleClick(e)&#125;&gt;</span><br><span class="line">	    Click me</span><br><span class="line">	  &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">	);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="Conditional-Rendering"><a href="#Conditional-Rendering" class="headerlink" title="Conditional Rendering"></a><strong>Conditional Rendering</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isLoggedIn = props.isLoggedIn;</span><br><span class="line">  <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">UserGreeting</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  return <span class="tag">&lt;<span class="name">GuestGreeting</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<p>也可以在render函数中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">const</span> isLoggedIn = <span class="keyword">this</span>.state.isLoggedIn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> button = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (isLoggedIn) &#123;</span><br><span class="line">      button = <span class="xml"><span class="tag">&lt;<span class="name">LogoutButton</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogoutClick&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">    &#125; else &#123;</span></span><br><span class="line">      button = &lt;LoginButton onClick=&#123;this.handleLoginClick&#125; /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125; /&gt;</span><br><span class="line">        &#123;button&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>也可以不用if else, 而用 condition ? true : false。</p>
<hr>
<h4 id="Preventing-Component-from-Rendering"><a href="#Preventing-Component-from-Rendering" class="headerlink" title="Preventing Component from Rendering"></a><strong>Preventing Component from Rendering</strong></h4><p><strong>直接 <code>return null</code>，即可防止rendering.</strong></p>
<blockquote>
<p>In rare cases you might want a component to hide itself even though it was rendered by another component. To do this return null instead of its render output.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WarningBanner</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!props.warn) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"warning"</span>&gt;</span><br><span class="line">      Warning!</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="Lists-and-Keys"><a href="#Lists-and-Keys" class="headerlink" title="Lists and Keys"></a><strong>Lists and Keys</strong></h4><p>A “key” is a special string attribute you need to include when creating lists of elements.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    &lt;li key=&#123;number.toString()&#125;&gt;</span><br><span class="line">      &#123;number&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;&#123;listItems&#125;&lt;/u</span>l&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;NumberList numbers=&#123;numbers&#125; /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p><strong>Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity.</strong></p>
<p>微信小程序貌似也是借用了这种方法。<strong>有key的时候渲染会快一点，性能会更好。</strong></p>
<p>如果渲染的 obj 里面有唯一标示 id, 就用次 id, 如果没有，就用 index 也是可以的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ok</span></span><br><span class="line"><span class="keyword">const</span> todoItems = todos.map(<span class="function">(<span class="params">todo</span>) =&gt;</span></span><br><span class="line">  &lt;li key=&#123;todo.id&#125;&gt;</span><br><span class="line">    &#123;todo.text&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ok</span></span><br><span class="line"><span class="regexp">const todoItems = todos.map((todo, index) =&gt;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ Only do this if items have no stable IDs</span></span><br><span class="line"><span class="regexp">  &lt;li key=&#123;index&#125;&gt;</span></span><br><span class="line"><span class="regexp">    &#123;todo.text&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>li&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="keys需要注意的地方"><a href="#keys需要注意的地方" class="headerlink" title="keys需要注意的地方"></a><strong>keys需要注意的地方</strong></h4><p>Keys only make sense in the context of the surrounding array.</p>
<ol>
<li><strong>keys 一定只能在需要它并且它确实在此处（上下文）有意义的时候再使用。</strong></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = props.value;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// Wrong! There is no need to specify the key here:</span></span><br><span class="line">    &lt;li key=&#123;value.toString()&#125;&gt;</span><br><span class="line">      &#123;value&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function NumberList(props) &#123;</span></span><br><span class="line"><span class="regexp">  const numbers = props.numbers;</span></span><br><span class="line"><span class="regexp">  const listItems = numbers.map((number) =&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ Wrong! The key should have been specified here:</span></span><br><span class="line"><span class="regexp">    &lt;ListItem value=&#123;number&#125; /</span>&gt;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;listItems&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const numbers = [1, 2, 3, 4, 5];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;NumberList numbers=&#123;numbers&#125; /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>正确的用法应该如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Correct! There is no need to specify the key here:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;props.value&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.numbers;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    <span class="comment">// Correct! Key should be specified inside the array.</span></span><br><span class="line">    &lt;ListItem key=&#123;number.toString()&#125;</span><br><span class="line">              value=&#123;number&#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;listItems&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const numbers = [1, 2, 3, 4, 5];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;NumberList numbers=&#123;numbers&#125; /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>总结起来就是有 map 的后面就需要有个 key.</p>
<blockquote>
<p>A good rule of thumb is that elements inside the map() call need keys.</p>
</blockquote>
<ol>
<li><strong>Keys Must Only Be Unique Among Siblings</strong><br>Keys used within arrays should be unique among their siblings. However they don’t need to be globally unique. </li>
</ol>
<p>当然要是唯一的，如果不唯一他的本身的作用就失去了。只要在 map 里面 id 是唯一的即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Blog</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line"><span class="comment">//key 1</span></span><br><span class="line">  <span class="keyword">const</span> sidebar = (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;props.posts.map(<span class="function">(<span class="params">post</span>) =&gt;</span></span><br><span class="line">        &lt;li key=&#123;post.id&#125;&gt;</span><br><span class="line">          &#123;post.title&#125;</span><br><span class="line">        &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      )&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  );</span><br><span class="line"><span class="comment">//key 2</span></span><br><span class="line">  <span class="keyword">const</span> content = props.posts.map(<span class="function">(<span class="params">post</span>) =&gt;</span></span><br><span class="line">    &lt;div key=&#123;post.id&#125;&gt;</span><br><span class="line">      &lt;h3&gt;&#123;post.title&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;&#123;post.content&#125;&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &#123;sidebar&#125;</span></span><br><span class="line"><span class="regexp">      &lt;hr /</span>&gt;</span><br><span class="line">      &#123;content&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const posts = [</span></span><br><span class="line"><span class="regexp">  &#123;id: 1, title: 'Hello World', content: 'Welcome to learning React!'&#125;,</span></span><br><span class="line"><span class="regexp">  &#123;id: 2, title: 'Installation', content: 'You can install React from npm.'&#125;</span></span><br><span class="line"><span class="regexp">];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;Blog posts=&#123;posts&#125; /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>Keys serve as a hint to React but they don’t get passed to your components. If you need the same value in your component, pass it explicitly as a prop with a different name.</strong> keys 不作为上下文传递给component参数, 如果需要 key 值传给下面的 component 就显示的传递下即可。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> content = posts.map(<span class="function">(<span class="params">post</span>) =&gt;</span></span><br><span class="line">  &lt;Post</span><br><span class="line">    key=&#123;post.id&#125;</span><br><span class="line">    id=&#123;post.id&#125;</span><br><span class="line">    title=&#123;post.title&#125; /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="Lifting-State-Up"><a href="#Lifting-State-Up" class="headerlink" title="Lifting State Up"></a><strong>Lifting State Up</strong></h4><blockquote>
<p>There should be a single “source of truth” for any data that changes in a React application. Usually, the state is first added to the component that needs it for rendering. Then, if other components also need it, you can lift it up to their closest common ancestor. Instead of trying to sync the state between different components, you should rely on the top-down data flow.</p>
</blockquote>
<p><strong>在React 应用中任何数据变动都应该是基于一个”source of truth”。通常state 被首先加入组件去渲染。然后，如果另一个组件也需要它，那么你就可以将它们提升到它们的父组件中。而不是尝试在不同的组件中同步state，你应该依赖top-down data flow。</strong></p>
<p>提升状态涉及编写比双向绑定方法更多的‘样板’代码。但好处是找到和隔离bug需要较少的工作。由于任何状态存在于特定的组件中，并且该组件可以单独改变它，所以大大减少了错误的表面积。此外，你可以实现任何自定义逻辑以拒绝或转换用户输入。</p>
<p>如果数据可以从props或state派生，那么它就不应该在状态之中。例如，我们只存储了最后编辑的value和scale，<strong>而不是存储两个celsiusValue和fahrenheitValue</strong>。另一个输入的值总是可以从render()方法中计算出来。这允许我们清除或应用四舍五入到其他字段，而不会丢失用户输入的任何精度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近又把 React 的官方文档和有关的书籍看了下，又有新的收获。下面记录下我最近有感受的或者觉得重要的一些地方。也体会到了其实最好的书籍就是官方文档。 而且React的文档写的很好，有很好的例子，有codepen,也有相应的解释说明。赞。&lt;/p&gt;
&lt;p&gt;&lt;img src=
    
    </summary>
    
    
      <category term="javascript" scheme="http://sevencai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发体会</title>
    <link href="http://sevencai.github.io/2017/01/22/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E4%BD%93%E4%BC%9A/"/>
    <id>http://sevencai.github.io/2017/01/22/小程序开发体会/</id>
    <published>2017-01-22T09:45:02.000Z</published>
    <updated>2017-02-09T12:02:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>过去的两个月，在组里参与了【腾讯充值小程序】以及【腾讯周边】两个项目。<br>其中充值项目，由于IOS对于微信小程序的虚拟商品的限制，暂时搁浅上线，周边已上。<br>下面是我遇到的一些体会，坑，以及一些感受。</p>
<hr>
<h3 id="小程序快的原理"><a href="#小程序快的原理" class="headerlink" title="小程序快的原理"></a>小程序快的原理</h3><p>轻应用，快一定是个最大的优点。小程序为什么这么快？平时开发是在PC端开发者工具上，可以看到各个资源的请求情况，包括js，cgi等。在真实手机上，又是怎么样的呢？</p>
<ol>
<li>资源最初全部下载下来</li>
<li>图片缓存策略</li>
<li>小程序大小限制，最多1M</li>
<li>小程序页面状态缓存，webview不会被回收销毁</li>
<li>每个程序都是单独的进程，并且最多5个进程</li>
</ol>
<p>前期我曾抓了个包试试，如下：</p>
<p><img src="http://cailidan.cn/images/xiaochengxu.jpg" alt="抓包实例"></p>
<p><strong>可以看到没有我们平时在开发者工具上看到的js等资源，原因是小程序在第一次打开时就把资源预先全部从微信服务器 down 了下来到本地，（appbrand/pkg目录下，后缀名为wxapkg），存放在了本地的文件系统中，所以在你使用的过程中，只会有CGI请求发出，不会再请求其他代码资源了。</strong></p>
<p>所以这也是为什么微信会限制开发者包的大小不得超过1M。这保证了第一次加载的速度，也不至于在无WIFI情况下，耗费太多流量。</p>
<p>所以如果完全可以通过一些API比如setStorage、getStorage等使用户在离线状态下也可以使用。</p>
<p>后期我再抓包时，发现请求又有了写变化，如下：</p>
<p><img src="http://cailidan.cn/images/1123123.png" alt="rid/sid"></p>
<p>猜想（未验证仅参考）这个rid/sid可能是用来判断小程序有没有资源发生变化，比如如果开发者提交了审核新版本，那么这个时候就去判断，如果有变化就从服务器拉去新的资源。如果没有变动，就用本地文件中的资源。</p>
<p>再：微信对于访问过的图片，都有缓存策略，所以对比如腾讯周边小程序这样的图片很多的应用，也比较快。</p>
<hr>
<h3 id="小程序发布流程思考"><a href="#小程序发布流程思考" class="headerlink" title="小程序发布流程思考"></a>小程序发布流程思考</h3><ol>
<li>开发者本地开发，通过开发者工具，本地预览，提交发布。然后微信通过审核，开发者发布审核版本，用户即可搜到。</li>
<li>上传的代码是到了微信服务器上，统一管理。所以这里是微信服务器，第三方服务器，微信客户端三方的交互。</li>
</ol>
<p>这个过程中情形是这样的：</p>
<p><img src="http://cailidan.cn/images/xiaochengxu123.png" alt="小程序流程图"></p>
<p>小程序框架分为两层</p>
<ol>
<li>View视图层， 用于渲染页面结构。使用Webview渲染。</li>
<li>App Service逻辑层，用来逻辑处理，网络请求，接口调用等等。运行在JSCore中。</li>
</ol>
<p>视图层和逻辑层通过JSBridge通信。逻辑层通知视图层数据发生变化，从而出发视图层更新。视图层则绑定事件，通知到逻辑层进行相应的业务处理。</p>
<p>如在视图层：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"updateData"</span>&gt;</span>页面跳转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>逻辑层：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        config: &#123;</span><br><span class="line">            title: <span class="string">''</span>,</span><br><span class="line">            name: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    updateData() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        <span class="string">'config.title'</span>: <span class="string">'腾讯周边'</span>,</span><br><span class="line">        <span class="string">'config.name'</span>: <span class="string">'Seven'</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="在View层渲染数据"><a href="#在View层渲染数据" class="headerlink" title="在View层渲染数据"></a>在View层渲染数据</h3><p><strong>用户打开小程序后，选择左上角的关闭或按返回键时小程序只是隐藏到后台，webview不会被销毁或者回收。比如在ios上，从小程序转到另外一个应用中，再回来微信，打开的webview仍然存在。再android上则是可以在窗口进程中再次找到先前打开的小程序。</strong></p>
<ol>
<li>Native预先加载额外一个Webview，当打开指定页面时，无需请求额外资源，直接渲染</li>
<li>model和view双线程，单向数据绑定</li>
<li>重渲染使用Virtual DOM减少开销，采用diff算法局部更新</li>
</ol>
<p>这里的单向数据绑定确实是有不方便的地方。先前用过Vue等双向绑定的，能够及时反馈用户的输入，相对来说这种可能更方便操作，也更适合小型应用。<br>但是单向绑定就是可能更加高效一些了。</p>
<hr>
<h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><p>1.小程序并发请求数不超过5，这里可以做优化，比如使用接口将所有的请求合并。</p>
<p>2.小程序关于登录态与移动应用和网页应用的不同之处是抛弃了access_token的验证方式，而是采用session_key加签名的方式，为小程序与服务器交换敏感数据提供了对称加密方法。签名方法对小程序透明，后端服务实现相应的解密程序以及登录态验证和控制能力。由于我们部门的后台接口基本都是基于access_token这一套，后来与WX侧协商还是可以用ac.否则后台就会有很大的改动。</p>
<p>3.要好好的利用小程序模板机制，这样可以减少很多代码量，也更便于维护。</p>
<p>4.对于WX官方文档上的API,最好是自己封装一个WXLIB文件。这样可以减少代码量，统一整个代码。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wxLib</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    share(obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            title: obj.title,</span><br><span class="line">            desc: obj.desc,</span><br><span class="line">            path: obj.path</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在每一个想要分享的页面就可以：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wxLib <span class="keyword">from</span> <span class="string">'../../service/lib/wxLib'</span>;</span><br><span class="line">Page(&#123;</span><br><span class="line">    onShareAppMessage() &#123;</span><br><span class="line">        <span class="keyword">return</span> wxLib.share(&#123;</span><br><span class="line">            title: <span class="string">'腾讯周边'</span>,</span><br><span class="line">            desc: <span class="string">'正品周边'</span>,</span><br><span class="line">            path: <span class="string">'page/index/index'</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>(233,这个好像看起来没有代码量减少，但是统一了以后，其他的也统一，就会发现后来方便很多。)</p>
<p>5.可以利用本地存储，解决离线的时候，黑屏无数据的情况。</p>
<p>6.文档很容易理解，API也好用。基本上按照文档来大部分功能都可以实现。</p>
<hr>
<h3 id="关于小程序定位"><a href="#关于小程序定位" class="headerlink" title="关于小程序定位"></a>关于小程序定位</h3><p>小程序即用即走的定位原本是很好的，比如非常适合线下的营销，非常适合生活服务。比如查火车票，膜拜单车，打麻将和牌的小游戏都很合适。用户生活方便，娱乐也方便。</p>
<p>但是目前来看小程序除了刚发布的时候，现在的流量目测已经越来越少，除开微信好像没有做很多推广以外，小程序还没有形成用户的习惯，可能是一个问题。</p>
<p>小程序要发展起来，一定是要在用户形成了使用习惯，产生【不用装这个app,直接用小程序就可以满足我的需求】的这种想法。</p>
<p>未来会怎样，取决于微信的推广和未来长远的看法。也取决是不是有很好的小程序出来。期待未来超出想象。</p>
<p>下次准备写一些小程序的用法，比如模板消息，客服等等。以上内容如果有不对的地方，欢迎指正，感谢阅读。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过去的两个月，在组里参与了【腾讯充值小程序】以及【腾讯周边】两个项目。&lt;br&gt;其中充值项目，由于IOS对于微信小程序的虚拟商品的限制，暂时搁浅上线，周边已上。&lt;br&gt;下面是我遇到的一些体会，坑，以及一些感受。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;小程序快的原理&quot;&gt;&lt;a hre
    
    </summary>
    
    
      <category term="小程序 javascript" scheme="http://sevencai.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F-javascript/"/>
    
  </entry>
  
  <entry>
    <title>利用onerror/onload写的jsonp在IE下不兼容的问题</title>
    <link href="http://sevencai.github.io/2017/01/22/onload%E5%8F%8Aonerror%E5%9C%A8IE%E4%B8%8B%E4%B8%8D%E5%85%BC%E5%AE%B9%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://sevencai.github.io/2017/01/22/onload及onerror在IE下不兼容的问题/</id>
    <published>2017-01-22T09:01:43.000Z</published>
    <updated>2017-01-22T09:39:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>某一天，我用 js 写了一段 jsonp 的代码。以前在学校也这么写，因为在学校没有测试IE所有的版本兼容性，一直觉得这段代码木有问题。</p>
<p>代码是这样子的：</p>
<p>简单来说就是将一个script标签添加进入dom,这样就可以伪造一次请求，因为同源策略可以用script/image之类标签回避掉。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Util.prototype.loadScript = <span class="function"><span class="keyword">function</span> (<span class="params">url, params, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> path = url + <span class="string">'?'</span> + <span class="keyword">this</span>.serializeParam(params);</span><br><span class="line">  <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  <span class="keyword">var</span> format = params.format.substr(<span class="number">6</span>), result;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>[format] = <span class="function"><span class="keyword">function</span> (<span class="params">_res</span>) </span>&#123;</span><br><span class="line">    result = _res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!script) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    head.removeChild(script);</span><br><span class="line">    script = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">window</span>[format] = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">typeof</span> cb == <span class="string">'function'</span> &amp;&amp; cb(result);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  script.src =  path;</span><br><span class="line">  script.async = <span class="literal">true</span>;</span><br><span class="line">  script.charset = <span class="string">'utf-8'</span>;</span><br><span class="line">  script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  script.onload = handler;</span><br><span class="line">  script.onerror = handler;</span><br><span class="line"></span><br><span class="line">  head.insertBefore(script, head.firstChild);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>直到测试同事那天在测试的时候，发现IE7,IE6的时候，请求可以发送，但是 callback 函数没有执行。导致了一个按钮好像像点不动一样。</p>
<p>这种 bug 算得上是严重的 bug 了，经过排查，发现确实是代码不完善，没有考虑到：</p>
<blockquote>
<p>在多数浏览器（包括Firefox和Chrome）下会触发onload和onerror， 但是在IE下只会触发 onreadystatechange，也就是说在IE8及IE8以下，onerror和onload都不能够使用。</p>
</blockquote>
<p>所以要调用回调函数一定需要再写一个针对 onreadystatechange 时的操作。错误中成长。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = script.readyState;</span><br><span class="line">  <span class="keyword">if</span> (r === <span class="string">'loaded'</span> || r === <span class="string">'complete'</span>) &#123;</span><br><span class="line">     handler();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="http://www.cailidan.cn/images/53832.png" alt="淘宝率先不支持IE8及以下，真的是一件美好的事情"></p>
<p>完整的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Util.prototype.loadScript = <span class="function"><span class="keyword">function</span> (<span class="params">url, params, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> path = url + <span class="string">'?'</span> + <span class="keyword">this</span>.serializeParam(params);</span><br><span class="line">  <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  <span class="keyword">var</span> format = params.format.substr(<span class="number">6</span>), result;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>[format] = <span class="function"><span class="keyword">function</span> (<span class="params">_res</span>) </span>&#123;</span><br><span class="line">    result = _res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!script) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    head.removeChild(script);</span><br><span class="line">    script = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">window</span>[format] = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">typeof</span> cb == <span class="string">'function'</span> &amp;&amp; cb(result);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  script.src =  path;</span><br><span class="line">  script.async = <span class="literal">true</span>;</span><br><span class="line">  script.charset = <span class="string">'utf-8'</span>;</span><br><span class="line">  script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"></span><br><span class="line">  script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = script.readyState;</span><br><span class="line">    <span class="keyword">if</span> (r === <span class="string">'loaded'</span> || r === <span class="string">'complete'</span>) &#123;</span><br><span class="line">      handler();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  script.onload = handler;</span><br><span class="line">  script.onerror = handler;</span><br><span class="line"></span><br><span class="line">  head.insertBefore(script, head.firstChild);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;某一天，我用 js 写了一段 jsonp 的代码。以前在学校也这么写，因为在学校没有测试IE所有的版本兼容性，一直觉得这段代码木有问题。&lt;/p&gt;
&lt;p&gt;代码是这样子的：&lt;/p&gt;
&lt;p&gt;简单来说就是将一个script标签添加进入dom,这样就可以伪造一次请求，因为同源策略可以
    
    </summary>
    
    
      <category term="javascript" scheme="http://sevencai.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Redux 中 combineReducers 和 createStore的实现原理</title>
    <link href="http://sevencai.github.io/2016/10/25/Redux%20%E4%B8%AD%20combineReducers%20%E5%92%8C%20createStore%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://sevencai.github.io/2016/10/25/Redux 中 combineReducers 和 createStore的实现原理/</id>
    <published>2016-10-25T14:46:27.000Z</published>
    <updated>2017-01-22T09:42:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在学习 redux, 感到了深深的难过，都两天了，感觉还是不知道怎么写代码，倒不是不知道是Redux 里面涉及的概念，是不知道什么代码该放在哪里。怎么样组织结构。希望再过两天能更清晰。</p>
<p><img src="http://cailidan.cn/images/redux.png" alt="Redux"></p>
<p>下面是中间学习到的 combineReducers 和 createStore 的实现原理，了解这些后，确实帮助了我更好的理解整个流程。</p>
<hr>
<h4 id="combineReducers-的实现原理"><a href="#combineReducers-的实现原理" class="headerlink" title="combineReducers 的实现原理"></a><strong>combineReducers 的实现原理</strong></h4><p>在探究 <code>combineReducers</code> 的实现原理之前，先看下 <code>combineReducers</code> 的用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todoApp = combineReducers(&#123;</span><br><span class="line">    visibilityFilter,</span><br><span class="line">    todos</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里为了逻辑上的分离，我们把 <code>reducers</code> 拆分成了 <code>visibilityFilter</code> 和 <code>todos</code>, 然后利用了 <code>combineReducers</code>  合成了一个 <code>reducer</code>。</p>
<p>先看下我们的 todos  和 visibilityFilter 是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//todos </span></span><br><span class="line"><span class="keyword">const</span> todos = <span class="function">(<span class="params">state = [], action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//visibilityFilter</span></span><br><span class="line"><span class="keyword">const</span> visibilityFilter = <span class="function">(<span class="params">state = <span class="string">'SHOW_ALL'</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'SET_VISIBILITY_FILTER'</span>:</span><br><span class="line">      <span class="keyword">return</span> action.filter</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>我们的 reducers 也是跟这里的每一个分 reducer 一样，都是函数，都要通过传入 (state, action)  来唯一判断下次的状态。所以我们 <code>combineReducers</code> 的作用就是重新生成一个 可以传入 (state, action) 两个值来判断 next 的 state 的值的函数。</strong></p>
<p>所以这下我们就可以理解下面的代码，<code>combineReducers</code> 的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> combineReducers = <span class="function">(<span class="params"> reducers </span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params"> state = &#123;&#125;, action </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(reducers).reduce(</span><br><span class="line">            ( nextState, key ) =&gt; &#123;</span><br><span class="line">                nextState[key] = reducers[key](</span><br><span class="line">                    state[key],</span><br><span class="line">                    action</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">return</span> nextState;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;&#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers;</span><br></pre></td></tr></table></figure>
<p>解释下：<strong>首先是返回一个可以传入两个参数的函数。所以我们先 return  一个 function, 然后再通过 reduce 函数，遍历每一个 key 值， 然后为对应的 state 赋值为新的函数。</strong></p>
<p>当我们形成了新的 reducer 以后， 传入任何 的 action  和 status 就会返回一个明确的 状态树了。可能是下面这个样子的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  visibilityFilter: <span class="string">'SHOW_ALL'</span>,</span><br><span class="line">    todos: &#123;</span><br><span class="line">    id: <span class="number">0</span>,</span><br><span class="line">    text: <span class="string">'Hello world'</span>,</span><br><span class="line">    completed: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="createStore-的实现原理"><a href="#createStore-的实现原理" class="headerlink" title="createStore 的实现原理"></a><strong>createStore 的实现原理</strong></h4><p>同样我们先看下 createStore 的用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let &#123; subscribe, dispatch, getState &#125; = createStore(reducer);</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br></pre></td></tr></table></figure></p>
<p>createStore 通过传入 我们的 reducer 形成一个全局唯一的 store,  这个形成的 store 是一个对象，它有3个方法，分别是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch()</span><br><span class="line">store.subscribe()  </span><br><span class="line">store.getState()</span><br></pre></td></tr></table></figure>
<p><strong>所以其实我们就是要编辑一个函数，这个函数里面可以有这三个方法暴露给我们使用。</strong> 原理如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params"> reducer </span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> state;</span><br><span class="line">  <span class="keyword">let</span> listeners = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params"> action </span>) =&gt;</span> &#123;</span><br><span class="line">    state = reducer(state, action);</span><br><span class="line">    listeners.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> listener());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params"> listener </span>) =&gt;</span> &#123;</span><br><span class="line">    listeners.push(listener);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      listeners = listeners.filter(<span class="function"><span class="params">l</span> =&gt;</span> l !== listener)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  dispatch(&#123;&#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getState,</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到我们是先实现了这三个方法。下面简单看下怎么用这三个方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;createStore&#125; = Redux;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.innerHTML = store.getState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.subscribe(render)</span><br><span class="line"></span><br><span class="line">render();</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, ()=&gt;&#123;</span><br><span class="line">  store.dispatch(&#123;<span class="attr">type</span>:<span class="string">'INCREMENT'</span>&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在学习 redux, 感到了深深的难过，都两天了，感觉还是不知道怎么写代码，倒不是不知道是Redux 里面涉及的概念，是不知道什么代码该放在哪里。怎么样组织结构。希望再过两天能更清晰。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cailidan.cn/imag
    
    </summary>
    
      <category term="WEB开发" scheme="http://sevencai.github.io/categories/WEB%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="React" scheme="http://sevencai.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>在应用(微信/浏览器)中拉起手机QQ</title>
    <link href="http://sevencai.github.io/2016/10/16/%E5%9C%A8%E5%BA%94%E7%94%A8-%E5%BE%AE%E4%BF%A1-%E6%B5%8F%E8%A7%88%E5%99%A8-%E4%B8%AD%E6%8B%89%E8%B5%B7%E6%89%8B%E6%9C%BAQQ/"/>
    <id>http://sevencai.github.io/2016/10/16/在应用-微信-浏览器-中拉起手机QQ/</id>
    <published>2016-10-16T10:43:30.000Z</published>
    <updated>2016-12-12T02:33:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>场景是：当我们做一些活动用来拉新等等时，通常会限制用户只在手Q中打开。比如用户通过微信扫码到了我们H5活动页面。那么我们就可以通过伪协议将手Q拉起，并且将H5页面打开。用户到达的途径有很多，比如通过浏览器，通过微信，通过其他APP应用。</p>
<hr>
<h4 id="正解代码"><a href="#正解代码" class="headerlink" title="正解代码"></a><strong>正解代码</strong></h4><p>先不看原理的话，代码应该是像下面的。今天我也参照了许多别人的代码，但大多数不是这个不兼容，就是微信拉不起来。或者是 IOS 拉起正常，但是 Android 就是不行。这通常是由于代码没有完备造成的。更主要是因为我们的浏览器什么的都在时时更新。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 检测浏览器UA</span></span><br><span class="line"><span class="comment">* @type &#123;Function&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> condition = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> ua = navigator.userAgent,</span><br><span class="line">       chrome = ua.match(<span class="regexp">/Chrome\/([\d.]+)/</span>) || ua.match(<span class="regexp">/CriOS\/([\d.]+)/</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//利用正则获得匹配 安卓 UA</span></span><br><span class="line">   <span class="keyword">var</span> getAndroidVersion = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase(),</span><br><span class="line">           version = ua.match(<span class="regexp">/android\s([0-9\.]*)/</span>);</span><br><span class="line">       <span class="keyword">return</span> version ? version[<span class="number">1</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>] : <span class="literal">false</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">       chrome: chrome,  <span class="comment">//true or false</span></span><br><span class="line">       androidVersion: getAndroidVersion()   <span class="comment">//version</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获得伪协议</span></span><br><span class="line"><span class="comment">* @param jumpURL</span></span><br><span class="line"><span class="comment">* @returns &#123;string&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params"> normal </span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(normal) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">'mqqapi://forward/url?src_type=internal&amp;version=1&amp;url_prefix='</span>+ btoa(location.href);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">"intent://forward/url?src_type=web&amp;style=default&amp;=1&amp;version=1&amp;url_prefix="</span> + btoa(location.href) + <span class="string">"#Intent;scheme=mqqapi;package=com.tencent.mobileqq;end"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测是否安装了QQ,如果没有安装要引导用户安装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> checkIfInstallQQ = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  WeixinJSBridge.invoke(<span class="string">"getInstallState"</span>, &#123;</span><br><span class="line">      <span class="string">"packageUrl"</span>: <span class="string">"mqq://"</span>, <span class="comment">//ios</span></span><br><span class="line">      <span class="string">"packageName"</span>: <span class="string">"com.tencent.mobileqq"</span> <span class="comment">//android</span></span><br><span class="line"></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="regexp">/^get_install_state:yes/</span>.test(res.err_msg)) &#123;</span><br><span class="line">          <span class="built_in">window</span>.open( getURL( <span class="literal">true</span> ), <span class="string">'_self'</span> );</span><br><span class="line"></span><br><span class="line">          <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              WeixinJSBridge.invoke(<span class="string">"closeWindow"</span>);</span><br><span class="line">          &#125;, <span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="regexp">/^get_install_state:no$/</span>.test(res.err_msg)) &#123;</span><br><span class="line">          <span class="keyword">if</span>(confirm(<span class="string">'您还没有安装手Q，现在去下载安装？'</span>)) &#123;</span><br><span class="line">              <span class="built_in">window</span>.location.replace(<span class="string">'http://im.qq.com/mobileqq/touch/index.html'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Alert.show(&#123;</span><br><span class="line">              showCancel:<span class="literal">false</span>,</span><br><span class="line">              msg: <span class="string">"err:"</span> + res.err_msg</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否在手q中打开，如果不是，则判断是否在微信打开</span></span><br><span class="line"><span class="comment"> * 如果在微信打开，调用微信的 JSBridge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span>( !U.ua.QQ )&#123;</span><br><span class="line">    Alert.show(&#123;</span><br><span class="line">        showCancel:<span class="literal">false</span>,</span><br><span class="line">        msg: <span class="string">"请在手q中打开此页面"</span>,</span><br><span class="line">        onConfirm : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//如果在微信中打开</span></span><br><span class="line">            <span class="keyword">if</span>(U.ua.weixin) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> WeixinJSBridge == <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> WeixinJSBridge.invoke == <span class="string">"function"</span>) &#123;</span><br><span class="line">                    checkIfInstallQQ();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">                        <span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, checkIfInstallQQ, <span class="literal">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;</span><br><span class="line">                        <span class="built_in">document</span>.attachEvent(<span class="string">"WeixinJSBridgeReady"</span>, checkIfInstallQQ);</span><br><span class="line">                        <span class="built_in">document</span>.attachEvent(<span class="string">"onWeixinJSBridgeReady"</span>, checkIfInstallQQ);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//这里也可以判断下是否安装了手Q</span></span><br><span class="line">                <span class="keyword">if</span>(U.ua.android &amp;&amp; condition.chrome &amp;&amp; condition.androidVersion() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">                    <span class="built_in">window</span>.open( getURL(<span class="literal">false</span>) );</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">window</span>.open( getURL(<span class="literal">true</span>) );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a><strong>代码分析</strong></h4><p>正常情况下我们拉起手q，利用伪协议就可以了。伪协议是形如上面的不是http,https,ftp,之类的协议。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mqqapi:<span class="comment">//forward/url?src_type=internal&amp;version=1&amp;url_prefix='+ btoa(location.href)</span></span><br><span class="line"></span><br><span class="line"><span class="string">"intent://forward/url?src_type=web&amp;style=default&amp;=1&amp;version=1&amp;url_prefix="</span> + btoa(location.href) + <span class="string">"#Intent;scheme=mqqapi;package=com.tencent.mobileqq;end"</span></span><br></pre></td></tr></table></figure>
<p>mqqapi是专门掉起手Q的， 后面的 btoa(location.href)是由于我们需要在手q打开我们的H5，所以这里要利用 location.href, 并且需要 base64的编码。这里的编码我们是利用的 window.btoa 函数。比起自己去编写 base64encode， 这个方法给我们提供了便利。</p>
<p>那么我们调用这一个 mqqapi 就可以了，为什么还要去判断一个 intent 呢？原因是：</p>
<p><strong>Android 4.4 以上将原生的浏览器换成了chrome,而Android 5.开始的chrome不再允许传统的scheme拉起手q。</strong> 所以当打开的浏览器是 Android5 的时候，我们就要去调用这个 intent 新协议，而不是原来的 mqqapi协议。但是也要注意，这里的拉起app是需要用户操作的，需要用户确定（点击确认按钮）拉起才可以。所以不要用JS定时器了。</p>
<p>另外要注意 IOS 9.0 safari ，IOS 9.0以后，原生的safari不支持iframe 拉起 scheme 了。可以用 location.href/top.location.href拉起。</p>
<p>那么下面这些代码是什么呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> WeixinJSBridge.invoke(<span class="string">"getInstallState"</span>, &#123;</span><br><span class="line">      <span class="string">"packageUrl"</span>: <span class="string">"mqq://"</span>, <span class="comment">//ios</span></span><br><span class="line">      <span class="string">"packageName"</span>: <span class="string">"com.tencent.mobileqq"</span> <span class="comment">//android</span></span><br><span class="line"></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;   </span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>WeixinJSBridge是微信浏览器内置的一个对象。JS API 建立在内置的这个对象中。但是有一个坑要注意。 WeixinJSBridge 不是我们一打开一个 WebView 就可以了的。我们需要在客户端初始化这个对象。当这个对象 ready 的时候，我们去监听，也就是这个 WeixinJSBridgeReady 事件。所以我们在调用这个 JS API 的时候，一定要判断下 WeixinJSBridge 是否存在。</strong>也就是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> WeixinJSBridge == <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> WeixinJSBridge.invoke == <span class="string">"function"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, checkIfInstallQQ, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>这两句话的作用。</p>
<p><code>WeixinJSBridge.invoke</code> 是 WeixinJSBridge 的一个方法，用来唤起相关的事件。这里我们唤起的是 <code>getInstallState</code> 这个事件。用来判断是否用户安装了 手机QQ。</p>
<p>当然还有很多别的 API，比如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'WeixinJSBridgeReady'</span>, <span class="function"><span class="keyword">function</span> <span class="title">onBridgeReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过下面这个API隐藏底部导航栏，‘showToolbar’是显示导航栏</span></span><br><span class="line">    WeixinJSBridge.call(<span class="string">'hideToolbar'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="延伸和扩展"><a href="#延伸和扩展" class="headerlink" title="延伸和扩展"></a><strong>延伸和扩展</strong></h4><p>这里去学习了下下面这些的区别。是可能会碰到的坑。</p>
<ol>
<li>“top.location.href”是最外层的页面跳转</li>
<li>“window.location.href”、”location.href”是本页面跳转 = self.location.href</li>
<li>“parent.location.href”是上一层页面跳转.</li>
</ol>
<hr>
<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a><strong>其他方法</strong></h4><p>上面我们使用 window.open 打开的，其实我们还可以用 ifame 打开。如下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ios 9 后，safari 打不开，可以用 location.href 或者 top.location.href 处理</span></span><br><span class="line"><span class="keyword">if</span>(mqq.IOS)&#123;</span><br><span class="line">  location.href = getURL(<span class="literal">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//利用 iframe 处理</span></span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</span><br><span class="line">  <span class="keyword">if</span>(U.ua.android &amp;&amp; condition.chrome&amp;&amp; condition.androidVersion() &gt;= <span class="number">5</span>)&#123;</span><br><span class="line">    iframe.src = getURL(<span class="literal">false</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    iframe.src = getURL(<span class="literal">true</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  iframe.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要这里也是一个简略的写法。可以更加完善的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场景是：当我们做一些活动用来拉新等等时，通常会限制用户只在手Q中打开。比如用户通过微信扫码到了我们H5活动页面。那么我们就可以通过伪协议将手Q拉起，并且将H5页面打开。用户到达的途径有很多，比如通过浏览器，通过微信，通过其他APP应用。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;正
    
    </summary>
    
      <category term="WEB开发" scheme="http://sevencai.github.io/categories/WEB%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="WEB开发" scheme="http://sevencai.github.io/tags/WEB%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>记一次实战 Dom XSS 漏洞</title>
    <link href="http://sevencai.github.io/2016/10/09/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98-Dom-XSS-%E6%BC%8F%E6%B4%9E/"/>
    <id>http://sevencai.github.io/2016/10/09/记一次实战-Dom-XSS-漏洞/</id>
    <published>2016-10-09T14:33:55.000Z</published>
    <updated>2017-12-19T12:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>国庆的前一天，突然有一个漏洞单接到我这里来，当时心里很着急，第一实习生小白，对于我们这种支付部门有漏洞不是很可怕，以前没见过，觉得有点吓人。第二，为什么是国庆的前一天呢，不能发版本。看了下，就是熟悉又不太熟悉的 Dom xss 漏洞。熟悉是因为以前书里经常见，不熟悉是因为以前没有实践过。</p>
<hr>
<h4 id="现象及解决办法"><a href="#现象及解决办法" class="headerlink" title="现象及解决办法"></a><strong>现象及解决办法</strong></h4><p>安全部门的同事说，它更改了 uin, 然后就可以输出 用户uin, 也就是俗称的 alert 出来。</p>
<p>大概是这样一个步骤</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"uin=&lt;img src=x onerror=alert('')&gt;"</span></span><br><span class="line">然后刷新了我的网页，由于我获取cookie的方法不严谨，这个时候就alert出来了。</span><br></pre></td></tr></table></figure>
<p>解决方法当然是换掉我不严谨的获取cookie的方法，正确获取 cookie 的方法应该如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filterXSS = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!e) <span class="keyword">return</span> e;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; e != <span class="built_in">unescape</span>(e);) e = <span class="built_in">unescape</span>(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r = [<span class="string">"&lt;"</span>, <span class="string">"&gt;"</span>, <span class="string">"'"</span>, <span class="string">'"'</span>, <span class="string">"%3c"</span>, <span class="string">"%3e"</span>, <span class="string">"%27"</span>, <span class="string">"%22"</span>, <span class="string">"%253c"</span>, <span class="string">"%253e"</span>, <span class="string">"%2527"</span>, <span class="string">"%2522"</span>], n = [<span class="string">"&amp;#x3c;"</span>, <span class="string">"&amp;#x3e;"</span>, <span class="string">"&amp;#x27;"</span>, <span class="string">"&amp;#x22;"</span>, <span class="string">"%26%23x3c%3B"</span>, <span class="string">"%26%23x3e%3B"</span>, <span class="string">"%26%23x27%3B"</span>, <span class="string">"%26%23x22%3B"</span>, <span class="string">"%2526%2523x3c%253B"</span>, <span class="string">"%2526%2523x3e%253B"</span>, <span class="string">"%2526%2523x27%253B"</span>, <span class="string">"%2526%2523x22%253B"</span>], a = <span class="number">0</span>; a &lt; r.length; a++) e = e.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(r[a], <span class="string">"gi"</span>), n[a]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filterXSS((a=<span class="built_in">document</span>.cookie.match(<span class="built_in">RegExp</span>(<span class="string">"(^|;\\s*)"</span>+b+<span class="string">"=([^;]*)(;|$)"</span>)))?<span class="built_in">unescape</span>(a[<span class="number">2</span>]):<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="探究原因"><a href="#探究原因" class="headerlink" title="探究原因"></a><strong>探究原因</strong></h4><p>那么我的 Cookie 是怎么获取的呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret = <span class="built_in">document</span>.cookie.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:^|;\\s)"</span> + name + <span class="string">"=(.*?)(?:;\\s|$)"</span>));</span><br><span class="line"><span class="keyword">return</span> ret ? ret[<span class="number">1</span>] : <span class="string">""</span>;</span><br></pre></td></tr></table></figure>
<p>为啥我的就不严谨了呢？</p>
<p>日常我们的cookie 是这样一种格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts_refer=ADTAGpay.index.header.paycenter; pgv_si=s3636090880; pgv_info=ssid=s9066946176; ts_last=pay.qq.com/; pgv_pvid=2986859684; ts_uid=8406093480</span><br></pre></td></tr></table></figure></p>
<p><strong>所以上面代码通过 = 和 ; 获得对应的 cookie , 似乎没有错，但是如果一遇到恶意攻击，没有对不合法字符进行任意转义就输出到页面上，就会造成 web 前端的安全大隐患。所以看到最上面我们的好方法里面，是有对不合法字符进行转义的。</strong>所以我们这样处理后，就会变成下面这样一个结果：</p>
<p><img src="http://www.cailidan.cn/images/xss2.png" alt="转义后"></p>
<hr>
<h4 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a><strong>延伸</strong></h4><p>记得我刚来面试的时候，当时 qq 问了我获取 cookie 的方法，那时之前做项目写过获取 cookie 的方法，还是特别傻的方法，代码大概是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">c_name</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.cookie.length&gt;<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  c_start=<span class="built_in">document</span>.cookie.indexOf(c_name + <span class="string">"="</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (c_start!=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    c_start=c_start + c_name.length+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    c_end=<span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>,c_start)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c_end==<span class="number">-1</span>) c_end=<span class="built_in">document</span>.cookie.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">document</span>.cookie.substring(c_start,c_end))</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>没错，就是正则也没用，直接去找 <code>=</code> 和 <code>;</code>之间的串是否与要查找的相同。<strong>这个方法在 w3cShool 上作为了标准方法，现在看来是误导人了。 当时 qq 问我有没有更好的方法，我说正则，但是正则还不能很快的写出来。</strong>那么这种方法除了效率不那么高以外，有没有上面提到的安全隐患呢？**做个实验：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"a=123 b=other; b=678"</span>;</span><br></pre></td></tr></table></figure>
<p>这个的意思是 cookie a 的值为 123 b=other,  b的值为 678, 但是我们通过上面的 getCookie 方法 做实验时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getCookie(&quot;b&quot;); //输出 other</span><br><span class="line">getCookie(&quot;a&quot;); //输出 123 b=other</span><br></pre></td></tr></table></figure></p>
<p>b的值很明显不正确了。这样就混淆了正确的 cookie。 所以这种方法也不是正确的方法，运用我们最上面提到的解决方法 可以很好的解决这个问题。</p>
<hr>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>还是实战出真知，继续前行！不怕犯错，积累经验。我当时跟师傅说我遇到了 dom xss 漏洞，师傅马上就让我去检查 cookie 获取的方法，连整个事情的经过就没问，就可以做出准确的判断，这就是老司机啊，向他学习。希望以后知道一些更多关于安全方面的实战。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国庆的前一天，突然有一个漏洞单接到我这里来，当时心里很着急，第一实习生小白，对于我们这种支付部门有漏洞不是很可怕，以前没见过，觉得有点吓人。第二，为什么是国庆的前一天呢，不能发版本。看了下，就是熟悉又不太熟悉的 Dom xss 漏洞。熟悉是因为以前书里经常见，不熟悉是因为以
    
    </summary>
    
      <category term="WEB开发" scheme="http://sevencai.github.io/categories/WEB%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="WEB开发" scheme="http://sevencai.github.io/tags/WEB%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Git 分支管理与多人协作</title>
    <link href="http://sevencai.github.io/2016/09/20/Git-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E4%B8%8E%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C/"/>
    <id>http://sevencai.github.io/2016/09/20/Git-分支管理与多人协作/</id>
    <published>2016-09-20T15:19:04.000Z</published>
    <updated>2016-12-12T02:28:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这一篇文章主要学习和记录分支管理和多人合作。我们知道 Git 的分支管理非常快，这是因为 Git 只是生成一个指向当前版本的指针。但是以前的很多管理软件都是生成一份代码的物理拷贝，可以想象，如果代码很大，是有多慢。但 Git 的这个特点，也需要我们更好的掌握它的切换，否则很容易造成错误。</p>
</blockquote>
<p>在 SF 上看到了一张图片，觉得非常好,图片来源是<a href="https://segmentfault.com/a/1190000005730658" target="_blank" rel="noopener">SF的这篇文章</a>,感谢：</p>
<p><img src="http://www.cailidan.cn/images/checkoutsf.png" alt="分支管理策略"></p>
<hr>
<h4 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a><strong>创建与合并分支</strong></h4><p>创建和合并分支都可以看作是指针的移动。我们看下下面这样一套流程，这是最常见的：</p>
<pre><code>git checkout -b dev   //创建一个新的dev（-b创建并切换）
git add file.txt //在dev分支中修改 file.txt 文件
git commit -m &quot;add change on dev&quot;  //到dev分支提交新的代码
git checkout master   //切换到主分支
git merge dev  //在主分支上合并dev分支
git branch -d dev  //dev工作完成，删除该dev分支
</code></pre><p>我画了一张图用于描述这个过程：</p>
<p><img src="http://www.cailidan.cn/images/branchprocess.png" alt="分支过程"></p>
<p>下面我们学习一些基本的命令：</p>
<pre><code>查看分支：git branch

创建分支：git branch &lt;name&gt;

切换分支：git checkout &lt;name&gt;

创建+切换分支：git checkout -b &lt;name&gt;

合并某分支到当前分支：git merge &lt;name&gt;

删除分支：git branch -d &lt;name&gt;
</code></pre><p>所以： <code>git checkout -b dev</code> =     <code>git branch dev</code> +  <code>git checkout dev</code>。</p>
<hr>
<h4 id="合并分支碰到的问题"><a href="#合并分支碰到的问题" class="headerlink" title="合并分支碰到的问题"></a><strong>合并分支碰到的问题</strong></h4><p>有时候我们会碰到下面这个问题：</p>
<p><img src="http://www.cailidan.cn/images/rush.jpg" alt="问题描述"></p>
<p>可以看到，我们新建了一个 feature1 分支，这个时候比如修改了 a 文件的第一行代码。然后当我们切换到 master 分支的时候，发现 master 也已经有了新版本。然后我们按照上面将的方法 切换到 master 分支，然后利用 <code>git merge feature1</code> 来进行合并。但是发现， master 分支也是修改了 a 文件的第一行代码，这时候我们就要手动去解决冲突了。并且会在 a 文件发现下列问题：</p>
<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
Creating a new branch is a
=======
Creating a new branch is b
&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1
</code></pre><p>Git 利用 &lt;&lt;&lt;&lt;&lt;&lt;&lt; ======= &gt;&gt;&gt;&gt;&gt;&gt;&gt;来表明冲突的地方，我们手动解决后再进行简单的合并就没有问题了。然后再删除 feature1 分支。</p>
<p><img src="http://www.cailidan.cn/images/rushafter.jpg" alt="解决冲突后"></p>
<p>试试 <code>git log --graph</code>这个命令，你会发现分支合并图。</p>
<p><img src="http://www.cailidan.cn/images/gitloggraph.png" alt="git log --graph"></p>
<p>合并分支时，有时候 Git 会用 Fast forward 模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用 Fast forward 模式，Git 就会在 merge 时生成一个新的 commit ，这样，从分支历史上就可以看出分支信息。可以用 –no-ff 参数，表示禁用 Fast forward 。</p>
<pre><code>git merge --no-ff -m &quot;no-ff merge&quot; develope  //or
git merge --no-ff develop
</code></pre><p>看下下面这张图开了解下是否通过 –no-ff 的区别。</p>
<p><img src="http://www.cailidan.cn/images/differnoff.jpg" alt="有无--no-ff的区别"></p>
<p>正确的分支管理策略应该是这样的。</p>
<p><img src="http://www.cailidan.cn/images/correctManage.png" alt="图片来自廖雪峰网站git教程"></p>
<p>每个人干自己的活，在自己的分支上工作，别人不受影响也看不到，然后一定时候合并到 dev 分支上，这样大家就可以看到了。然后要到一定的时候发版本再合并到 git 分支上。</p>
<hr>
<h4 id="修复bug分支"><a href="#修复bug分支" class="headerlink" title="修复bug分支"></a><strong>修复bug分支</strong></h4><p>比如我当前在dev分支工作，此时工作还没有完成不能够 merge 到master 分支，但是这个时候发现有一个 bug 需要修复。怎么破呢？</p>
<p>Git 还提供了一个 stash 功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。</p>
<pre><code>git stash //保存现场
git status //发现现场是干净
git checkout master  //切换到 master 分支修复 bug
git checkout -b bug  //在 master 分支上 新建分支 bug
git add bug001.txt
git commit -m &quot;修复bug&quot;  //提交修改
git checkout master    //切换到主分支
git merge --no-ff -m &quot;merged bug&quot; bug  //合并 bug 分支
git branch -d bug  //删除 bug 分支
</code></pre><p>好，这时候我们已经完成了 bug 分支的修改。我们要会到我们的 dev 分支来继续我们没有完成的工作了。进行如下的过程。</p>
<pre><code>git checkout dev 
git status  //nothing to commit
git stash list  //查看现场

git stash apply //恢复现场
git stash drop  //删除 stash
git stash pop  //恢复并且删除 stash

git stash list //再次查看现场
</code></pre><p>过程解释如下：首先我们切换到了 dev 分支。<strong>但是查看 <code>git status</code> 发现却是 <code>nothing to commit</code> ，这是怎么回事呢?</strong>  我们可以利用利用 <code>git stash list</code> 查看下。发现 Git 会列出所有保存起来的现场：</p>
<pre><code>stash@{0}: WIP on dev: 13d436c 
</code></pre><p>工作现场还在， Git 把 stash 内容存在某个地方了，但是需要恢复一下。</p>
<pre><code>git stash apply &lt;现场名称&gt;//恢复现场
git stash drop  //删除 stash
</code></pre><p>其中 <code>git stash apply stash@{0}</code> 的现场名称可以加可以不加，如果你 <code>git stash</code> 了多下，就需要指明了，如果只有一个，就直接 apply 了。 apply 后，保存的现场还在，但是我们是不需要的，所以我们删除它，再使用 <code>git stash drop</code> 即可。这两个命令合在一起可以用 <code>git stash pop</code> 代替。</p>
<p>我们再次使用 <code>git stash list</code> 就会发现没有啦。</p>
<p><strong>所以我们总结下，如果我们要修复 bug，我们可以创建新的bug 分支，然后合并再删除。但如果当前手头工作没有完成时，先要用 <code>git stash</code> 保存现场，然后去修复bug,最后再利用 <code>git stash pop</code> 回到工作现场。</strong></p>
<p><strong>这时候有人会问，那我不能这样吗？ 虽然我在 dev 分支上进行了修改，我切换到 master 分支上去新建 bug 分支不行吗？这样或得到的不是从 master 分支的代码吗？ dev 上的代码又没有提交到 master 分支上。</strong></p>
<p>答案是不行的。应为你在 dev 上的改变，即使切换到 master 分支去新建分支都不行，会把你 dev 上的更改到新建的 bug 分支上。可以试下。我做了实验是这样。</p>
<p>测试的过程中， 我发现了一个好用的命令,比如你新建了一个 bug 分支，这个 bug分支做了修改，但是后来又不想用了，如果直接用普通的<code>git branch -d bug</code> 是删除不了的。要用下面这个命令。</p>
<pre><code>git branch -D &lt;name&gt;
</code></pre><p>特别注意下，我们修补了的 bug 分支，最后不仅要同步到 master 分支，可能还要同步到当前工作的 dev 分支。我们可以起名为 fixbug-* 来命名。这样或许比较清楚。</p>
<p><img src="http://www.cailidan.cn/images/bugcheckout.jpg" alt="fix bug checkout"></p>
<hr>
<h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a><strong>多人协作</strong></h4><p>两个小伙伴 A和B：</p>
<p>A和B 都从远程库中 clone 代码，由于默认 clone 都是 把远程 master 分支和本地 master分支关联了起来，并且名称为 origin。此时 A 和 B 本地都有一个 master 分支，他们都要建立自己的 dev 分支。于是 A 和 B:</p>
<pre><code>git checkout -b dev
</code></pre><p>此时 A 和 B 同事把修改推送到 远程 origin 的 dev 上，如果第一次没有 dev 分支，则会自动建立。</p>
<pre><code>git push origin dev
</code></pre><p>若 A 和 B 同时修改了同一个地方。这时候 A 推送过去， B  再 <code>git push origin dev</code><br> 的时候，会 push 失败，要解决冲突， 所以 B 需要先  <code>git pull</code> , 但此时 <code>git pull</code> 也会失败，原因是没有指定本地 dev 分支与远程 origin/dev 分支的连接。此时我们</p>
<pre><code>git branch --set-upstream dev origin/dev
git pull
git push origin dev
</code></pre><hr>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>到目前为止分支管理就也弄完了。还有一些其他功能，比如打 tag 等等。我觉得不会经常用到的，就不用写在这里了，因为不常用，肯定还会经常忘记，知道有这个东西，以后再来查就行啦。感觉写博客还是很好的。写完这两篇文章，基本上自己的思路就清楚了。以后再遇到问题就来这里面看就好啦。再次感谢<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰老师</a>的文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这一篇文章主要学习和记录分支管理和多人合作。我们知道 Git 的分支管理非常快，这是因为 Git 只是生成一个指向当前版本的指针。但是以前的很多管理软件都是生成一份代码的物理拷贝，可以想象，如果代码很大，是有多慢。但 Git 的这个特点，也需要我们
    
    </summary>
    
      <category term="工具/配置" scheme="http://sevencai.github.io/categories/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="工具/配置" scheme="http://sevencai.github.io/tags/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Git 基础知识重新梳理</title>
    <link href="http://sevencai.github.io/2016/09/20/Git-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E9%87%8D%E6%96%B0%E6%A2%B3%E7%90%86/"/>
    <id>http://sevencai.github.io/2016/09/20/Git-基础知识重新梳理/</id>
    <published>2016-09-20T15:18:31.000Z</published>
    <updated>2016-12-12T02:51:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>以前在学校的时候用git基本上就那几个命令，一般是用于push到github上做备份。比较容易，最近涉及到了git的一些别的用途，多人合作，创建分支等，发现自己有些命令还是不熟悉，需要老是查文档，所以重头开始学习，并做记录方便以后查阅，下面是我的整理。</p>
</blockquote>
<hr>
<h3 id="Git的优点"><a href="#Git的优点" class="headerlink" title="Git的优点"></a><strong>Git的优点</strong></h3><h4 id="集中式-vs-分布式"><a href="#集中式-vs-分布式" class="headerlink" title="集中式 vs 分布式"></a><strong>集中式 vs 分布式</strong></h4><p>集中式版本控制系统，版本库是集中存放在中央服务器，必须联网工作。因此如果是局域网带宽大，尚可。如果是在互联网上，可能会导致花费时间长。</p>
<p>分布式版本控制系统，每个人电脑里都有完整的版本库， 安全性高，一个人电脑坏了，可以复制别的人的即可。不需要联网工作。a和b改了相同的文件，互相推送到对方的电脑，就可以看到修改的内容。</p>
<p><img src="http://www.cailidan.cn/images/svnvsgit.png.jpg" alt="集中式 vs 分布式"></p>
<blockquote>
<p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。           –from <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374027586935cf69c53637d8458c9aec27dd546a6cd6000" target="_blank" rel="noopener">廖雪峰的git网站</a></p>
</blockquote>
<p>那这个时候有人会问，包括我自己最开始也觉得奇怪：</p>
<p>分布式的版本控系统如果要在多个人之间协作不也是需要一个像github一样的的远程版本库吗，这与集中式的有什么区别呢？</p>
<p><strong>区别在于，Git不仅包含代码库还包含了历史库，你每一次clone代码都是一个完整的和中央仓库一模一样的库。意味着你本地与中央仓库一样都有所有的提交修改记录。而SVN的只有代码库是在本地，其历史库实在中央仓库，因此每次当我们提交和比对代码的时候都要连接中央仓库才可以。这也是我们为什么说Git不需要联网的一个原因。</strong></p>
<p>所以主要差别就在于历史版本维护的位置。一句话总结就是：<strong>分布式版本控制的每个节点都是完整仓库。这里的每个节点就是我们的终端的意思。</strong></p>
<hr>
<h4 id="Git-原理-工作区和暂存区"><a href="#Git-原理-工作区和暂存区" class="headerlink" title="Git 原理-工作区和暂存区"></a><strong>Git 原理-工作区和暂存区</strong></h4><p>有过一点点认识的童鞋都知道一些基本操作，比如 <code>git add , git commit</code> 为什么我们不一次性进行 commit 操作，反而要执行这么多步呢？ 所以我们一定要了解 Git 工作原理，才能够理解下面的命令的一些意思。</p>
<p><img src="http://www.cailidan.cn/images/gitgongzuoqu.png" alt="git 原理结构"></p>
<p>上面这张图中，我们可以认识到：</p>
<p><strong>工作区可以当成你写代码的地方。</strong></p>
<p>在你通过 <code>git init</code> 命令之后，会在你的文件夹下生成一个 .git 文件，这个我们称之为 git 的版本库。 它不算做工作区，在这个版本库里又包括两个部分，第一个是暂存区 Stage ，第二个是 Git 为我们自动创建的第一个分支  master ，以及指向 master 的一个指针叫 HEAD 。我们一般不要去动这个 .git 文件，否则可能破坏我们的版本库。</p>
<p>那么当我们通过 git add 的时候，其实是把工作区的更改，提交到了暂存区 stage, 然后我们再通过 git commit 提交到 master 主分支。</p>
<p>通过下面一张图，我们可以看的更清楚。</p>
<p><img src="http://www.cailidan.cn/images/gitwork.png" alt="git 原理结构-学习并改自from 廖雪峰"></p>
<hr>
<h3 id="仓库-版本库-Repository"><a href="#仓库-版本库-Repository" class="headerlink" title="仓库/版本库-Repository"></a>仓库/版本库-Repository</h3><h4 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a><strong>创建版本库</strong></h4><p>如何创建版本库？</p>
<pre><code>//初始化一个git仓库
git init
//添加文件到git仓库,可多次使用
git add &lt;file1&gt;
git add &lt;file2&gt;
git commit -m &quot;说明&quot;
//掌握仓库当前的状态
git status
//查看修改内容
git diff &lt;file1&gt;
//提交日志
git log (--pretty=oneline)
</code></pre><p>-m 后面输入的是本次提交的说明,最好有意义。通过 commit 我们可以一次提交很多文件，所以可以 add 多次。</p>
<blockquote>
<p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。 – from <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013743256916071d599b3aed534aaab22a0db6c4e07fd0000" target="_blank" rel="noopener">廖雪峰的git网站</a></p>
</blockquote>
<hr>
<h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a><strong>版本回退</strong></h4><p>上面提到了可以使用 <code>git log</code> 来查看提交日志，我们可以看到</p>
<p><img src="http://www.cailidan.cn/images/gitlog.png" alt="git log"></p>
<p>上面的 commit 后面有一串用 sha1 计算出来的串，就是 commit_id 了。通过这  样一个个 commit_id 就可以看出我们提交历史的一条线了。那如果我们要回退版本怎么办呢？</p>
<p>首先 Git 肯定要知道你要回退到哪个版本，很明显，我们不可能再去根据写 commit_id 来判断，因为这个很长的一串让我们重复是很费脑子的事情。</p>
<p>在 Git 中，我们使用 HEAD 来表示当前的版本， 也就是上面图片里看到的 <code>13d436c4a928e3db2bfd08e15c9a8ce06780da91</code> 这个。 那么上一个版本我们可以使用 HEAD^ , 上上一个用 HEAD^^, 第一百个就是 HEAD~100 。</p>
<p>具体的回退的命令，我们使用 <code>git reset</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>
<p>但是此时我们再往前看， 刚刚第一个 HEAD 版本已经不在了， 这可咋办？ </p>
<p>如果我们没有关闭刚刚 <code>git log</code> 的窗口， 是可以的。</p>
<pre><code>//版本号不用写全，git会自动去找
git reset --hard 13d436c4a...
</code></pre><p>那如果我关闭了呢？</p>
<p><img src="http://www.cailidan.cn/images/biaoqing.png" alt="23333"></p>
<p>Git 提供了一个命令记录你的每一次命令.</p>
<pre><code>git reflog
git reset --hard commit_id
</code></pre><p>这下我们再在 <code>git reflog</code> 里面查看，就可以看到第一个版本的 commit_id了，然后我们再用 reset 命令即可。</p>
<p>这里我们看到一个现象， 我们使用 git reset 做版本回退的时候，速度非常快，这是为什么呢？ 因为 Git 在内部有个指向当前版本的HEAD指针，当你回退版本的时候， Git 仅仅是把 HEAD 从指向 了新的 commit_id  并将工作区的文件更新。</p>
<p><img src="http://www.cailidan.cn/images/githead.png.jpg" alt="git head"></p>
<hr>
<h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a><strong>撤销修改</strong></h4><p>可能有下面几种情形：</p>
<ul>
<li>修改了工作区的内容，但是并没有使用 git add 添加到暂存区， 可以使用 <code>git checkout -- file</code> 。这样就直接丢弃工作区的修改。这种情况使用 <code>git status</code> 会看到下面的提示（not staged）的：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Changes not staged for commit:</span><br><span class="line">#   (use "git add &lt;file&gt;..." to update what will be committed)</span><br><span class="line">#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>不但修改了工作区的文件，而且还使用 git add 添加到了暂存区，如果想要丢弃更改两步走。第一步用命令git reset HEAD file，就回到了第一种情况，第二步按第一种情况来操作。</p>
<p>  git reset HEAD file<br>  git checkout –file</p>
</li>
</ul>
<p>这种情况使用 <code>git status</code> 会看到下面的提示(to be committed)的：</p>
<pre><code># Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
</code></pre><ul>
<li>如果已经 <code>git commit</code> 了，也就是已经提交到了 master 分支上，那么应该庆幸还没有 push 到远程，这时候我们利用我们上面一个小节提到的撤销版本即可。 如果已经 push 了的话，就没办法喽 。。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a><strong>删除文件</strong></h4><p>如果我们执行下面的操作：</p>
<pre><code>git add test.txt
git commit -m &quot;add test.txt&quot;
rm test.txt
</code></pre><p>意思比较明白，就是我们将 test.txt 添加到了 master 分支，但是我们后来不想要这个文件，就删除了。于是你利用 <code>git status</code> 就会发现如下的信息：</p>
<pre><code># Changes not staged for commit:
#   (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       deleted:    test.txt
#
</code></pre><p>告诉我们已经删除了 test.txt ，要做修改了。我们可以用下面的命令来改变我们的更改：</p>
<pre><code>git add test.txt
git rm test.txt
git commit -m &quot;delete test.txt&quot;
</code></pre><p>那如果我们执行了 <code>rm test.txt</code> 之后，发现我们实际还是想要这个文件的怎么办呢？ 没关系，因为我们版本库里面确实是有这个文件的啊。所以我们利用：</p>
<pre><code>git checkout -- test.txt
</code></pre><p>即可恢复到我们最新版本了。<code>git checkout</code> 非常好用，注意一定要加 <code>--</code>  因为如果不加就是切换分支了。它其实就是<strong>利用版本库里面的版本替换工作区的版本</strong>，这样不管是添加，修改，删除都可以瞬间恢复。</p>
<hr>
<h3 id="Git-远程操作"><a href="#Git-远程操作" class="headerlink" title="Git  远程操作"></a><strong>Git  远程操作</strong></h3><h4 id="关联并向远程推送分支"><a href="#关联并向远程推送分支" class="headerlink" title="关联并向远程推送分支"></a><strong>关联并向远程推送分支</strong></h4><p>通过以下命令，我们可以关联本地库和远程库并且推送分支。</p>
<pre><code>//关联库
git remote add origin git@server-name:path/repo-name.git
//将本地分支 master  推送到远程分支
git push -u origin master
</code></pre><p>注意，这里的 orgin 代表的就是远程仓库的名字， Git 默认这么做，如果改成别的当然也是可以的啦。</p>
<p>然后就是这里的 -u 是什么意思呢？ </p>
<blockquote>
<p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。–from 廖雪峰</p>
</blockquote>
<p>好，那我们以后如果再推送还要做写什么呢？</p>
<pre><code>git push origin master
</code></pre><p>以后每次推送就用这个就可以了。就不需要做     <code>remote add</code> 了。</p>
<p>这里要强调一下，有很多人都是看着这么用，就这么用了，但是<strong>不知道 origin master 分别代表的什么意思</strong>，就导致以后比如我要把本地的 develope 分支和远程的 master 分支推送怎么写呢？所以强调如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>
<p><strong>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。如果不同名字，我们可以用下面的命令使之关联</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream master origin/next</span><br></pre></td></tr></table></figure>
<p>上面命令指定 <code>master</code> 分支追踪 <code>origin/next</code> 分支。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p>上面的简写命令就表示的是：将本地的master分支推送到origin主机的master分支。<strong>如果后者不存在，则会被新建。</strong></p>
<p>千万要注意的是，上面的命令是省略了远程分支名，这是因为一般我们可以认为远程分支和本地分支名相同的原因。那如果我们省略了本地分支名呢？</p>
<pre><code>//删除 origin 主机上的 master 分支
git push origin :master
# 等同于
git push origin --delete master
</code></pre><p><strong>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</strong>是不是很可怕。。所以一定要注意了。你还可能见过下面三种用法：</p>
<pre><code>//将当前分支推送到origin主机的对应分支
git push origin
git push
git push -u origin master
git push --all origin
git push --force origin 
</code></pre><p><code>git push origin</code> 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>
<p><code>git push</code> 如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>
<p><code>git push -u origin master</code> 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。(此命令表示将master分支推送到origin主机的master分支，同时指定了 orgin 为默认分支，以后可以直接使用 <code>git push</code> 了。)</p>
<p><code>git push --all origin</code> 表示将所有本地分支都推送到origin主机。如果你远程主机上的版本比本地的要新，你可以使用 <code>git push --force origin</code> 这样导致远程主机上更新的版本被覆盖。所以要慎用。</p>
<hr>
<h3 id="git-clone-pull-fetch-remote"><a href="#git-clone-pull-fetch-remote" class="headerlink" title="git clone/pull/fetch/remote"></a><strong>git clone/pull/fetch/remote</strong></h3><p>刚刚讲了最重要的 <code>git push</code> 我们下面来看看稍微简单一点的 其他命令。</p>
<hr>
<h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a><strong>git clone</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;版本库的网址&gt;</span><br><span class="line">git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure>
<p>后面的网址有很多情况，比如以 http, https, ssh, ftp等等。其中 Git 协议的下载速度会稍微快一些，然后 SSH就是要认证了。</p>
<pre><code>git clone https://github.com/Christine95/Blog.git
git clone git@github.com:Christine95/Blog.git

git clone git@github.com:Christine95/Blog.git myBlog

git clone -o Blog https://github.com/Christine95/Blog.git
</code></pre><p>如果不指定后面的本地目录名(myBlog)的话，就是与远程库相同的名字。</p>
<p>如果不指定 -o 选项，我们通过 <code>git remote -v</code> 查询时，就是名字默认为 origin, 指定就是刚刚的 Blog 啦。</p>
<hr>
<h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><strong>git remote</strong></h4><pre><code>//只有名字
git remote
//有名字有路径
git remote -v
//远程主机详情
git remote show &lt;主机名&gt;
//添加远程主机
git remote add &lt;主机名&gt; &lt;网址&gt;
//删除远程主机
git remote rm &lt;主机名&gt;
//重命名
git remote rename &lt;原主机名&gt; &lt;新主机名&gt;
</code></pre><p>我感觉这个就没啥说的了。经常用就好了。</p>
<hr>
<h4 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a><strong>git fetch</strong></h4><p>当我们远程主机有了更新后，可以使用 <code>git fetch</code> 取回这些更新至本地。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure>
<p><code>git fetch</code> 表示将某个远程主机的更新，全部取回本地。<br><code>git fetch origin develope</code> 表示只更新远程主机的 develope 分支。</p>
<p>注意：取回了更新后，必须用”远程主机名/分支名”的形式读取。如我们上面的例子，就必须用 <code>origin/develope</code> 读取。比如：</p>
<pre><code>git branch -r 
//会得到类似：
origin/HEAD -&gt; origin/master
origin/develope
origin/html
origin/master
origin/test_d002

git branch -a 
//会得到类似：
remotes/origin/HEAD -&gt; origin/master
remotes/origin/develope
remotes/origin/html
remotes/origin/master
remotes/origin/test_d002
</code></pre><p><code>git branch</code> 命令的 -r 选项，可以用来查看远程分支，-a 选项查看所有分支。<br>这里注意： <code>git pull</code> = <code>git fetch</code> + <code>git merge</code></p>
<hr>
<h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><strong>git pull</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>
<p>注意不要和 <code>git push</code> 的&lt;本地&gt;:&lt;远程&gt; 弄混淆了。有例子如下：</p>
<pre><code>//将orgin主机上的next分支取回并和本地master分支合并
git pull origin next:master

//将origin主机的next分支取回并和当前分支合并
git pull origin next

//上面一句命令等于下面两条命令
git fetch origin
git merge origin/next
</code></pre><p>有一个地方需要注意：</p>
<p><strong>当我们使用某些命令的时候，Git会自动在本地分支和远程分支之间，建立一种追踪关系，也就是说关联起来啦。比如你使用 git clone 的时候，会默认将远程主机和本地分支建立相同的名字。比如你克隆的是远程的 develope 分支，那么你本地克隆下来也会是 develope 分支，然后自动追踪 origin/develope分支。</strong></p>
<p>但是，比如说有这样一种情况，我就遇到过，同事让我看一个项目，我很自然的去 clone master 分支了。这个时候发现 master 分支并不对，我应该去 clone develope 分支的。因为同事有些代码在 develope 分支上，不再 master 分支上。这个时候，我当然可以去利用 <code>git pull origin develope master</code>，但是为了方便，我最好这么做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream master origin/develope</span><br></pre></td></tr></table></figure>
<p>这样就把本地的 master 分支和远程的 develope 分支关联啦。这样我们就可以用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin</span><br></pre></td></tr></table></figure></p>
<p>来 pull 代码啦。这样连主机名都省略了。只用告诉从那个远程主机 pull 就可以。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>本来想这一篇文章能总结完的，结果连分支管理都没讲完。还是决定下一篇文章再将啦。要不然篇幅太长，就不适合阅读了。感谢下面两篇文章，让我清晰了很多，也准备小额资助感谢下廖雪峰老师的网站啦，毕竟是花心血写这么好的教程：</p>
<ol>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137621280731812dec22ecc9b44f4b2ca1c680f181a5b000" target="_blank" rel="noopener">廖雪峰的git教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">阮一峰的git文章</a></li>
</ol>
<p>最后贴一张阮一峰老师这个文字里的一幅图，我觉得太棒了。<br><img src="http://cailidan.cn/images/fromruanyifeng.png" alt="总结图片来自阮一峰老师文章"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以前在学校的时候用git基本上就那几个命令，一般是用于push到github上做备份。比较容易，最近涉及到了git的一些别的用途，多人合作，创建分支等，发现自己有些命令还是不熟悉，需要老是查文档，所以重头开始学习，并做记录方便以后查阅，下面是我的整
    
    </summary>
    
      <category term="工具/配置" scheme="http://sevencai.github.io/categories/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="工具/配置" scheme="http://sevencai.github.io/tags/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>fis3基本用法介绍</title>
    <link href="http://sevencai.github.io/2016/08/24/fis3%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://sevencai.github.io/2016/08/24/fis3基本用法介绍/</id>
    <published>2016-08-24T08:21:08.000Z</published>
    <updated>2016-12-12T02:28:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天有这样一个需求，其实是很常见的。一般我们公司都是静态资源放在一个机器上，比如是cdn上。然后内容页面放在另外一个机器上。这样很好的一点是cdn可以做缓存。而且整个分离看起来也比较清楚。</p>
<p>在本地，我用的相对路径比如<code>./images/1.png</code> 或者绝对路径 <code>images/1.png</code> 。这样写第一不统一。第二，我需要把图片，js，css放到cdn上，比如说是：<code>**.qq.com</code>上。但是页面又是在另外一个机器上，或者说域名下，所以很明显这个时候不能用相对路径了，只能用url的形式。</p>
<p>那么，我要怎么去改呢？难道手工一个个的去改？那不是很麻烦，而且应该想到公司那么多人，肯定不是用的这种笨一点的方法。一般有用gulp的，有用webpack的。今天我在师傅的建议下去学习了fis的。fis用很少量的配置，就完成了我需要的功能。唯一一点我觉得不好的，就是文档了，文档要是写的更好一点，接地气一点就更好啦。</p>
<hr>
<h3 id="FIS简介"><a href="#FIS简介" class="headerlink" title="FIS简介"></a><strong>FIS简介</strong></h3><blockquote>
<p><code>FIS3</code> 是面向前端的工程构建工具。解决前端工程中性能优化、资源加载（异步、同步、按需、预加载、依赖管理、合并、内嵌）、模块化开发、自动化工具、开发规范、代码部署等问题。</p>
</blockquote>
<p><code>FIS</code>是百度出品的，一般的<code>gulp</code>有的功能，它基本都有。下面有几个<code>fis</code>的几个特点：</p>
<ol>
<li><code>FIS3</code> 的构建<strong>不会修改源码</strong>，而是会通过用户设置，将构建结果输出到指定的目录。</li>
<li><strong>文件指纹</strong>，唯一标识一个文件。在开启强缓存的情况下，如果文件的 URL 不发生变化，无法刷新浏览器缓存。一般都需要通过一些手段来强刷缓存，一种方式是添加时间戳，每次上线更新文件，给这个资源文件的 URL 添加上时间戳。</li>
<li>CssSprite图片合并压缩了静态资源，我们还可以对图片进行合并，来减少请求数量。FIS3 提供了比较简易、使用方便的图片合并工具。<strong>通过配置即可调用此工具并对资源进行合并。FIS3 构建会对 CSS 中，路径带 ?__sprite 的图片进行合并。为了节省编译的时间，分配到 useSprite: true 的 CSS 文件才会被处理。</strong></li>
</ol>
<p>其实这些功能其它的几种方案应该都有，但是fis会更加方便。第一个深深的吸引着我。不改变源码真是太好了。具体原因下文分析。</p>
<hr>
<h3 id="FIS初识"><a href="#FIS初识" class="headerlink" title="FIS初识"></a><strong>FIS初识</strong></h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h4><p>安装必须在全局环境下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g fis3  <span class="comment">//安装</span></span><br><span class="line">fis3 -v  <span class="comment">//查看</span></span><br><span class="line">npm update -g fis3  <span class="comment">//升级</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a><strong>完整例子</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch fis-conf.js  <span class="comment">//生成默认配置文件</span></span><br><span class="line">fis3 release -d ../output    <span class="comment">//构建到上级目录下 ../output可以换成任意path</span></span><br></pre></td></tr></table></figure>
<p>简单的对比下output和源文件中的内容，可以发现不同，资源路径已经被换了。可以利用diffmerge工具来看。下面来自文档中的一个图片。</p>
<p><img src="http://fis.baidu.com/fis3/docs/beginning/img/demo-uri-html-diff_cc9e2f5.png" alt="比较图片"></p>
<p>我们可以很明显看到相对路径已经被替换成了绝对路径。再加深一点，如何压缩js,css呢？我们只需要调用它内置的插件就可以了。</p>
<p>fis通过正则匹配文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/ 清除其他配置，只保留如下配置</span><br><span class="line">fis.match(<span class="string">'*.js'</span>, &#123;</span><br><span class="line">  <span class="comment">// fis-optimizer-uglify-js 插件进行压缩，已内置</span></span><br><span class="line">  optimizer: fis.plugin(<span class="string">'uglify-js'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fis.match(<span class="string">'*.css'</span>, &#123;</span><br><span class="line">  <span class="comment">// fis-optimizer-clean-css 插件进行压缩，已内置</span></span><br><span class="line">  optimizer: fis.plugin(<span class="string">'clean-css'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fis.match(<span class="string">'*.png'</span>, &#123;</span><br><span class="line">  <span class="comment">// fis-optimizer-png-compressor 插件进行压缩，已内置</span></span><br><span class="line">  optimizer: fis.plugin(<span class="string">'png-compressor'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>那么怎么解决我们开头说的那个问题呢？很简单，我们加一个release和url：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fis.match(<span class="string">'*'</span>, &#123;</span><br><span class="line">  useHash: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的 js</span></span><br><span class="line">fis.match(<span class="string">'js/*.js'</span>, &#123;</span><br><span class="line">    <span class="comment">//发布到/static/js/xxx目录下</span></span><br><span class="line">    optimizer: fis.plugin(<span class="string">'uglify-js'</span>),</span><br><span class="line">    release : <span class="string">'/dist/$0'</span>,</span><br><span class="line">    url : <span class="string">'//midas.gtimg.cn/**/dist$0'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的 css</span></span><br><span class="line">fis.match(<span class="string">'css/*.css'</span>, &#123;</span><br><span class="line">    <span class="comment">//发布到/static/css/xxx目录下</span></span><br><span class="line">    optimizer: fis.plugin(<span class="string">'clean-css'</span>),</span><br><span class="line">    release : <span class="string">'/dist/$0'</span>,</span><br><span class="line">    url : <span class="string">'//midas.gtimg.cn/**/dist$0'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>先压缩，在发布到某个dist下去，然后真正发布的时候用某个url替换。这个url就可以换成我们的cdn上的链接。然后我们把压缩后的dist文件对应上传到cdn上去就可以了。</strong> 我们看下最后的结果是不是跟我们想的一样： :)</p>
<p><img src="http://www.cailidan.cn/images/differ.png" alt="differ对比结果"></p>
<p>是不是很简单的配置就完成了？这里可以留一个思考的地方，就是你会发现上面替换都是替换html里面的，那如果css/js里面也有路径要替换，打比方css里面引入了图片路径怎么破呢？</p>
<hr>
<h3 id="FIS其他功能"><a href="#FIS其他功能" class="headerlink" title="FIS其他功能"></a><strong>FIS其他功能</strong></h3><p>刚刚是已一个简单的例子，告诉我们fis的工作很简单的配置就可以完成了。现在我们看看fis还能干什么。</p>
<ol>
<li>压缩文件,图片（资源）</li>
<li>重定向文件目录和url</li>
</ol>
<p>刚刚已经说了上面，下面我们看看还有什么功能：</p>
<hr>
<h4 id="文件指纹"><a href="#文件指纹" class="headerlink" title="文件指纹"></a><strong>文件指纹</strong></h4><blockquote>
<p>文件指纹，唯一标识一个文件。在开启强缓存的情况下，如果文件的 URL 不发生变化，无法刷新浏览器缓存。一般都需要通过一些手段来强刷缓存，一种方式是添加时间戳，每次上线更新文件，给这个资源文件的 URL 添加上时间戳。 <strong>FIS3 选择的是添加 MD5 戳，直接修改文件的 URL，而不是在其后添加 query。</strong></p>
</blockquote>
<p>对 js、css、png 图片引用 URL 添加 md5 戳，配置如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般方法</span></span><br><span class="line">&lt;img src=<span class="string">"a.png?t=12012121"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除其他配置，只剩下如下配置 </span></span><br><span class="line">fis.match(<span class="string">'*.&#123;js,css,png&#125;'</span>, &#123;</span><br><span class="line">  useHash: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行输出</span></span><br><span class="line">fis3 release -d ../output</span><br></pre></td></tr></table></figure>
<p><img src="http://www.cailidan.cn/images/differ2.png" alt="对比结果"></p>
<hr>
<h4 id="CssSprite图片合并"><a href="#CssSprite图片合并" class="headerlink" title="CssSprite图片合并"></a><strong>CssSprite图片合并</strong></h4><blockquote>
<p>压缩了静态资源，我们还可以对图片进行合并，来减少请求数量。</p>
<p>FIS3 提供了比较简易、使用方便的图片合并工具。通过配置即可调用此工具并对资源进行合并。</p>
<p>FIS3 构建会对 CSS 中，路径带 ?__sprite 的图片进行合并。为了节省编译的时间，分配到 useSprite: true 的 CSS 文件才会被处理。</p>
</blockquote>
<p>在上一张对比图片里面是不是有一个多余的style开头的png,那个就是图片合并后的两个文件：</p>
<p>因为我们在css里面：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-class">.list-1</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'./img/list-1.png?__sprite'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.list-2</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'./img/list-2.png?__sprite'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>设置了两个以?__sprite的图片，所以他们会合并了。好方便。当然不以这个结尾的肯定不会合并了。合并的好处当然就是减少请求数量。当然了，fis会自动帮你把精灵图重新定位。所以你会发现你的css会多了下面这些代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">content</span><span class="selector-pseudo">:""</span>;</span><br><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:15px</span>;</span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:15px</span>;</span><br><span class="line"><span class="selector-tag">left</span><span class="selector-pseudo">:-15px</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="关闭默认配置、查看文件属性"><a href="#关闭默认配置、查看文件属性" class="headerlink" title="关闭默认配置、查看文件属性"></a><strong>关闭默认配置、查看文件属性</strong></h4><p>这个时候我们利用重要的指令<code>fis3 inspect</code>可以查看文件分配到的属性，这些属性决定了文件将如何被编译处理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fis3 inspect <span class="comment">//查看文件命中属性的情况</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://www.cailidan.cn/images/inspect.png" alt="查看文件属性"></p>
<p>因为有一些功能是默认开启了，所以我们可以利用开启debug模式，关闭这些：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fis.media(<span class="string">'debug'</span>).match(<span class="string">'*.&#123;js,css,png&#125;'</span>, &#123;</span><br><span class="line">  useHash: <span class="literal">false</span>,</span><br><span class="line">  useSprite: <span class="literal">false</span>,</span><br><span class="line">  optimizer: <span class="literal">null</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>fis3 release debug</code> 启用 <code>media debug</code> 的配置，覆盖上面的配置，把诸多功能关掉。</p>
<hr>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a><strong>调试</strong></h3><p>FIS3 构建后，默认情况下会对资源的 URL 进行修改，改成绝对路径。这时候本地双击打开文件是无法正常工作的。这给开发调试带来了绝大的困惑。</p>
<p>FIS3 内置一个简易 Web Server，可以方便调试构建结果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建时不指定输出目录，即不指定 -d 参数时，构建结果被发送到内置 Web Server 的根目录下。此目录可以通过执行以下命令打开。</span></span><br><span class="line">fis3 server open</span><br><span class="line"></span><br><span class="line"><span class="comment">//不加 -d 参数默认被发布到内置 Web Server的根目录下，当启动服务时访问此目录下的资源。</span></span><br><span class="line">fis3 release</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动本地 Web Server访问http://127.0.0.1:8080</span></span><br><span class="line">fis3 server start</span><br><span class="line"></span><br><span class="line"><span class="comment">//FIS3 支持文件监听</span></span><br><span class="line">fis3 release -w</span><br><span class="line"><span class="comment">//浏览器自动刷新</span></span><br><span class="line">fis3 release -wL</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>上面的内容只是一小部分功能，还有很多其他的功能，比如嵌入资源（import等等），定位资源（从html,css,js中定位分离资源），部署到服务器上，声明依赖能力等等功能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天有这样一个需求，其实是很常见的。一般我们公司都是静态资源放在一个机器上，比如是cdn上。然后内容页面放在另外一个机器上。这样很好的一点是cdn可以做缓存。而且整个分离看起来也比较清楚。&lt;/p&gt;
&lt;p&gt;在本地，我用的相对路径比如&lt;code&gt;./images/1.png&lt;/
    
    </summary>
    
      <category term="工具/配置" scheme="http://sevencai.github.io/categories/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="工具/配置" scheme="http://sevencai.github.io/tags/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>几种清除多余CSS的方法和基本原理</title>
    <link href="http://sevencai.github.io/2016/08/23/%E5%87%A0%E7%A7%8D%E6%B8%85%E9%99%A4%E5%A4%9A%E4%BD%99CSS%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <id>http://sevencai.github.io/2016/08/23/几种清除多余CSS的方法和基本原理/</id>
    <published>2016-08-23T13:09:19.000Z</published>
    <updated>2016-12-12T03:01:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个坑，重构给了重构代码，但是没有分离好，导致我引入了很多无用的css。这些css又引入了很多无用的图片，使整个的非常重而且很无用。我需要想办法把整个无用css都去掉。下面是几种方法。</p>
<hr>
<h4 id="gulp-uncss"><a href="#gulp-uncss" class="headerlink" title="gulp-uncss"></a><strong>gulp-uncss</strong></h4><p><a href="https://github.com/ben-eb/gulp-uncss" target="_blank" rel="noopener">gulp-uncss</a>是一个<code>gulp</code>插件，和普通<code>gulp</code>插件没有区别。先引入<code>gulp</code>。然后利用<code>uncss</code>方法传入需要优化的<code>css</code>所在的页面。注意这里支持本地文件，正则匹配和<code>url</code>匹配。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> uncss = <span class="built_in">require</span>(<span class="string">'gulp-uncss'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'site.css'</span>)</span><br><span class="line">        .pipe(uncss(&#123;</span><br><span class="line">            html: [<span class="string">'index.html'</span>, <span class="string">'posts/**/*.html'</span>, <span class="string">'http://example.com'</span>]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./out'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当然，也可以和其他插件一起用。如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> uncss = <span class="built_in">require</span>(<span class="string">'gulp-uncss'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"><span class="keyword">var</span> nano = <span class="built_in">require</span>(<span class="string">'gulp-cssnano'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'styles/**/*.scss'</span>)</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(concat(<span class="string">'main.css'</span>))</span><br><span class="line">        .pipe(uncss(&#123;</span><br><span class="line">            html: [<span class="string">'index.html'</span>, <span class="string">'posts/**/*.html'</span>, <span class="string">'http://example.com'</span>]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(nano())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./out'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>我觉得很方便，最后项目里就是采用的这个方法。</p>
<hr>
<h4 id="chrome浏览器audits"><a href="#chrome浏览器audits" class="headerlink" title="chrome浏览器audits"></a><strong>chrome浏览器audits</strong></h4><p>利用chrome的自带审计功能。打开chrome浏览器，然后点击Audits审计功能。然后点击run,就可以分析出咱们这个页面可以优化的地方了。</p>
<p><img src="http://www.cailidan.cn/images/audit2.png" alt="图片指示"></p>
<p>但是这有一个缺陷，就是它只能找到你的有多少样式是不需要的，不能够自动把清理后的css给你。你还是需要手动去你的文件里对比，然后删除。对于比较少的可以这么用。要是本来就有很多很多无用的，那么就很不好使了。这个时候，火狐出来了。</p>
<hr>
<h4 id="firefox浏览器css-usage"><a href="#firefox浏览器css-usage" class="headerlink" title="firefox浏览器css usage"></a><strong>firefox浏览器css usage</strong></h4><p>下载css usage这个火狐插件并安装，地址在<a href="https://addons.mozilla.org/en-US/firefox/addon/css-usage/" target="_blank" rel="noopener"> https://addons.mozilla.org/en-US/firefox/addon/css-usage/</a>。然后f12,切到<code>CSS Usage</code> 选项卡<br>点击 scan 按钮，稍后会分析出哪些<code>css</code>规则未使用。然后点击 <code>export cleaned css</code> 按钮，导出清理好的<code>css</code>文件，将在新页面打开新的<code>css</code>源文件。即可。是不是很方便。步骤是<code>(Scan-&gt;Clear-&gt;AutoScan)</code>。</p>
<p>Scan: 通过字面意思我们就能知道,这是一个扫描当前页面的工具,如果我们的站点只有一个页面或者几个页面,我们可以通过使用此功能按键来查看页面的css实用情况.</p>
<p>Clear: 清除扫描结果,但我们查看完网页,并对CSS 进行了修改后,我们就不需要以前的扫描结果了,那么我们就可以使用Clear功能键,清除以前的扫描结果缓存,重新开始我们的扫描.</p>
<p>AutoScan: 我们的网站可能会有很多的页面,更有可能有很多的弹出层,如果我们每次都点击扫描的话,会占用我们大量的时间,AutoScan功能键可以使我们的扫描工作更自动化,提高我们的工作效率.</p>
<hr>
<h4 id="tidycss-nodejs插件"><a href="#tidycss-nodejs插件" class="headerlink" title="tidycss-nodejs插件"></a><strong>tidycss-nodejs插件</strong></h4><blockquote>
<p>经常看到有童鞋问，有没有什么工具能快速分析出站点的CSS冗余，于是就有了这个项目。本质上，这个工具是为了解决我们 腾讯课堂 在多人开发与快速迭代下的CSS冗余问题，为代码Review提供可行的工具。-from tidycss github</p>
</blockquote>
<p>install tidycss后，使用nodejs运行，之后并会生成报表。基本原理思想跟上面几个都差不多。源码也是利用selector。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tidy = <span class="built_in">require</span>(<span class="string">'tidycss'</span>);</span><br><span class="line"></span><br><span class="line">tidy(</span><br><span class="line">    <span class="comment">// 你要检测冗余的url</span></span><br><span class="line">    <span class="string">'http://ke.qq.com'</span>,</span><br><span class="line">    <span class="comment">// 可选参数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 不对common.xxxx.css检测冗余，因为这个是站点公共文件</span></span><br><span class="line">        ignore: <span class="regexp">/common\..*\.css/</span>,</span><br><span class="line">        <span class="comment">// 忽略的选择器列表, 即这里的选择器是被review后可冗余项，</span></span><br><span class="line">        <span class="comment">// 比如有通过javascript动态生成的DOM树</span></span><br><span class="line">        unchecks: [<span class="string">'.mod-nav__course-all span:hover'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="可能的坑"><a href="#可能的坑" class="headerlink" title="可能的坑"></a><strong>可能的坑</strong></h4><p><strong>这中间可能就是要尽量的把用到的css功能都拉出来。比如有一个模块，是我点击按钮才能出现列表。那么如果你不点击按钮，这些插件就获取不到列表这些css对应的dom，也就会认为这些css选择器是无用的。就会把这些选择器给删掉。那么真正的你是缺少这些css的。</strong>这个可能结合后面基本原理理解会更清楚。</p>
<hr>
<h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a><strong>基本原理</strong></h4><p>那么这些工具是如何做到识别没有使用过的css呢？</p>
<p><strong>一个 css 选择器是无效的，也就是说我们是无法通过这个css选择器找到dom元素。所以，我们可以使用querySelector判断改css选择器对应的dom是否为空。从而知道哪些是没有使用的。</strong></p>
<p>其实上面这个gulp的插件gulp-uncss是利用的另外一个别人写好的模块uncss,只不过把它打包成了gulp的插件格式。</p>
<p>我去看了下它的（uncss）源码，基本上就是上面那个思想，找出unused的selector,找出used过了的selector。然后看了下别人写的代码，就觉得还要好好努力，差的太多。下面放出核心代码，方便以后我经常学习。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise = <span class="built_in">require</span>(<span class="string">'bluebird'</span>),</span><br><span class="line">    phantom = <span class="built_in">require</span>(<span class="string">'./phantom.js'</span>),</span><br><span class="line">    postcss = <span class="built_in">require</span>(<span class="string">'postcss'</span>),</span><br><span class="line">    _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* Some styles are applied only with user interaction, and therefore its</span></span><br><span class="line"><span class="comment"> *   selectors cannot be used with querySelectorAll.</span></span><br><span class="line"><span class="comment"> * http://www.w3.org/TR/2001/CR-css3-selectors-20011113/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> dePseudify = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ignoredPseudos = [</span><br><span class="line">            <span class="comment">/* link */</span></span><br><span class="line">            <span class="string">':link'</span>, <span class="string">':visited'</span>,</span><br><span class="line">            <span class="comment">/* user action */</span></span><br><span class="line">            <span class="string">':hover'</span>, <span class="string">':active'</span>, <span class="string">':focus'</span>,</span><br><span class="line">            <span class="comment">/* UI element states */</span></span><br><span class="line">            <span class="string">':enabled'</span>, <span class="string">':disabled'</span>, <span class="string">':checked'</span>, <span class="string">':indeterminate'</span>,</span><br><span class="line">            <span class="comment">/* pseudo elements */</span></span><br><span class="line">            <span class="string">'::first-line'</span>, <span class="string">'::first-letter'</span>, <span class="string">'::selection'</span>, <span class="string">'::before'</span>, <span class="string">'::after'</span>,</span><br><span class="line">            <span class="comment">/* pseudo classes */</span></span><br><span class="line">            <span class="string">':target'</span>,</span><br><span class="line">            <span class="comment">/* CSS2 pseudo elements */</span></span><br><span class="line">            <span class="string">':before'</span>, <span class="string">':after'</span>,</span><br><span class="line">            <span class="comment">/* Vendor-specific pseudo-elements:</span></span><br><span class="line"><span class="comment">             * https://developer.mozilla.org/ja/docs/Glossary/Vendor_Prefix</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="string">'::?-(?:moz|ms|webkit|o)-[a-z0-9-]+'</span></span><br><span class="line">        ],</span><br><span class="line">        pseudosRegex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(ignoredPseudos.join(<span class="string">'|'</span>), <span class="string">'g'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> selector.replace(pseudosRegex, <span class="string">''</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Private function used in filterUnusedRules.</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125; selectors      CSS selectors created by the CSS parser</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125; ignore         List of selectors to be ignored</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125; usedSelectors  List of Selectors found in the PhantomJS pages</span></span><br><span class="line"><span class="comment"> * @return &#123;Array&#125;                The selectors matched in the DOMs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterUnusedSelectors</span>(<span class="params">selectors, ignore, usedSelectors</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* There are some selectors not supported for matching, like</span></span><br><span class="line"><span class="comment">     *   :before, :after</span></span><br><span class="line"><span class="comment">     * They should be removed only if the parent is not found.</span></span><br><span class="line"><span class="comment">     * Example: '.clearfix:before' should be removed only if there</span></span><br><span class="line"><span class="comment">     *          is no '.clearfix'</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> selectors.filter(<span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        selector = dePseudify(selector);</span><br><span class="line">        <span class="comment">/* <span class="doctag">TODO:</span> process @-rules */</span></span><br><span class="line">        <span class="keyword">if</span> (selector[<span class="number">0</span>] === <span class="string">'@'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = ignore.length; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (_.isRegExp(ignore[i]) &amp;&amp; ignore[i].test(selector)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ignore[i] === selector) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> usedSelectors.indexOf(selector) !== <span class="number">-1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find which animations are used</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125; css             The postcss.Root node</span></span><br><span class="line"><span class="comment"> * @return &#123;Array&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsedAnimations</span>(<span class="params">css</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> usedAnimations = [];</span><br><span class="line">    css.walkDecls(<span class="function"><span class="keyword">function</span> (<span class="params">decl</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_.endsWith(decl.prop, <span class="string">'animation-name'</span>)) &#123;</span><br><span class="line">            <span class="comment">/* Multiple animations, separated by comma */</span></span><br><span class="line">            usedAnimations.push.apply(usedAnimations, postcss.list.comma(decl.value));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_.endsWith(decl.prop, <span class="string">'animation'</span>)) &#123;</span><br><span class="line">            <span class="comment">/* Support multiple animations */</span></span><br><span class="line">            postcss.list.comma(decl.value).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">anim</span>) </span>&#123;</span><br><span class="line">                <span class="comment">/* If declared as animation, it should be in the form 'name Xs etc..' */</span></span><br><span class="line">                usedAnimations.push(postcss.list.space(anim)[<span class="number">0</span>]);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> usedAnimations;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter @keyframes that are not used</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125; css             The postcss.Root node</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125;  animations</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125;  unusedRules</span></span><br><span class="line"><span class="comment"> * @return &#123;Array&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterKeyframes</span>(<span class="params">css, animations, unusedRules</span>) </span>&#123;</span><br><span class="line">    css.walkAtRules(<span class="regexp">/keyframes$/</span>, <span class="function"><span class="keyword">function</span> (<span class="params">atRule</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (animations.indexOf(atRule.params) === <span class="number">-1</span>) &#123;</span><br><span class="line">            unusedRules.push(atRule);</span><br><span class="line">            atRule.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter rules with no selectors remaining</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125; css             The postcss.Root node</span></span><br><span class="line"><span class="comment"> * @return &#123;Array&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterEmptyAtRules</span>(<span class="params">css</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* Filter media queries with no remaining rules */</span></span><br><span class="line">    css.walkAtRules(<span class="function"><span class="keyword">function</span> (<span class="params">atRule</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (atRule.name === <span class="string">'media'</span> &amp;&amp; atRule.nodes.length === <span class="number">0</span>) &#123;</span><br><span class="line">            atRule.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find which selectors are used in &#123;pages&#125;</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125;    pages         List of PhantomJS pages</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125;   css           The postcss.Root node</span></span><br><span class="line"><span class="comment"> * @return &#123;promise&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsedSelectors</span>(<span class="params">page, css</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> usedSelectors = [];</span><br><span class="line">    css.walkRules(<span class="function"><span class="keyword">function</span> (<span class="params">rule</span>) </span>&#123;</span><br><span class="line">        usedSelectors = _.concat(usedSelectors, rule.selectors.map(dePseudify));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Can this be written in a more straightforward fashion?</span></span><br><span class="line">    <span class="keyword">return</span> promise.map(usedSelectors, <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> selector;</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phantom.findAll(page, selector);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get all the selectors mentioned in &#123;css&#125;</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125; css        The postcss.Root node</span></span><br><span class="line"><span class="comment"> * @return &#123;Array&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllSelectors</span>(<span class="params">css</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> selectors = [];</span><br><span class="line">    css.walkRules(<span class="function"><span class="keyword">function</span> (<span class="params">rule</span>) </span>&#123;</span><br><span class="line">        selectors = _.concat(selectors, rule.selector);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> selectors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove css rules not used in the dom</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125;  pages           List of PhantomJS pages</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125; css             The postcss.Root node</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125;  ignore          List of selectors to be ignored</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125;  usedSelectors   List of selectors that are found in &#123;pages&#125;</span></span><br><span class="line"><span class="comment"> * @return &#123;Object&#125;                 A css_parse-compatible stylesheet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterUnusedRules</span>(<span class="params">pages, css, ignore, usedSelectors</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ignoreNextRule = <span class="literal">false</span>,</span><br><span class="line">        unusedRules = [],</span><br><span class="line">        unusedRuleSelectors,</span><br><span class="line">        usedRuleSelectors;</span><br><span class="line">    <span class="comment">/* Rule format:</span></span><br><span class="line"><span class="comment">     *  &#123; selectors: [ '...', '...' ],</span></span><br><span class="line"><span class="comment">     *    declarations: [ &#123; property: '...', value: '...' &#125; ]</span></span><br><span class="line"><span class="comment">     *  &#125;,.</span></span><br><span class="line"><span class="comment">     * Two steps: filter the unused selectors for each rule,</span></span><br><span class="line"><span class="comment">     *            filter the rules with no selectors</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ignoreNextRule = <span class="literal">false</span>;</span><br><span class="line">    css.walk(<span class="function"><span class="keyword">function</span> (<span class="params">rule</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rule.type === <span class="string">'comment'</span>) &#123;</span><br><span class="line">            <span class="comment">// ignore next rule while using comment `/* uncss:ignore */`</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/^!?\s?uncss:ignore\s?$/</span>.test(rule.text)) &#123;</span><br><span class="line">                ignoreNextRule = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rule.type === <span class="string">'rule'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rule.parent.type === <span class="string">'atrule'</span> &amp;&amp; _.endsWith(rule.parent.name, <span class="string">'keyframes'</span>)) &#123;</span><br><span class="line">                <span class="comment">// Don't remove animation keyframes that have selector names of '30%' or 'to'</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ignoreNextRule) &#123;</span><br><span class="line">                ignoreNextRule = <span class="literal">false</span>;</span><br><span class="line">                ignore = ignore.concat(rule.selectors);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            usedRuleSelectors = filterUnusedSelectors(</span><br><span class="line">                rule.selectors,</span><br><span class="line">                ignore,</span><br><span class="line">                usedSelectors</span><br><span class="line">            );</span><br><span class="line">            unusedRuleSelectors = rule.selectors.filter(<span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> usedRuleSelectors.indexOf(selector) &lt; <span class="number">0</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (unusedRuleSelectors &amp;&amp; unusedRuleSelectors.length) &#123;</span><br><span class="line">                unusedRules.push(&#123;</span><br><span class="line">                    type: <span class="string">'rule'</span>,</span><br><span class="line">                    selectors: unusedRuleSelectors,</span><br><span class="line">                    position: rule.source</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (usedRuleSelectors.length === <span class="number">0</span>) &#123;</span><br><span class="line">                rule.remove();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rule.selectors = usedRuleSelectors;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Filter the @media rules with no rules */</span></span><br><span class="line">    filterEmptyAtRules(css);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Filter unused @keyframes */</span></span><br><span class="line">    filterKeyframes(css, getUsedAnimations(css), unusedRules);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> css;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main exposed function</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125;   pages      List of PhantomJS pages</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125;  css        The postcss.Root node</span></span><br><span class="line"><span class="comment"> * @param  &#123;Array&#125;   ignore     List of selectors to be ignored</span></span><br><span class="line"><span class="comment"> * @return &#123;promise&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">uncss</span>(<span class="params">pages, css, ignore</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> promise.map(pages, <span class="function"><span class="keyword">function</span> (<span class="params">page</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getUsedSelectors(page, css);</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">usedSelectors</span>) </span>&#123;</span><br><span class="line">        usedSelectors = _.flatten(usedSelectors);</span><br><span class="line">        <span class="keyword">var</span> filteredCss = filterUnusedRules(pages, css, ignore, usedSelectors);</span><br><span class="line">        <span class="keyword">var</span> allSelectors = getAllSelectors(css);</span><br><span class="line">        <span class="keyword">return</span> [filteredCss, &#123;</span><br><span class="line">            <span class="comment">/* Get the selectors for the report */</span></span><br><span class="line">            all: allSelectors,</span><br><span class="line">            unused: _.difference(allSelectors, usedSelectors),</span><br><span class="line">            used: usedSelectors</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>所以，如果是只是要一个整理后的文件，就用火狐就好。如果是工程化项目，用gulp的插件比较好。主要是整理了几种方法。中间也学到了不少东西，比如审计audits以前就没有关注过。现在知道是分析页面性能的一个好方法了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近遇到一个坑，重构给了重构代码，但是没有分离好，导致我引入了很多无用的css。这些css又引入了很多无用的图片，使整个的非常重而且很无用。我需要想办法把整个无用css都去掉。下面是几种方法。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;gulp-uncss&quot;&gt;&lt;a href=&quot;#g
    
    </summary>
    
      <category term="WEB开发" scheme="http://sevencai.github.io/categories/WEB%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Css" scheme="http://sevencai.github.io/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript2015 对象扩展</title>
    <link href="http://sevencai.github.io/2016/08/19/ECMAScript2015-%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95/"/>
    <id>http://sevencai.github.io/2016/08/19/ECMAScript2015-对象扩展/</id>
    <published>2016-08-19T13:34:22.000Z</published>
    <updated>2017-01-17T12:28:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章学习和记录了Object.defineProperty的用法，主要是对属性的扩展定义。这次学习三个API，是关于对象操作的三个扩展。</p>
<p>分别是下面三对，具体来讲讲它们的区别和联系以及用法。</p>
<ol>
<li>Object.freeze() / Object.isFrozen()</li>
<li>Object.seal() / Object.isSealed()</li>
<li>Object.preventExtensions() /  Object.isExtensible</li>
</ol>
<hr>
<h4 id="Object-freeze-Object-isFrozen"><a href="#Object-freeze-Object-isFrozen" class="headerlink" title="Object.freeze() / Object.isFrozen()"></a><strong>Object.freeze() / Object.isFrozen()</strong></h4><p>Object.freeze()是这三个里面最高级别。通过Object.freeze(obj)的obj，相当于已经冻结了：<strong>不能添加新的属性，不能修改已有属性的值，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性的对象。</strong></p>
<p><strong>也就是说这个对象不可以变了。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line">obj.c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(obj);</span><br><span class="line"></span><br><span class="line">obj.d = <span class="number">4</span>; <span class="comment">//不会抛出异常</span></span><br><span class="line">obj.d  <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">delete</span> obj.c <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p>
<p>上述我们可以看到，虽然obj被冻结了，但是我们在它上面修改属性的时候，仍然是可以的，只是不会得到正确的值，不抱错。这很明显会对我们整体的代码造成影响，以后排查错误也不方便。所以我们需要定义’use strict’，在严格模式下，就可以报错啦。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="comment">//TypeError: "c" is read-only</span></span><br><span class="line">obj.c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(obj) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p>然后我们可以定义<code>Object.isFrozen</code>来判断是否该对象被冻结了。</p>
<hr>
<h4 id="Object-seal-Object-isSealed"><a href="#Object-seal-Object-isSealed" class="headerlink" title="Object.seal() / Object.isSealed()"></a><strong>Object.seal() / Object.isSealed()</strong></h4><p>密封一个对象，并返回被密封后的对象。密封对象是指那些不能添加新的属性，不能删除已有属性，以及不能修改已有属性的可枚举性、可配置性、可写性，但可以修改已有属性的值的对象。</p>
<p><strong>所以在Object.freeze的基础上，就是可以修改自己已经有了的属性。但是还是不能删除和添加。 也不能修改已有属性的可枚举，可写等特性。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.seal(obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.isSealed(obj); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">obj.c = <span class="number">3</span>; <span class="comment">//不抛出异常</span></span><br><span class="line">obj.c <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">delete</span> obj.b <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//已有属性可以变更值</span></span><br><span class="line">obj.b = <span class="number">3</span>;</span><br><span class="line">obj.b <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//TypeError: can't define property "[object Object]": Object is not extensible</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,a,&#123;</span><br><span class="line">	value : <span class="string">'r'</span>,</span><br><span class="line">	writable : <span class="literal">true</span>,</span><br><span class="line">	configurable : <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>通过上面一些简单的例子，我们可以看到<code>Object.freeze</code>和<code>Object.seal</code>的区别了。<code>Object.freeze</code>更加严格，<code>Object.seal</code>相当于封装好了这个对象，不准多一个，也不准少一个，但是你可以在这个里面更改原来已有的。</p>
<hr>
<h4 id="Object-preventExtensions-Object-isExtensible"><a href="#Object-preventExtensions-Object-isExtensible" class="headerlink" title="Object.preventExtensions / Object.isExtensible"></a><strong>Object.preventExtensions / Object.isExtensible</strong></h4><p>阻止对象扩展，让一个对象变的不可扩展，也就是永远不能再添加新的属性。在没有这个之前，我们定义了一个对象，是可以进行无限制的扩展属性的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line">obj.c = <span class="number">3</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(obj);</span><br><span class="line">obj.d = <span class="number">4</span>; <span class="comment">// 不抛出异常</span></span><br><span class="line">obj.d <span class="comment">// undefined，不能扩展属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(obj); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">obj.a = <span class="string">'a'</span>;</span><br><span class="line">obj.a <span class="comment">// 'a',可以更改已有的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.a <span class="comment">//可以删除已有属性</span></span><br><span class="line">obj.a <span class="comment">//删除后再添加也不行</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>三者有类似的作用，但是用法很不同。可以通过这些API，对对象再进行更严谨的控制。这样代码的健壮性更好了。也更容易让我们发现错误，多人合作的时候也更不容易出错。但一定要记得写严格模式的<code>&#39;use strict&#39;</code>哟。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇文章学习和记录了Object.defineProperty的用法，主要是对属性的扩展定义。这次学习三个API，是关于对象操作的三个扩展。&lt;/p&gt;
&lt;p&gt;分别是下面三对，具体来讲讲它们的区别和联系以及用法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Object.freeze() / O
    
    </summary>
    
      <category term="WEB开发" scheme="http://sevencai.github.io/categories/WEB%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ES6" scheme="http://sevencai.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript Object.defineProperty 属性描述符</title>
    <link href="http://sevencai.github.io/2016/08/19/ECMAScript-Object-defineProperty-%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6/"/>
    <id>http://sevencai.github.io/2016/08/19/ECMAScript-Object-defineProperty-属性描述符/</id>
    <published>2016-08-19T11:14:08.000Z</published>
    <updated>2016-12-12T02:59:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 5 出了一个【属性描述符】，主要是为了【给属性增加更多的控制】。下面我们就谈论这样一个新的特性-<code>Object.defineProperty()</code>。</p>
<blockquote>
<p>Object.defineProperty() <strong>方法直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象</strong>。</p>
</blockquote>
<hr>
<h4 id="语法定义"><a href="#语法定义" class="headerlink" title="语法定义"></a><strong>语法定义</strong></h4><blockquote>
<p>Object.defineProperty(obj, prop, descriptor)</p>
</blockquote>
<ul>
<li>obj : 需要定义属性的对象</li>
<li>prop : 需被定义或修改的属性名</li>
<li>descriptor : 需被定义或修改的属性的描述符</li>
</ul>
<hr>
<h4 id="为什么我们要用这个新特性？"><a href="#为什么我们要用这个新特性？" class="headerlink" title="为什么我们要用这个新特性？"></a><strong>为什么我们要用这个新特性？</strong></h4><p>我们给对象创建属性有下面这样几种方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="comment">//第一种方式</span></span><br><span class="line">person.name = <span class="string">'Seven'</span>;</span><br><span class="line"><span class="comment">//第二种方式</span></span><br><span class="line">person[name] = <span class="string">'Seven'</span>;</span><br><span class="line"><span class="comment">//第三种方式</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value : <span class="string">'Seven'</span></span><br><span class="line">&#125;)</span><br><span class="line">person.name   <span class="comment">//Seven</span></span><br></pre></td></tr></table></figure></p>
<p>看起来好像最后一种新方法最麻烦，那我们为什么还要用最后一种方法呢？因为后面的descriptor可以让我们制定更多对对象属性的策略。</p>
<hr>
<h4 id="descriptor数据描述符-writable"><a href="#descriptor数据描述符-writable" class="headerlink" title="descriptor数据描述符-writable"></a><strong>descriptor数据描述符-writable</strong></h4><p>上面我们提到了更多策略，其实这个更多策略就是让属性可以更多不同的权限，比如让它只能读，不能写。</p>
<blockquote>
<p>当属性特性（property attribute） writable 设置为false时，表示 non-writable，属性不能被修改。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">'sex'</span>&#123;</span><br><span class="line">	value:<span class="string">'girl'</span>,</span><br><span class="line">	writable:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">person.sex <span class="comment">// 'girl'</span></span><br><span class="line">person.sex = <span class="string">'boy'</span></span><br><span class="line">person.sex <span class="comment">//girl</span></span><br></pre></td></tr></table></figure>
<p>当我们设置了descriptor里面的writable为false的时候，这个sex就不可以更改了。虽然你可以设置，但是设置后结果还是girl不会变的。</p>
<p>有人会说，这样不是很不好吗？如果我们在不知情的情况下改写了，连报错都不报。会造成很多bug。很难排查出到底是哪里出了bug。</p>
<p>解决方法是写上<code>use strict</code>。这样就会报错了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义严格模式</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'attr'</span>, &#123;</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line">obj.attr = <span class="number">2</span>;  <span class="comment">// throw exception</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="descriptor数据描述符-enumerable"><a href="#descriptor数据描述符-enumerable" class="headerlink" title="descriptor数据描述符-enumerable"></a><strong>descriptor数据描述符-enumerable</strong></h4><p>上面已经提到了一个<code>writable</code>,表示是否可写。现在在看一个数据描述符<code>enumerable</code>。</p>
<blockquote>
<p>属性特性 enumerable 定义了对象的属性是否可以在 for…in 循环和 Object.keys() 中被枚举。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;</span><br><span class="line">	value : <span class="number">1</span>,</span><br><span class="line">	enumerable:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"b"</span>, &#123;</span><br><span class="line">	value : <span class="number">2</span>, <span class="attr">enumerable</span>:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// enumerable defaults to false</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"c"</span>, &#123;</span><br><span class="line">	value : <span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为true</span></span><br><span class="line">o.d = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> o) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印 'a' 和 'd' (in undefined order)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(o); <span class="comment">// ["a", "d"]</span></span><br><span class="line"></span><br><span class="line">o.propertyIsEnumerable(<span class="string">'a'</span>); <span class="comment">// true</span></span><br><span class="line">o.propertyIsEnumerable(<span class="string">'b'</span>); <span class="comment">// false</span></span><br><span class="line">o.propertyIsEnumerable(<span class="string">'c'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>相当于定义了<code>enumerable</code>后，<code>enumerable</code>可以将其“藏”起来，不被循环看见。</p>
<p><strong>那么属性描述符可以修改吗？比如原来我设置了writable为false,我现在想改变了。那我可以更改吗？这就又有一个专门的属性描述符。</strong></p>
<hr>
<h4 id="descriptor数据描述符-configurable"><a href="#descriptor数据描述符-configurable" class="headerlink" title="descriptor数据描述符-configurable"></a><strong>descriptor数据描述符-configurable</strong></h4><blockquote>
<p>如果属性已经存在，Object.defineProperty()将尝试根据描述符中的值以及对象当前的配置来修改这个属性。如果描述符的 configurable 特性为false（即该特性为non-configurable），那么除了 writable 外，其他特性都不能被修改，并且数据和存取描述符也不能相互切换。</p>
<p><strong>如果一个属性的 configurable 为 false，则其 writable 特性也只能修改为 false。</strong></p>
<p>如果尝试修改 non-configurable 属性特性（除 writable 以外），将会产生一个TypeError 异常，除非当前值与修改值相同。</p>
</blockquote>
<p><strong>configurable 特性表示对象的属性是否可以被删除，以及除 writable 特性外的其他特性是否可以被修改。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'attr'</span>, &#123;</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'attr'</span>, &#123;</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">obj.attr = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>因为configurable是true，所以writable可以更改。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;</span><br><span class="line">	get : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;,</span><br><span class="line">    configurable : <span class="literal">false</span></span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为上面已经对a属性定义了configurable为false,所以下面的都是错误的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// throws a TypeError</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;</span><br><span class="line">	configurable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// throws a TypeError</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;</span><br><span class="line">	enumerable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// throws a TypeError (set was undefined previously)</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;</span><br><span class="line">	set : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// throws a TypeError (even though the new get does exactly the same thing)</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;</span><br><span class="line">	get : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// throws a TypeError</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;</span><br><span class="line">	value : <span class="number">12</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// logs 1</span></span><br><span class="line"><span class="keyword">delete</span> o.a; <span class="comment">// Nothing happens</span></span><br><span class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// logs 1</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="存取描述符"><a href="#存取描述符" class="headerlink" title="存取描述符"></a><strong>存取描述符</strong></h4><p>上面介绍的是数据描述符，现在介绍下存取描述符。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'attr'</span>, &#123;</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="keyword">this</span>._attr = <span class="built_in">Math</span>.max(<span class="number">0</span>, val); &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>._attr; &#125;</span><br><span class="line">&#125;);</span><br><span class="line">obj.attr = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.attr); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<p><strong>就是说我们可以利用get/set来对属性进行一定的控制和更改。我们最后通过obj.attr得到的值其实就是通过get返回的值。而我们通过obj.attr = value，设置的值其实就是set的值。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'I alway return this string,whatever you have assigned'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myname = <span class="string">'this is my name string'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TestDefineSetAndGet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">'myproperty'</span>, pattern);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> TestDefineSetAndGet();</span><br><span class="line">instance.myproperty = <span class="string">'test'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'I alway return this string,whatever you have assigned'</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.myproperty);</span><br><span class="line"><span class="comment">// 'this is my name string'</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.myname);</span><br></pre></td></tr></table></figure>
<p>上面一个例子是从mdn上面学习到的，仔细看，如果能看明白，应该就能明白这个set/get的用法了。</p>
<hr>
<h4 id="获取对象描述符"><a href="#获取对象描述符" class="headerlink" title="获取对象描述符"></a><strong>获取对象描述符</strong></h4><p><code>Object.getOwnPropertyDescriptor</code> 可以帮助我们获得对象描述符。比如我们定义：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, attr, &#123;</span><br><span class="line">	value : <span class="string">'a'</span>,</span><br><span class="line">	writable : <span class="literal">false</span>,</span><br><span class="line">	configurable : <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, attr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(descriptor);</span><br></pre></td></tr></table></figure></p>
<p>结果是：<br><code>{ value: &#39;a&#39;, writable: false, enumerable: false, configurable: true }</code>。这是<code>console.log</code> 的结果。<code>console.dir</code> 会显示的很好看。</p>
<hr>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h4><p>数据描述符和存取描述符不能混合使用,否则会报错：<code>TypeError: property descriptors must not specify a value or be writable when a getter or setter has been specified</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"conflict"</span>, &#123;</span><br><span class="line">	value: <span class="string">'a'</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> <span class="string">'b'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="定义多个属性"><a href="#定义多个属性" class="headerlink" title="定义多个属性"></a><strong>定义多个属性</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">  <span class="string">"property1"</span>: &#123;</span><br><span class="line">    value: <span class="literal">true</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"property2"</span>: &#123;</span><br><span class="line">    value: <span class="string">"Hello"</span>,</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// etc. etc.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a><strong>用途</strong></h4><p>这一部分是我觉得最有价值的一部分了。是我在<a href="http://imweb.io/topic/56d40adc0848801a4ba198ce" target="_blank" rel="noopener">这篇</a>文章里看到并学习的。感谢。可以优化对象获取和修改属性的方式。下面我就直接引用这个文章里的描述了。</p>
<p>这个优化对象获取和修改属性方式，是什么意思呢？ 过去我们在设置dom节点transform时是这样的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加入有一个目标节点， 我们想设置其位移时是这样的</span></span><br><span class="line"><span class="keyword">var</span> targetDom = <span class="built_in">document</span>.getElementById(<span class="string">'target'</span>);</span><br><span class="line"><span class="keyword">var</span> transformText = <span class="string">'translateX('</span> + <span class="number">10</span> + <span class="string">'px)'</span>;</span><br><span class="line">targetDom.style.webkitTransform = transformText;</span><br><span class="line">targetDom.style.transform = transformText;</span><br></pre></td></tr></table></figure></p>
<p>通过上面，可以看到如果页面是需要许多动画时，我们这样编写transform属性是十分蛋疼的。</p>
<p>但如果通过Object.defineProperty， 我们则可以<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里只是简单设置下translateX的属性，其他如scale等属性可自己去尝试</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(dom, <span class="string">'translateX'</span>, &#123;</span><br><span class="line">	set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">	    <span class="keyword">var</span> transformText = <span class="string">'translateX('</span> + value + <span class="string">'px)'</span>;</span><br><span class="line">	    dom.style.webkitTransform = transformText;</span><br><span class="line">	    dom.style.transform = transformText;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样再后面调用的时候, 十分简单</span></span><br><span class="line">dom.translateX = <span class="number">10</span>;</span><br><span class="line">dom.translateX = <span class="number">-10</span>;</span><br><span class="line"><span class="comment">//甚至可以拓展设置如scale, originX, translateZ,等各个属性，达到下面的效果</span></span><br><span class="line">dom.scale = <span class="number">1.5</span>;  <span class="comment">//放大1.5倍</span></span><br><span class="line">dom.originX = <span class="number">5</span>;  <span class="comment">//设置中心点X</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>主要就是学习了<code>Object.defineProperty</code>这个新的特性。先前知道这个，但是没有仔细去学习，最近在了解<code>vue</code>的时候，忽然感觉这个要好好学下了。因为这些<code>MVVM</code>大都是通过这个新特性来实现数据绑定的。当然<code>angular</code>不是的，<code>angular</code>是通过脏数据。下面推荐和感谢几篇文章：</p>
<ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">MDN-defineProperty</a></li>
<li><a href="http://heeroluo.net/article/detail/117/es5-property-descriptors" target="_blank" rel="noopener">es5-property-descriptors</a></li>
<li><a href="http://imweb.io/topic/56d40adc0848801a4ba198ce" target="_blank" rel="noopener">IMWEB-不会Object.defineProperty你就out了</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ECMAScript 5 出了一个【属性描述符】，主要是为了【给属性增加更多的控制】。下面我们就谈论这样一个新的特性-&lt;code&gt;Object.defineProperty()&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Object.definePropert
    
    </summary>
    
      <category term="WEB开发" scheme="http://sevencai.github.io/categories/WEB%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ES6" scheme="http://sevencai.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>用Nodejs进行文件上传-下载-浏览-横扫File-System-API</title>
    <link href="http://sevencai.github.io/2016/08/10/%E7%94%A8Nodejs%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E4%B8%8B%E8%BD%BD-%E6%B5%8F%E8%A7%88-%E6%A8%AA%E6%89%ABFile-System-API/"/>
    <id>http://sevencai.github.io/2016/08/10/用Nodejs进行文件上传-下载-浏览-横扫File-System-API/</id>
    <published>2016-08-10T13:36:49.000Z</published>
    <updated>2016-12-12T03:02:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前知道用Nodejs进行上传下载是很容易的，用个formidable就可以了，也就没有去管它，然后昨天晚上有空，就写了个小demo，就发现了自己的一些问题。比如对File System的API不熟悉。用的时候还要去查。尤其是对createReadStream 和 writeReadStream这一类流处理不熟悉，下面是我的整理和学习。基本上是一个完整的demo,有上传，有下载，还有浏览文件。</p>
<hr>
<h3 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a><strong>上传下载</strong></h3><h4 id="关于formidable"><a href="#关于formidable" class="headerlink" title="关于formidable"></a><strong>关于formidable</strong></h4><blockquote>
<p>This module was developed for Transloadit, a service focused on uploading and encoding images and videos. It has been battle-tested against hundreds of GB of file uploads from a large variety of clients and is considered production-ready.</p>
</blockquote>
<p>具体的一些用法，大家可以去<a href="https://github.com/felixge/node-formidable" target="_blank" rel="noopener">这个上面</a>去看,比较简单了。一个官网的小demo如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>),</span><br><span class="line">    http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">    util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (req.url == <span class="string">'/upload'</span> &amp;&amp; req.method.toLowerCase() == <span class="string">'post'</span>) &#123;</span><br><span class="line">    <span class="comment">// parse a file upload</span></span><br><span class="line">    <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</span><br><span class="line"></span><br><span class="line">    form.parse(req, <span class="function"><span class="keyword">function</span>(<span class="params">err, fields, files</span>) </span>&#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;<span class="string">'content-type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">      res.write(<span class="string">'received upload:\n\n'</span>);</span><br><span class="line">      res.end(util.inspect(&#123;<span class="attr">fields</span>: fields, <span class="attr">files</span>: files&#125;));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// show a file upload form</span></span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">'content-type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">  res.end(</span><br><span class="line">    <span class="string">'&lt;form action="/upload" enctype="multipart/form-data" method="post"&gt;'</span>+</span><br><span class="line">    <span class="string">'&lt;input type="text" name="title"&gt;&lt;br&gt;'</span>+</span><br><span class="line">    <span class="string">'&lt;input type="file" name="upload" multiple="multiple"&gt;&lt;br&gt;'</span>+</span><br><span class="line">    <span class="string">'&lt;input type="submit" value="Upload"&gt;'</span>+</span><br><span class="line">    <span class="string">'&lt;/form&gt;'</span></span><br><span class="line">  );</span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>
<p>这就基本已经完成上传的功能了。但是我们可以让它更丰富，我们下面加一下<strong>预览文件并下载</strong>的功能。这里面有几个小知识点先解释下：</p>
<ol>
<li>form上传的时候，必须是<strong>enctype=”multipart/form-data”</strong>这种格式，否则上传不了。</li>
<li>util.inspect是nodejs里面util模块的一个方法。<strong>它可以将任意对象转换 为字符串的方法</strong>。比如这里就是把fields里面和files两个对象合为一个对象，然后再转换为字符串。</li>
<li>util.inherits则是一个实现对象间原型继承 的函数。注意这个是只继承原型里面的。<strong>原来的属性和方法并不会被继承，也就是在function(){this里面生成的不会被继承}，并且继承过来的原型方法也不会被输出。</strong></li>
</ol>
<hr>
<h4 id="预览和下载"><a href="#预览和下载" class="headerlink" title="预览和下载"></a><strong>预览和下载</strong></h4><p>大概做成以后是这个样子的。样子是不是很丑，确实不想管样式，咱们还是注重功能吧。点击upload可以上传文件，点击下面的文件可以直接下载到本地。注意这里要保证文件不重名，我利用的是date。</p>
<p><img src="http://www.cailidan.cn/images/uploadImage.png" alt="预览效果"></p>
<p>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>),</span><br><span class="line">    http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">    util = <span class="built_in">require</span>(<span class="string">'util'</span>),</span><br><span class="line">    fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>),</span><br><span class="line">    querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>),</span><br><span class="line">    url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> urlObj = url.parse(req.url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (urlObj.pathname == <span class="string">'/upload'</span> &amp;&amp; req.method.toLowerCase() == <span class="string">'post'</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</span><br><span class="line">        form.encoding = <span class="string">'utf-8'</span>;</span><br><span class="line">        form.uploadDir = <span class="string">"dir/"</span>;</span><br><span class="line">        form.maxFieldsSize = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">        form.keepExtensions = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields, files</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> name = files.upload.name;</span><br><span class="line">            <span class="keyword">var</span> ext = <span class="regexp">/\.[^\.]+$/</span>.exec(name)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">            fs.renameSync(files.upload.path, <span class="string">"dir\\"</span> + <span class="built_in">Date</span>.parse(date) + ext);</span><br><span class="line"></span><br><span class="line">            res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain;charset=utf-8'</span>&#125;);</span><br><span class="line">            res.write(<span class="string">'received upload: \n\n'</span>);</span><br><span class="line">            res.end(util.inspect(&#123;<span class="attr">fields</span>: fields, <span class="attr">files</span>: files&#125;));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (urlObj.pathname == <span class="string">'/download'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> query = urlObj.query;</span><br><span class="line">        <span class="keyword">var</span> name = querystring.parse(query).name;</span><br><span class="line">        <span class="keyword">var</span> downloadFilePath = <span class="string">"./dir/"</span> + name;</span><br><span class="line">        <span class="keyword">var</span> filesize = fs.readFileSync(downloadFilePath).length;</span><br><span class="line"></span><br><span class="line">        res.setHeader(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment;filename='</span> + name);<span class="comment">//此处是关键</span></span><br><span class="line">        res.setHeader(<span class="string">'Content-Length'</span>, filesize);</span><br><span class="line">        res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/octet-stream'</span>);</span><br><span class="line">        <span class="keyword">var</span> fileStream = fs.createReadStream(downloadFilePath, &#123;<span class="attr">bufferSize</span>: <span class="number">1024</span> * <span class="number">1024</span>&#125;);</span><br><span class="line">        fileStream.pipe(res, &#123;<span class="attr">end</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">'content-type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">        res.end(</span><br><span class="line">            <span class="string">'&lt;form action="/upload" enctype="multipart/form-data" method="post"&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;input type="text" name="title"&gt;&lt;br&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;input type="file" name="upload" multiple="multiple"&gt;&lt;br&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;input type="submit" value="Upload"&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;/form&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;br /&gt;&lt;br /&gt;'</span> + str</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">respond</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">        fs.readdir(<span class="string">'dir/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">            files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">                str += <span class="string">`&lt;a href='/download?name=<span class="subst">$&#123;file&#125;</span>'&gt;<span class="subst">$&#123;file&#125;</span>&lt;/a&gt;&lt;br /&gt;`</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            send(str);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    respond();</span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure></p>
<p>看代码应该很清楚了，<strong>我们这里调用了一个readdir，然后遍历里面的图片，拿到图片的名称，然后当点击的时候，发起请求到download，并传递自己的name,收到以后，我们找到这个图片，然后设置下载需要的相应头就行了。注意下载里面的setHeader是重点。设置的类型是Disposition。</strong></p>
<p>记录一个我犯的错误，成功以后，发现显示信息一直是乱码，我检查了文件都已经被设置成了utf-8,也设置了相应头writehead是utf-8为什么还乱码呢？后来检查，是{‘Content-Type’: ‘text/plain;charset=utf-8’}这里的charset前面的分号写成了逗号，也是无奈，都怪自己粗心。谨记。</p>
<p>下面就开始把其他的关于file的api给梳理一下了。</p>
<hr>
<h3 id="File-System-Api"><a href="#File-System-Api" class="headerlink" title="File System Api"></a><strong>File System Api</strong></h3><h4 id="createReadStream-amp-amp-createWriteStream"><a href="#createReadStream-amp-amp-createWriteStream" class="headerlink" title="createReadStream &amp;&amp; createWriteStream"></a><strong>createReadStream &amp;&amp; createWriteStream</strong></h4><p>一般情况下，我们可以用这两个API来拷贝文件。nodejs文件操作里面没有直接来copy文件的方法。我们可以先用最开始我们的方法，比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = fs.readFileSync(<span class="string">'source'</span>, &#123;<span class="attr">encoding</span>: <span class="string">'utf8'</span>&#125;);</span><br><span class="line">fs.writeFileSync(<span class="string">'destination'</span>, source);</span><br></pre></td></tr></table></figure></p>
<p><strong>但这容易产生一个问题。因为这种方式是一次性把文件的内容全部读进内存里面，一般小一点的文本文件问题不大，但如果是很大的文件，比如音频视频，一般几个G的，这种。就容易使内存爆仓。这个时候我们流的读写方式就很好了。我们可以先读一会，再写一会。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">'tmp/7.js'</span>);</span><br><span class="line"><span class="keyword">var</span> ws = fs.createWriteStream(<span class="string">'tmp/9.js'</span>);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	ws.write(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"end of read"</span>);</span><br><span class="line">	ws.end();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>但很明显，上面这也会有问题，比如我们读的时候速度明显快于写的速度时候，就会可能产生数据丢失或者不完善的现象。所以我们要对这两者的平衡进行一个控制。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rs.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ws.write(chunk) === <span class="literal">false</span>)&#123;</span><br><span class="line">		rs.pause();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">'drain'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	rs.resume();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	ws.end();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>所以我们改成上面这样。但是下面这种写法利用pipe，可以更简洁。pipe完成的就是data和end的工作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.createReadStream(<span class="string">'tmp/5.js'</span>).pipe(fs.createWriteStream(<span class="string">'tmp/10.js'</span>));</span><br></pre></td></tr></table></figure></p>
<p>下面我们看一个这个例子的更详细的例子。这个就是一个拷贝文件的例子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> filePath = <span class="string">"tmp/2.mp3"</span>;</span><br><span class="line"><span class="keyword">var</span> destPath = <span class="string">"tmp/5.mp3"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(filePath);</span><br><span class="line"><span class="keyword">var</span> ws = fs.createWriteStream(destPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件大小</span></span><br><span class="line"><span class="keyword">var</span> stat = fs.statSync(filePath);</span><br><span class="line"><span class="keyword">var</span> totalSize = stat.size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前已读取长度</span></span><br><span class="line"><span class="keyword">var</span> currentLength  = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lastSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	ws.write(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"end of read"</span>);</span><br><span class="line">	ws.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">	currentLength += chunk.length;</span><br><span class="line">	<span class="keyword">if</span>(ws.write(chunk) === <span class="literal">false</span>)&#123;</span><br><span class="line">		rs.pause();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">'drain'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	rs.resume();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	ws.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">displayInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> percent = <span class="built_in">Math</span>.ceil((currentLength / totalSize )*<span class="number">100</span>);</span><br><span class="line">	<span class="keyword">var</span> size = <span class="built_in">Math</span>.ceil(currentLength /<span class="number">1000000</span>);</span><br><span class="line">	<span class="keyword">var</span> diff = size - lastSize;</span><br><span class="line">	lastSize = size;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用了process.stdout输出信息</span></span><br><span class="line">	process.stdout.clearLine();</span><br><span class="line">	process.stdout.cursorTo(<span class="number">0</span>);</span><br><span class="line">	process.stdout.write(<span class="string">`已完成: <span class="subst">$&#123;size&#125;</span>, 百分比: <span class="subst">$&#123;percent&#125;</span>, 速度: <span class="subst">$&#123;diff*<span class="number">2</span>&#125;</span> MB/s `</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(currentLength &lt; totalSize)&#123;</span><br><span class="line">		setTimeout(displayInfo,<span class="number">500</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		clearTimeout(timer);</span><br><span class="line">		<span class="keyword">var</span> endTime = <span class="built_in">Date</span>.now();</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">`共用时:  + <span class="subst">$&#123;(endTime - startTime) <span class="regexp">/ 1000&#125; s `);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">	&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;,500);</span></span></span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://www.cailidan.cn/images/testfs.png" alt="result"><br>这里我们主要处理的就是对文件拷贝细节的处理。这各部分关于百分比和速度这块学习自sf的一篇文章。感谢，文章末尾有该文章的链接。</p>
<p>所以对流处理我们可以理解成下面这个样子：</p>
<p><img src="http://www.cailidan.cn/images/stream.png" alt="stream"></p>
<p>可以想象，如果大水杯也就是stream里面的的水流的太快了，小水杯不久一下就满了，所以多的水就溢出去了。所以我们进行一个控制。水在一点一点的流动，而不是一下子全部倒进去。这就是我理解的流。也不知道对不对。如果错误请指正。<strong>其实真正的可以这么理解：我们读是从文件读到内存，写是从内存写入磁盘的另一个文件。如果我们读的太快，写的太慢，东西是不是都还在内存里面？更有点像你买了东西，但是不消费，家里面就越堆越多了，想法，总会有房子太满放不下的情况，但是如果你买了就消费出去了，这样你的家里就会保持平衡很干净，你也有时间在房子里做别的事情。</strong>所以对于水杯之外，其实还有中间的管子，这个管子就相当于我们这里的内存啦。</p>
<hr>
<h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a><strong>读取文件</strong></h4><p>readFile/readFileSync<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步读取</span></span><br><span class="line">fs.readFile(<span class="string">'./input.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"read file input.txt:"</span> + data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步读取</span></span><br><span class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'./input.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"sync read :"</span> + data.toString());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"after read"</span>);</span><br></pre></td></tr></table></figure></p>
<p>结果很明显，后面同步的先执行，前面的异步会后执行。因为文件的读取也耗费时间。</p>
<pre><code>sync read :this is input txt

after read
read file input.txt:this is input txt
</code></pre><hr>
<h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a><strong>打开文件</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.open(<span class="string">'input.txt'</span>,<span class="string">'r+'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,fd</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"文件打开成功"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="查看文件信息"><a href="#查看文件信息" class="headerlink" title="查看文件信息"></a><strong>查看文件信息</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.stat(<span class="string">'input.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,stats</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">console</span>.log(stats);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a><strong>写入文件</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(<span class="string">'write.txt'</span>,<span class="string">'我是写入文件的内容'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'文件已写入'</span>);</span><br><span class="line">	fs.readFile(<span class="string">'write.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'写入内容为: '</span> + data.toString());</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a><strong>删除文件</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.unlink(<span class="string">'input.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"文件删除成功"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a><strong>创建目录</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fs.mkdir(<span class="string">'tmp/test'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"目录创建成功"</span>);</span><br><span class="line"></span><br><span class="line">	fs.rmdir(<span class="string">'tmp/test'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"删除目录成功"</span>);</span><br><span class="line"></span><br><span class="line">		fs.readdir(<span class="string">'tmp'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">			files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(file);</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<pre><code>目录创建成功
删除目录成功
1.js
2.js
dirtmp 
</code></pre><hr>
<h4 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a><strong>更改权限</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.chmod(<span class="string">'tmp/1.js'</span>, <span class="number">0600</span> ,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err)</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"修改权限成功"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a><strong>文件重命名</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">fs.rename(<span class="string">'tmp/5.js'</span>,<span class="string">'tmp/7.js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"4.js has been renamed"</span>);</span><br><span class="line">	fs.stat(<span class="string">'tmp/7.js'</span>,(err,stat)=&gt;&#123;</span><br><span class="line">		<span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">`stat is : <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(stat)&#125;</span>`</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="创建硬链接"><a href="#创建硬链接" class="headerlink" title="创建硬链接"></a><strong>创建硬链接</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//硬链接就是备份，软连接就是快捷方式</span></span><br><span class="line">fs.link(<span class="string">'tmp/3.js'</span>,<span class="string">'tmp/5.js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err)</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"硬链接创建成功"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.unlink(<span class="string">'tmp/3.js'</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="获取文件绝对路径"><a href="#获取文件绝对路径" class="headerlink" title="获取文件绝对路径"></a><strong>获取文件绝对路径</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.realpath(<span class="string">'tmp/2.js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,resolvedPath</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"文件的绝对路径是:"</span> + resolvedPath);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h4><p>由于利用了异步方法，所以在写的时候一定要注意顺序。比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">fs.rename(<span class="string">'tmp/5.js'</span>,<span class="string">'tmp/7.js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"4.js has been renamed"</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.stat(<span class="string">'tmp/7.js'</span>,(err,stat)=&gt;&#123;</span><br><span class="line">	<span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">`stat is : <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(stat)&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>会得到：</p>
<pre><code>if(err) throw err;
            ^

Error: ENOENT: no such file or directory, stat &apos;F:\uploadNodejs\testFile\tmp\7.js&apos;
at Error (native)
</code></pre><p>我们只需要放进去就可以啦。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>快花了一天去弄这个东西了，先前总说遇到API就去查，但是我有点不同意，因为这样效率会很低。而且会导致变懒惰的后果。还是要多进行刻意的练习，才能有质的飞跃。这是自己所欠缺的。下面推荐几篇文章和阅读，也感谢这些优秀的文章：</p>
<ol>
<li><a href="https://nodejs.org/dist/latest-v6.x/docs/api/fs.html" target="_blank" rel="noopener">Nodejs API /api/fs.html</a></li>
<li><a href="http://my.oschina.net/cmw/blog/110107" target="_blank" rel="noopener">http://my.oschina.net/cmw/blog/110107</a></li>
<li><a href="http://www.runoob.com/nodejs/nodejs-util.html" target="_blank" rel="noopener">http://www.runoob.com/nodejs/nodejs-util.html</a></li>
<li><a href="https://segmentfault.com/a/1190000004057022" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004057022</a>     </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前知道用Nodejs进行上传下载是很容易的，用个formidable就可以了，也就没有去管它，然后昨天晚上有空，就写了个小demo，就发现了自己的一些问题。比如对File System的API不熟悉。用的时候还要去查。尤其是对createReadStream 和 writ
    
    </summary>
    
      <category term="WEB开发" scheme="http://sevencai.github.io/categories/WEB%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Nodejs" scheme="http://sevencai.github.io/tags/Nodejs/"/>
    
  </entry>
  
</feed>
