<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Seven&#39;s Blog</title>
  <subtitle>Share, Learn, Enjoy, Keep</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sevencai.github.io/"/>
  <updated>2019-06-06T08:35:29.000Z</updated>
  <id>http://sevencai.github.io/</id>
  
  <author>
    <name>Seven Cai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack读书笔记-四</title>
    <link href="http://sevencai.github.io/2019/06/05/webpack%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%9B%9B/"/>
    <id>http://sevencai.github.io/2019/06/05/webpack读书笔记-四/</id>
    <published>2019-06-05T13:24:36.000Z</published>
    <updated>2019-06-06T08:35:29.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<p>// TODO:: not finished yet</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;spa
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>5月笔记</title>
    <link href="http://sevencai.github.io/2019/05/27/5%E6%9C%88%E7%AC%94%E8%AE%B0/"/>
    <id>http://sevencai.github.io/2019/05/27/5月笔记/</id>
    <published>2019-05-27T11:56:22.000Z</published>
    <updated>2019-05-28T12:06:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>你今年30岁 那么如果你利用业务时间学英语 那么5年也就是你35岁时 你可能就可以成为一个说英文很流利的人🌹</p>
<p>永远不要被时间限制住自己 尽你自己最大的努力 努力做成你最想做的那件事 成为你最想成为的那种人 过着你最想过的那种生活 💳</p>
<p>也许我们始终都只是一个小人物 但这并不妨碍我们选择用什么样的方式活下去 这个世界永远比你想的要更精彩 📚🌲</p>
</blockquote>
<p>之所以写上面这段鸡汤，完全是为了避免字数太少，导致主页摘要不出现代码行号的情况。请忽略~</p>
<hr>
<h2 id="js对称加密算法"><a href="#js对称加密算法" class="headerlink" title="js对称加密算法"></a>js对称加密算法</h2><p>最近有用到 js 的对称加密的算法来解决一些简单的数据库字段加密问题。简单的 demo 如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aes</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 此处4个参数可以改成由外部传入</span></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.key = <span class="string">'xxxxxx'</span></span><br><span class="line">    <span class="keyword">this</span>.algorithm = <span class="string">'aes256'</span></span><br><span class="line">    <span class="keyword">this</span>.inputEncoding = <span class="string">'utf8'</span></span><br><span class="line">    <span class="keyword">this</span>.outputEncoding = <span class="string">'hex'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * encrypt 加密</span></span><br><span class="line"><span class="comment">   * @param data</span></span><br><span class="line"><span class="comment">   * @returns &#123;string&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  encrypt(data) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; algorithm, inputEncoding, outputEncoding, key &#125; = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cipher = crypto.createCipher(algorithm, key)</span><br><span class="line">    <span class="keyword">let</span> ciphered = cipher.update(data, inputEncoding, outputEncoding)</span><br><span class="line"></span><br><span class="line">    ciphered += cipher.final(outputEncoding)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ciphered</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * descrpt 解密</span></span><br><span class="line"><span class="comment">   * @param ciphered</span></span><br><span class="line"><span class="comment">   * @returns &#123;string&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  descrpt(ciphered) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; algorithm, inputEncoding, outputEncoding, key &#125; = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> decipher = crypto.createDecipher(algorithm, key)</span><br><span class="line">    <span class="keyword">let</span> deciphered = decipher.update(ciphered, outputEncoding, inputEncoding)</span><br><span class="line"></span><br><span class="line">    deciphered += decipher.final(inputEncoding)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deciphered</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Aes</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="使用-xlsx-转换文件"><a href="#使用-xlsx-转换文件" class="headerlink" title="使用 xlsx 转换文件"></a>使用 xlsx 转换文件</h2><p>以下记录下最近使用的xlsx库，使用的目的是解决下面两个问题：</p>
<ol>
<li>将 excel 转换为 CSV（如 /home/seven/201212 -&gt; /home/seven/201212_txt）, 并写入原目录，因为后台不好处理 excel 文件。</li>
<li>用户点击下载按钮，则将数据库中的数据，转换为 excel 并下载到前端。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> XLSX = <span class="built_in">require</span>(<span class="string">'xlsx'</span>)</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExcelUtil</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * excel 表格转换成 txt 文件</span></span><br><span class="line"><span class="comment">   * 注意这里使用 sheet_to_csv 而不是 sheet_to_txt</span></span><br><span class="line"><span class="comment">   * 因为 sheet_to_txt 是转成了 utf16, 在头行会有 bom</span></span><br><span class="line"><span class="comment">   * @param filepath</span></span><br><span class="line"><span class="comment">   * @returns &#123;*&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  transformToCSV(filepath) &#123;</span><br><span class="line">    <span class="comment">// 先判断用户上传的文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(!fs.existsSync(filepath)) &#123;</span><br><span class="line">      <span class="comment">// 处理错误</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 workbook</span></span><br><span class="line">    <span class="keyword">const</span> wb = XLSX.readFile(filepath)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 worksheet</span></span><br><span class="line">    <span class="keyword">const</span> ws = wb.Sheets[wb.SheetNames[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换 worksheet 到 csv 文件</span></span><br><span class="line">    <span class="keyword">let</span> data = XLSX.utils.sheet_to_csv(ws)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得文件名，区别与用户上传的 excel 文件，这里增加 _txt</span></span><br><span class="line">    <span class="keyword">let</span> filename = <span class="string">`<span class="subst">$&#123;filepath&#125;</span>_txt`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入文件,若写入失败，则不能够同步后台发布任务</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fs.writeFileSync(filename, data)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// 处理错误如返回错误的错误码之类的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入成功，返回前端</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ret: <span class="number">0</span>,</span><br><span class="line">      filename: path.basename(filename)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将数据转换为 Excel 表格</span></span><br><span class="line"><span class="comment">   * @param sheetData 表数据</span></span><br><span class="line"><span class="comment">   * @param sheetHeader 表头</span></span><br><span class="line"><span class="comment">   * @param filename 文件名称</span></span><br><span class="line"><span class="comment">   * @param sheetName 表名称</span></span><br><span class="line"><span class="comment">   * @param wscols 列样式</span></span><br><span class="line"><span class="comment">   * @returns &#123;any&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  transformToExcel(sheetData, sheetHeader, filename, sheetName, wscols) &#123;</span><br><span class="line">    <span class="comment">// 添加表头</span></span><br><span class="line">    sheetData.unshift(sheetHeader)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> wb = XLSX.utils.book_new()</span><br><span class="line">    <span class="keyword">let</span> ws = XLSX.utils.json_to_sheet(sheetData, &#123;</span><br><span class="line">      header: <span class="built_in">Object</span>.keys(sheetHeader),</span><br><span class="line">      skipHeader: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置列样式</span></span><br><span class="line">    <span class="keyword">if</span> (wscols) &#123;</span><br><span class="line">      ws[<span class="string">'!cols'</span>] = wscols</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    XLSX.utils.book_append_sheet(wb, ws, sheetName)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> XLSX.write(wb, &#123;</span><br><span class="line">      bookType: filename.split(<span class="string">'.'</span>).pop(),</span><br><span class="line">      bookSST: <span class="literal">false</span>,</span><br><span class="line">      type: <span class="string">'buffer'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除某一行</span></span><br><span class="line"><span class="comment">   * @param ws</span></span><br><span class="line"><span class="comment">   * @param row_index</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  deleteRow(ws, row_index) &#123;</span><br><span class="line">    <span class="keyword">const</span> ec = <span class="function">(<span class="params">r, c</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> XLSX.utils.encode_cell(&#123;<span class="attr">r</span>: r, <span class="attr">c</span>: c&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> range = XLSX.utils.decode_range(ws[<span class="string">"!ref"</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> R = row_index; R &lt; range.e.r; ++R) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> C = range.s.c; C &lt;= range.e.c; ++C) &#123;</span><br><span class="line">        ws[ec(R, C)] = ws[ec(R + <span class="number">1</span>, C)]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    range.e.r--</span><br><span class="line"></span><br><span class="line">    ws[<span class="string">'!ref'</span>] = XLSX.utils.encode_range(range.s, range.e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = ExcelUtil</span><br></pre></td></tr></table></figure>
<p><code>transformToExcel</code>调用方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sheetName = <span class="string">'表名'</span></span><br><span class="line"><span class="keyword">let</span> filename = <span class="string">`<span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>.xlsx`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sheetHeader = &#123;</span><br><span class="line">  ID: <span class="string">'ID'</span>,</span><br><span class="line">  Name: <span class="string">'姓名'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里用来填充数据</span></span><br><span class="line"><span class="keyword">let</span> sheetData = <span class="keyword">await</span> ctx.models.DBUser.findAll(&#123;</span><br><span class="line">  where : &#123;</span><br><span class="line">   xxx : xxx</span><br><span class="line">  &#125;,</span><br><span class="line">  raw: <span class="literal">true</span>,</span><br><span class="line">  attributes: [<span class="string">'ID'</span>, <span class="string">'Name'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> excelUtil = <span class="keyword">new</span> ExcelUtil()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置表宽度</span></span><br><span class="line"><span class="keyword">let</span> wscols = [</span><br><span class="line">  &#123;<span class="attr">wch</span>: <span class="number">28</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">wch</span>: <span class="number">20</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = excelUtil.transformToExcel(sheetData, sheetHeader, filename, sheetName, wscols)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 header 头信息 ，getAttachHeader 省略</span></span><br><span class="line">ctx.set(&#123;</span><br><span class="line">  <span class="string">'Content-disposition'</span>: getAttachHeader(ctx, filename),</span><br><span class="line">  <span class="string">'Content-type'</span>: <span class="string">'application/octet-stream'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回给前端相应的内容</span></span><br><span class="line">ctx.body = data</span><br></pre></td></tr></table></figure></p>
<p>注意要结合前端代码来一起下载。如下，这样用户点击下载的时候，就完成了从数据库到 excel 的过称。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>)</span><br><span class="line"></span><br><span class="line">iframe.style.display = <span class="string">'none'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入Nodejs层的接口</span></span><br><span class="line">iframe.src = url</span><br><span class="line"></span><br><span class="line">iframe.onload = iframe.onerror = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(iframe)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="获得文件-MD5"><a href="#获得文件-MD5" class="headerlink" title="获得文件 MD5"></a>获得文件 MD5</h2><p>目的是防止文件被篡改，主要是使用 crypto 库。传入文件的 buffer。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获得文件的 MD5, 防止文件被篡改</span></span><br><span class="line"><span class="comment">* @param filename</span></span><br><span class="line"><span class="comment">* @returns &#123;string&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> genMd5 = <span class="function"><span class="params">filename</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> buffer</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      buffer = fs.readFileSync(filename)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> fsHash = crypto.createHash(<span class="string">'md5'</span>)</span><br><span class="line">    </span><br><span class="line">    fsHash.update(buffer)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fsHash.digest(<span class="string">'hex'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="sequelize-的-transaction"><a href="#sequelize-的-transaction" class="headerlink" title="sequelize 的 transaction"></a>sequelize 的 transaction</h2><p><img src="transaction.png" alt="transaction"></p>
<p>sequelize 的事务主要有上面两种方式，一个是自行回滚的写法，另一个是手动声明回滚的写法。我用的是自行回滚的方法。<a href="http://docs.sequelizejs.com/manual/transactions.html" target="_blank" rel="noopener">文档</a></p>
<p>自行回滚的方法，需要在开始向<code>sequelize.transaction</code>传入一个 callback。这种时候，不需要再去进行<code>t.commit()</code> or <code>t.rollback()</code>了。当到 catch 内时，会自行回滚。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> sequelize.transaction(<span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// chain all your queries here. make sure you return them.</span></span><br><span class="line">  <span class="keyword">return</span> User.create(&#123;</span><br><span class="line">    firstName: <span class="string">'Abraham'</span>,</span><br><span class="line">    lastName: <span class="string">'Lincoln'</span></span><br><span class="line">  &#125;, &#123;<span class="attr">transaction</span>: t&#125;).then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user.setShooter(&#123;</span><br><span class="line">      firstName: <span class="string">'John'</span>,</span><br><span class="line">      lastName: <span class="string">'Boothe'</span></span><br><span class="line">    &#125;, &#123;<span class="attr">transaction</span>: t&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Transaction has been committed</span></span><br><span class="line">  <span class="comment">// result is whatever the result of the promise chain returned to the transaction callback</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Transaction has been rolled back</span></span><br><span class="line">  <span class="comment">// err is whatever rejected the promise chain returned to the transaction callback</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果你是用的 <code>async await</code> ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> sequelize.transaction(<span class="keyword">async</span> transaction =&gt; &#123;</span><br><span class="line">    <span class="comment">// step 1</span></span><br><span class="line">    <span class="keyword">await</span> Model.destroy(&#123;<span class="attr">where</span>: &#123;id&#125;, transaction&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// step 2</span></span><br><span class="line">    <span class="keyword">await</span> Model.create(&#123;&#125;, &#123;transaction&#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="comment">// 若上面执行过程中出现错误，则会到 catch 中，并且会自动回滚</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果不想使用自动回滚的这种方法，则不向<code>sequelize.transaction()</code>不传入一个 callback。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> sequelize.transaction().then(<span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> User.create(&#123;</span><br><span class="line">    firstName: <span class="string">'Bart'</span>,</span><br><span class="line">    lastName: <span class="string">'Simpson'</span></span><br><span class="line">  &#125;, &#123;<span class="attr">transaction</span>: t&#125;).then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user.addSibling(&#123;</span><br><span class="line">      firstName: <span class="string">'Lisa'</span>,</span><br><span class="line">      lastName: <span class="string">'Simpson'</span></span><br><span class="line">    &#125;, &#123;<span class="attr">transaction</span>: t&#125;);</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.commit();</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.rollback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>如果使用 <code>async await</code> 则：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> transaction;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// get transaction</span></span><br><span class="line">  transaction = <span class="keyword">await</span> sequelize.transaction();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// step 1</span></span><br><span class="line">  <span class="keyword">await</span> Model.destroy(&#123;<span class="attr">where</span>: &#123;id&#125;, transaction&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// step 2</span></span><br><span class="line">  <span class="keyword">await</span> Model.create(&#123;&#125;, &#123;transaction&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// commit</span></span><br><span class="line">  <span class="keyword">await</span> transaction.commit();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="comment">// Rollback transaction if any errors were encountered</span></span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">await</span> transaction.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>很好用~</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>5月就做了一个项目，主要是业务逻辑太复杂了，对数据库里的一个字段都要校验几百行代码。</p>
<p>5月去台湾团建，体验一般般，但也算是走出去看看了。</p>
<p>转眼间19年都快过去一半了。加油⛽️!</p>
<p>剩下的几天把项目分支再都验证下，写测试用例，优化下代码，然后再总结下几个问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;你今年30岁 那么如果你利用业务时间学英语 那么5年也就是你35岁时 你可能就可以成为一个说英文很流利的人🌹&lt;/p&gt;
&lt;p&gt;永远不要被时间限制住自己 尽你自己最大的努力 努力做成你最想做的那件事 成为你最想成为的那种人 过着你最想过的那种生活 �
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack4读书笔记(三)</title>
    <link href="http://sevencai.github.io/2019/05/26/webpack4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>http://sevencai.github.io/2019/05/26/webpack4读书笔记-三/</id>
    <published>2019-05-26T04:57:36.000Z</published>
    <updated>2019-05-29T11:10:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要记录 webpack 的代码分离的几种方式，由此再去理解通过<strong>代码分离</strong>可以做哪些前端优化：如懒加载和预先加载。之后再介绍了几个易混淆的概念。📚</p>
<hr>
<h1 id="webpack-代码分离🌲"><a href="#webpack-代码分离🌲" class="headerlink" title="webpack 代码分离🌲"></a>webpack 代码分离🌲</h1><p>webpack 代码分离可以有以下这几种方式：</p>
<h2 id="1-入口起点-entry-points"><a href="#1-入口起点-entry-points" class="headerlink" title="1. 入口起点(entry points)"></a>1. 入口起点(entry points)</h2><p>这种是在入口文件内配置多个 entry,自然可以生成多个文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    <span class="comment">// 设置的其他入口</span></span><br><span class="line">    another: <span class="string">'./src/another-module.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-使用-SplitChunksPlugin-插件"><a href="#2-使用-SplitChunksPlugin-插件" class="headerlink" title="2. 使用 SplitChunksPlugin 插件"></a>2. 使用 <code>SplitChunksPlugin 插件</code></h2><p>它可以将公共的依赖模块提取到已有的 entry chunk 中，或者提取到一个新生成的 chunk<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    <span class="comment">// splitChunks: &#123;</span></span><br><span class="line">       <span class="comment">// 表明对同步代码和异步代码都做代码分割</span></span><br><span class="line">       <span class="comment">//chunks: 'all'</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'async'</span>,</span><br><span class="line">      minSize: <span class="number">30000</span>,</span><br><span class="line">      maxSize: <span class="number">0</span>,</span><br><span class="line">      minChunks: <span class="number">1</span>,</span><br><span class="line">      maxAsyncRequests: <span class="number">5</span>,</span><br><span class="line">      maxInitialRequests: <span class="number">3</span>,</span><br><span class="line">      automaticNameDelimiter: <span class="string">'~'</span>,</span><br><span class="line">      name: <span class="literal">true</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">          minChunks: <span class="number">2</span>,</span><br><span class="line">          priority: <span class="number">-20</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-使用动态导入方法"><a href="#3-使用动态导入方法" class="headerlink" title="3. 使用动态导入方法"></a>3. 使用动态导入方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'loadash'*/</span> <span class="string">'lodash'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">&#123;defalut: _&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    </span><br><span class="line">    dom.innerText = _.join([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">'+'</span>)</span><br><span class="line">    <span class="keyword">return</span> dom</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者用 async await</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">default</span>: _ &#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'lodash'*/</span> <span class="string">'lodash'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  </span><br><span class="line">  dom.innerText = _.join([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">'+'</span>)</span><br><span class="line">  <span class="keyword">return</span> dom</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后再进行调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  getComponent().then(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.apendChild(ele)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样，就只有在调用 renderComponent 时，才会去加载lodash这个模块，并且lodash模块会单独被拆分出来</span></span><br><span class="line">renderComponent()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>import() 调用会在内部用到 promises。如果在旧版本浏览器中使用 import()，记得使用一个 polyfill 库（例如 es6-promise 或 promise-polyfill），来 shim Promise。</p>
</blockquote>
<p><strong>其实这里的<code>动态导入(dynamic imports)</code>既是代码分割的一种方法，也是一种懒加载的方法。</strong>在下面仔细讲。</p>
<h2 id="4-预取-预加载模块-prefetch-preload-module"><a href="#4-预取-预加载模块-prefetch-preload-module" class="headerlink" title="4. 预取/预加载模块(prefetch/preload module)"></a>4. 预取/预加载模块(prefetch/preload module)</h2><p>这个也是可以进行代码分离的一种方法，它可以使用类似下面这种语法，生成 link tag  并追加到页面头部，指示着浏览器在闲置时间预取 <code>login-modal-chunk.js</code> 文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;link rel="prefetch" href="login-modal-chunk.js"&gt;</span></span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true */</span> <span class="string">'LoginModal'</span>);</span><br></pre></td></tr></table></figure></p>
<p>这样就会生成了一个<code>login-modal-chunk.js</code>的js文件，也就是分离了代码。这种方法正好和懒加载相反。下面会再进行解释。</p>
<hr>
<h1 id="lazy-loading🌶"><a href="#lazy-loading🌶" class="headerlink" title="lazy loading🌶"></a>lazy loading🌶</h1><p>上面提到了动态加载是代码分割的方法，这也顺便实现了懒加载的方法。下面总结下实际工程中，一般我们怎么使用它进行代码优化。</p>
<blockquote>
<p>懒加载或者按需加载，是一种很好的优化网页或应用的方式。这种方式实际上是先把你的代码在一些逻辑断点处分离开，然后在一些代码块中完成某些操作后，立即引用或即将引用另外一些新的代码块。这样加快了应用的初始加载速度，减轻了它的总体体积，因为某些代码块可能永远不会被加载。</p>
</blockquote>
<p>注意<strong>懒加载并不是 webpack 的概念，而是 es6 的概念， webpack只是识别了<code>/* webpackChunkName: &#39;lodash&#39;*/</code>这种语法</strong>。❌这里很容易误以为。</p>
<p>在 es6 语法里有一种<code>import()</code>的<a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="noopener">提案</a>，这个函数解决了 import 命令本身不能动态加载模块的劣势，而在这前，我们使用 require 是很好做到这一点的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> file = env === <span class="string">'production'</span> ? <span class="string">`prod_<span class="subst">$&#123;filename&#125;</span>`</span> : <span class="string">`sandbox_<span class="subst">$&#123;filename&#125;</span>`</span></span><br><span class="line"><span class="keyword">const</span> myModual = <span class="built_in">require</span>(file)</span><br></pre></td></tr></table></figure>
<p>import 命令会被 JavaScript 引擎<strong>静态分析，先于模块内的其他语句执行</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong: import 会被提到最上面，file将不被识别</span></span><br><span class="line"><span class="keyword">const</span> file = env === <span class="string">'production'</span> ? <span class="string">`prod_<span class="subst">$&#123;filename&#125;</span>`</span> : <span class="string">`sandbox_<span class="subst">$&#123;filename&#125;</span>`</span></span><br><span class="line"><span class="keyword">import</span> myModule <span class="keyword">from</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wrong: import 是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。</span></span><br><span class="line"><span class="keyword">if</span> (env === <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="keyword">import</span> myModule <span class="keyword">from</span> <span class="string">'prodFile'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> myModule <span class="keyword">from</span> <span class="string">'sandboxFile'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因此出现了 <code>import()</code>函数, <code>import()</code>函数的特性，可以实现：</p>
<ol>
<li>按需加载。也就是懒加载。</li>
<li>条件加载，解决了 import 命令不能使用条件的问题。</li>
<li>动态的模块路径，路径可以使用变量。解决了 import 命令静态编译不能使用动态路径的问题。</li>
</ol>
<p>注意叫法的区别:一个是<code>import命令</code>，一个是<code>import函数</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import()加载模块成功以后，这个模块会作为一个对象，当作then方法的参数。</span></span><br><span class="line"><span class="keyword">import</span>(<span class="built_in">module</span>).then().catch()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用对象解构赋值的语法，获取输出接口</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'loadash'*/</span> <span class="string">'lodash'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">&#123;defalut: _&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    </span><br><span class="line">    dom.innerText = _.join([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">'+'</span>)</span><br><span class="line">    <span class="keyword">return</span> dom</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击时才去开始执行加载模块</span></span><br><span class="line"><span class="keyword">const</span> main = <span class="built_in">document</span>.querySelector(<span class="string">"main"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> link <span class="keyword">of</span> <span class="built_in">document</span>.querySelectorAll(<span class="string">"nav &gt; a"</span>)) &#123;</span><br><span class="line">    link.addEventListener(<span class="string">"click"</span>, e =&gt; &#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">import</span>(<span class="string">`./section-modules/<span class="subst">$&#123;link.dataset.entryModule&#125;</span>.js`</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">module</span>.loadPageInto(main);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          main.textContent = err.message;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>之所以这里解构时是：<code>{default: _}</code>，是因为从 webpack v4 开始，在 import CommonJS 模块时，不会再将导入模块解析为 module.exports 的值，而是为 CommonJS 模块创建一个 artificial namespace object(人工命名空间对象)，我记得我之前遇到过这个问题，但是忘记哪个文章里专门写了，这里贴一篇很好的文章：<a href="https://medium.com/webpack/webpack-4-import-and-commonjs-d619d626b655" target="_blank" rel="noopener">webpack-4-import-and-commonjs</a></p>
<p>但是更为常见的一种懒加载的方法，是在 vue 中，<strong>结合 vue-router 实现的路由懒加载。这种方法能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件</strong>。</p>
<p>使用方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Foo.vue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后这个时候，还可以结合 webpack 的语法，进行代码分割，把把某个路由下的所有组件都打包在同个异步块 (chunk) 中如:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "foo" */</span> <span class="string">'./Foo.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Foo1 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "foo" */</span> <span class="string">'./Foo1.vue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Bar = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "bar" */</span> <span class="string">'./Bar.vue'</span>)</span><br></pre></td></tr></table></figure></p>
<p>这样 Foo 和 Foo1 将会在一个 chunk 内， bar 又会在一个 chunk 内。</p>
<p>这里注意下：<strong>dist 内生成的每一个 js 文件就是一个 chunk,而 minChunks 就表明了什么情况下进行代码分割，若 minChunks = 2, 则意味着生成的 chunk js 文件里，有多少个用到了这个模块，如果有的话才进行代码分割。</strong></p>
<hr>
<h1 id="预取-预加载模块-prefetch-preload-module-🏡"><a href="#预取-预加载模块-prefetch-preload-module-🏡" class="headerlink" title="预取/预加载模块(prefetch/preload module)🏡"></a>预取/预加载模块(prefetch/preload module)🏡</h1><p>使用上面的 Lazy loading 会存在一个问题，就是它只能在执行某个动作的时候，才会去加载。比如用户点击了登录框，这个时候开始下载js并开始解析执行。</p>
<p>实际上这样对用户来说还是有等待的一个过程的。但是利用 <code>prefetch/preload module</code> 可以解决这个问题。空闲时去提前加载了代码。用户点击时已有缓存，直接去解析执行代码即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ele = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  ele.innerText = <span class="string">'hello seven'</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(ele)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true */</span> <span class="string">'./2.js'</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">&#123;<span class="keyword">default</span>: func&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        func()</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这样就会发现，在首页的请求内，也会有 2.js 的请求，并且它的时间是在 index.js 之后。<br><img src="prefetch.png" alt="prefetch"><br>然后点开这笔请求的详情后，会看到相关的预先加载的信息头<code>purpose: prefetch</code>。<br><img src="header.png" alt="header"><br>最后查看dom结构，你会发现多了这样一个link文件。<br><img src="prefechlink.png" alt="prefech link"><br>preload和prefetch有许多区别。webpackPreload 会在浏览器闲置下载文件，webpackPreload 会在父 chunk 加载时并行下载文件。对于 preload 我还没有过实践。<br><img src="diff.png" alt="diff.png"></p>
<hr>
<h1 id="几个易混淆的概念❌"><a href="#几个易混淆的概念❌" class="headerlink" title="几个易混淆的概念❌"></a>几个易混淆的概念❌</h1><h2 id="filename-与-chunkFilename"><a href="#filename-与-chunkFilename" class="headerlink" title="filename 与 chunkFilename"></a>filename 与 chunkFilename</h2><p>filename 是指在 entry 中声明的文件，打包输出后的文件的名称。<br>chunkFilename 是指未在 entry 中声明，但是却由于代码分离的原因被打包出来的文件的名称。</p>
<p>可以看到 filename 对应于上面代码分离中的第一点<br>而 chunkFilename 对应于代码分离中的2，3，4点</p>
<p>比如在刚刚的懒加载或者预先加载中，我们进行了代码分离。分离后得到如下结果：<br><img src="chunk.png" alt="chunk"></p>
<p>而我们的 output 配置如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry: <span class="string">'./src/index'</span></span><br><span class="line"></span><br><span class="line">output: &#123;</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">  filename: <span class="string">"[name].min.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因此可以看到 <code>main.min.js</code> 就是 <code>filename</code>, 而<code>0.min.js</code>就是 <code>chunkFilename</code></p>
<p>我们可以显试的指明 chunkFilename ,那么生成的文件名称就叫<code>0.chunk.js</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">"[name].min.js"</span>,</span><br><span class="line">    chunkFilename: <span class="string">"[name].chunk.js"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p>
<p>当然很明显 <code>chunkFilename</code> 指定为 <code>[name].chunk.js</code> 并不好，因为生成的是<code>0.chunk.js</code>这种无含义文件名。</p>
<p>这个时候我们就可以结合刚刚的<code>webpackChunkName</code>这种 <code>magic comments</code> 来进行打包。</p>
<hr>
<h2 id="webpackChunkName，webpackPreload，webpackPreload"><a href="#webpackChunkName，webpackPreload，webpackPreload" class="headerlink" title="webpackChunkName，webpackPreload，webpackPreload"></a>webpackChunkName，webpackPreload，webpackPreload</h2><p>这三个都是魔法注释（magic comments）,上面已介绍清楚。这里只总结下语法和用途。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为预加载的文件取别名</span></span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: 'loadash'*/</span> <span class="string">'lodash'</span>)</span><br><span class="line"><span class="comment">// 在浏览器闲置下载文件</span></span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true */</span> <span class="string">'./2.js'</span>)</span><br><span class="line"><span class="comment">// 在父 chunk 加载时并行下载文件</span></span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackPreload: true */</span> <span class="string">'./2.js'</span>)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="hash-chunkhash-contenthash"><a href="#hash-chunkhash-contenthash" class="headerlink" title="hash chunkhash contenthash"></a>hash chunkhash contenthash</h2><p><strong>hash是跟整个项目的构建相关，只要项目里有文件更改，整个项目构建的hash值都会更改，并且全部文件都共用相同的hash值</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">entry:&#123;</span><br><span class="line">    main: <span class="string">'./index.js'</span>,</span><br><span class="line">    vender:[<span class="string">'jquery'</span>,<span class="string">'lodash'</span>]</span><br><span class="line">&#125;</span><br><span class="line">output:&#123;</span><br><span class="line">    path:path.join(__dirname, <span class="string">'/dist/js'</span>),</span><br><span class="line">    filename: <span class="string">'[name].[hash].js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此，若 <code>index.js</code> 文件变化时， <code>vendor</code> 最后生成 <code>output</code> 的文件名也会发生变化，都相同。这样无法利用缓存，因为hash与项目相关，只要项目变了，hash就会变。</p>
<p>这里注意下，如果是老版本的webpack, 即使是你文件都没有更改，只是重新构建了，也有可能导致 hash 的值不一样。这是因为它有个 manifest 文件，里面记录了 vendor 和 main 的联系，它即存在于vendor里，又有可能存在main里，它每次构建可能有不同，导致了每次的构建都不一样，hash就也变化了。可以使用 runtimeChunk 来解决这个问题。以保证老版本里，代码没变，hash也没变的问题。</p>
<p><strong>chunkhash和hash不一样，它根据不同的入口文件(Entry)进行依赖文件解析、构建对应的chunk，生成对应的哈希值。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">entry:&#123;</span><br><span class="line">    main: <span class="string">'./index.js'</span>,</span><br><span class="line">    vender:[<span class="string">'jquery'</span>,<span class="string">'lodash'</span>]</span><br><span class="line">&#125;</span><br><span class="line">output:&#123;</span><br><span class="line">    path:path.join(__dirname, <span class="string">'/dist/js'</span>),</span><br><span class="line">    filename: <span class="string">'[name].[chunkhash].js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>我们在生产环境里把一些公共库和程序入口文件区分开，单独打包构建，再采用<code>chunkhash</code>的方式生成哈希值，那么只要我们不改动vendor的代码，就可以保证其哈希值不会受影响。这样可以比较有效的利用缓存。</strong></p>
<p>而只使用 chunkhash 也会有问题，若一个index.js文件中引入了一个css文件，那么它将会打包到和index.js一起，那么如果只是css变化了，他们又公用一个chunk, 那么index.js虽然没有变化，但是文件名也会发生变化。</p>
<p>为了解决这个问题，我们使用extract-text-webpack-plugin这个插件，然后结合contenthash,即可保证css变化时，js不发生变化。</p>
<blockquote>
<p>它会将所有的入口 chunk(entry chunks)中引用的 *.css，移动到独立分离的 CSS 文件。因此，你的样式将不再内嵌到 JS bundle 中，而是会放到一个单独的 CSS 文件（即 styles.css）当中。 如果你的样式文件大小较大，这会做更快提前加载，因为 CSS bundle 会跟 JS bundle 并行加载。</p>
</blockquote>
<p><strong>contenthash 将根据资源内容创建出唯一 hash，也就是说文件内容不变，hash 就不变。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">          use: <span class="string">"css-loader"</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].[contenthash].css'</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>contenthash</code>一般我只在 <code>ExtractTextPlugin</code> 使用，在 <code>filename</code>和<code>chunkfilename</code>中，我们不会设置为这个值，而是使用<code>chunkhash</code>。<br>并且<code>chunkhash</code>,<code>contenthash</code>和<code>HMR</code>不能同时使用,一般我们不会再dev里这样写，而是在 <code>production</code> 环境中设置。dev环境中我们就用<code>[name].js</code>其实就可以。</p>
<p>因此可以理解为：hash 计算与整个项目的构建相关；chunkhash 计算与同一 chunk 内容相关；contenthash 计算与文件内容本身相关。<br>这么想来，设计者取名也是非常准确和用心了。</p>
<hr>
<h1 id="总结🌺"><a href="#总结🌺" class="headerlink" title="总结🌺"></a>总结🌺</h1><p>这里上面提到的一些概念，有大概70%我在实践中使用的比较频繁，其他的如 prefetch 和 preload,我基本没有使用到过。希望后续自己有意识去使用，并观察是否真的有效果。📚</p>
<p>prefech 的兼容性会比 preload 好些。他们之间还有许多区别，我先不去做了解了。</p>
<p>最主要的目的还是希望自己对某个知识点是系统化的，而不是只知道其中的一点。细节可以不去了解，但是基本的这些思想希望能记住，然后再某些需要的时候，再去使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要记录 webpack 的代码分离的几种方式，由此再去理解通过&lt;strong&gt;代码分离&lt;/strong&gt;可以做哪些前端优化：如懒加载和预先加载。之后再介绍了几个易混淆的概念。📚&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;webpack-代码分离🌲&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
    
      <category term="工具/配置" scheme="http://sevencai.github.io/tags/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>关于微信免密支付的几个概念</title>
    <link href="http://sevencai.github.io/2019/03/15/%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%85%8D%E5%AF%86%E6%94%AF%E4%BB%98%E7%9A%84%E5%87%A0%E4%B8%AA%E6%A6%82%E5%BF%B5/"/>
    <id>http://sevencai.github.io/2019/03/15/关于微信免密支付的几个概念/</id>
    <published>2019-03-15T11:38:31.000Z</published>
    <updated>2019-03-18T03:21:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>纯签约<br>支付中签约<br>支付后签约<br>签约后支付（连续包月）<br>自动续费</p>
</blockquote>
<p>微信一共<strong>只</strong>提供两种签约方式： <strong>纯签约和支付中签约</strong>，<a href="https://pay.weixin.qq.com/wiki/doc/api/pap.php?chapter=17_2" target="_blank" rel="noopener">文档在这里</a>。 <strong>后面的几种方式都不是微信的概念，而是大家包装出来的概念</strong>。</p>
<hr>
<h2 id="纯签约"><a href="#纯签约" class="headerlink" title="纯签约"></a>纯签约</h2><p>纯签约可以理解为委托扣款，用户一旦同意，以后商家就可以免用户密码进行扣款。<strong>这个过称中不会发生扣款行为，仅仅是签约，签订协议而已</strong>。</p>
<p><img src="chunqianyue.png" alt="纯签约"></p>
<hr>
<h2 id="支付中签约"><a href="#支付中签约" class="headerlink" title="支付中签约"></a>支付中签约</h2><p>支付中签约是微信提供的另外一种签约，商家在下订单时，带上签约的参数，就会在下订单的订单页出现一个按钮，用户勾选是否签约。这种用户需要主动勾选同意，转换率底。<strong>这种情况，用户一旦勾上了同意，就会即扣款，也会签约</strong>。</p>
<p><img src="zhifuzhongqianyue.png" alt="支付中签约"></p>
<hr>
<h2 id="支付后签约"><a href="#支付后签约" class="headerlink" title="支付后签约"></a>支付后签约</h2><p>支付后签约：是用户先进行一笔支付，支付后再拉起签约页面。<strong>这种情况转换率更低，用户需要输入两次密码，第一次是付款的密码，第二次是签约的密码</strong>。体验不好。</p>
<hr>
<h2 id="签约后支付"><a href="#签约后支付" class="headerlink" title="签约后支付"></a>签约后支付</h2><p>签约后支付：先拉起签约页面，用户输入密码，然后签约后，由商家进行扣款一笔付费。<strong>这种情况，用户只需要输入密码一次，并且一定是先签约转换率高，并且用户也会支付一笔，大家把它包装成【连续包月】的概念</strong>。</p>
<p>这种连续包月就是需要商家在用户签约完成后，立刻<strong>为用户下一笔单</strong>，然后由于用户已经签约，所以不需要再输密码。这时候用户就又签约又支付。比较完美。商家需要开发后续再下单的流程。</p>
<hr>
<h2 id="自动续费"><a href="#自动续费" class="headerlink" title="自动续费"></a>自动续费</h2><p>自动续费就是一种很宽泛的说法了，就是到期了，商家帮助用户进行自动的扣款并且延长服务的说法。自动续费的渠道有很多，比如支付宝，QB, 微信支付等渠道。而连续包月可以说是其中的一种，可以理解为是微信的自动续费。自动续费概念比较广泛，连续包月是其中的一种实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纯签约&lt;br&gt;支付中签约&lt;br&gt;支付后签约&lt;br&gt;签约后支付（连续包月）&lt;br&gt;自动续费&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;微信一共&lt;strong&gt;只&lt;/strong&gt;提供两种签约方式： &lt;strong&gt;纯签约和支付中签约&lt;/strong&gt;
    
    </summary>
    
    
      <category term="概念" scheme="http://sevencai.github.io/tags/%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>证书、对称加密、非对称加密</title>
    <link href="http://sevencai.github.io/2019/03/14/%E8%AF%81%E4%B9%A6%E3%80%81%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E3%80%81%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>http://sevencai.github.io/2019/03/14/证书、对称加密、非对称加密/</id>
    <published>2019-03-14T09:16:48.000Z</published>
    <updated>2019-05-28T02:39:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要是针对我对证书，对称加密，非对称加密，CA等内容的粗浅理解的记录。下图为我理解的大致流程。方便后续查阅。</p>
<p>几个基本概念</p>
<ol>
<li>密码: 对文本进行编码，使偷窥者无法识别的算法。</li>
<li>密钥: 改变密码行为的数字化参数。</li>
<li>对称密钥加密系统: 编 / 解码使用相同密钥的算法。</li>
<li>不对称密钥加密系统: 编 / 解码使用不同密钥的算法。</li>
<li>公开密钥加密系统: 一种能够使数百万计算机便捷地发送机密报文的系统。</li>
<li>数字签名: 用来验证报文未被伪造或篡改的校验和。</li>
<li>数字证书: 由一个可信的组织验证和签发的识别信息。</li>
</ol>
<p>一个整体的交互图</p>
<p><img src="process.png" alt="流程图"></p>
<hr>
<h2 id="CA及CA证书"><a href="#CA及CA证书" class="headerlink" title="CA及CA证书"></a>CA及CA证书</h2><p>CA 就是认证机构,<code>Certificate Authority</code>。</p>
<p>CA 证书： 因特网的<code>ID卡</code>, 通常被称为 certs。</p>
<p>其中包含了由某个<strong>受信任的组织担保的用户或者公司的相关信息</strong>。</p>
<p><strong>任何人都可以创建一个数字证书，但并不是所有人都能够获得受人尊敬的签发权，从而为证书信息担保，并用其私有密钥签发证书。</strong></p>
<p>就像<code>身份证</code>是权威机构颁发的，能证明你的身份，一般大家都很信任。但是你的<code>名片卡</code>是你自己弄的，或者公司发的，大家可能就看看，但是不一定相信就是真的。</p>
<p>所以你信用贷时，用身份证大家认可，但是你用名片卡肯定不可以，即使你名片卡上写的职位是经理。</p>
<p><img src="certs.png" alt="典型的证书结构"></p>
<hr>
<h2 id="证书的组成"><a href="#证书的组成" class="headerlink" title="证书的组成"></a>证书的组成</h2><ol>
<li>“对象的名称（人、服务器、组织等）；</li>
<li>过期时间；</li>
<li>证书发布者（由谁为证书担保）；</li>
<li>来自证书发布者的<strong>数字签名</strong>；</li>
<li><strong>对象的公开密钥</strong>。</li>
</ol>
<h2 id="服务器证书"><a href="#服务器证书" class="headerlink" title="服务器证书"></a>服务器证书</h2><ol>
<li>Web 站点的名称和主机名；</li>
<li>Web 站点的<strong>公开密钥</strong>；</li>
<li>签名颁发机构的名称；</li>
<li>来自签名<strong>颁发机构的签名</strong>。</li>
</ol>
<p>所以<strong>当浏览器收到证书后会进行检查，如果这个CA（认证机构）是个很权威的公共前面机构，浏览器就可以已经知道它的（CA的）公开密钥了。因为正版的浏览器会预先安装很多签名颁发机构的证书。注意浏览器这时候知道的公开密钥是CA认证机构的公开密钥，而不是服务器端的公开密钥，服务器端的公开密钥是通过CA的公开密钥解密得到的。</strong></p>
<p>上面这里一定要理解清楚，再看下面的流程会清楚很多。</p>
<p>证书=公钥+申请者与颁发者信息+签名。</p>
<p>证书会颁发给服务器，浏览器请求时，服务器会给浏览器证书，浏览器通过签名和时间等，用CA的公钥判断证书是否有效。</p>
<hr>
<h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>上面提到了证书里面会包含CA的签名。这个签名的意义和作用是什么呢？</p>
<blockquote>
<p>“数字签名是附加在<strong>报文上</strong>的特殊加密校验码。”<br>用于描述是谁编写的报文，同时证明报文未被篡改过。这种技术被称为数字签名（digital signing）</p>
</blockquote>
<p>比如上面CA证书的签名，目的是证明CA证书是合法的，是CA颁发的。并且证书没有被篡改。</p>
<p>签名就像人的签字一样。但是比人的签字更好的是可以通过程序判断是不是真的是你签的字。下面举例看看上面的CA的签名是怎么生成的。</p>
<ol>
<li>CA将变长报文提取为定长的摘要</li>
<li>CA对摘要应用了一个签名函数，参数为CA的私钥</li>
<li>计算出签名后CA将其附加在报文的尾部，并且将报文和签名一起发送给服务器</li>
<li>然后客户端请求服务器时，拿到了证书。然后用CA的公钥进行签名函数的反函数</li>
<li>得到了明文摘要。拿到摘要后再与真实发过来的文本摘要做对比</li>
<li>若不一致，则签名不通过，若一致，则信任此证书及证书里面的服务器的<code>public key</code></li>
</ol>
<p><img src="sign.png" alt="签名的机制"></p>
<hr>
<h2 id="怎么生成证书"><a href="#怎么生成证书" class="headerlink" title="怎么生成证书"></a>怎么生成证书</h2><ol>
<li>服务器把 <code>public key</code> 及一些其他附加信息给到CA</li>
<li>CA 用自己的 <code>private key</code> 加密这些数据，加密完的数据称为数字证书。</li>
<li>然后服务器返回证书给浏览器时，返回的是用 CA 的 <code>private key</code> 加密后的内容。浏览器收到后，会通过已知的 CA 的 <code>public key</code> 进行解密，来获得到 B 的 <code>public key</code>。</li>
<li>这个得到的 <code>public key</code> 是受信任的公钥key。</li>
</ol>
<p><strong>所以可以知道生成证书的这个过称其实也是非对称加密</strong> </p>
<p><strong>注意生成证书和签名的整个过程，CA都是不需要客户端或者服务端的私钥的，私钥要确保只能自己使用。CA使用的私钥也仅仅是自己的私钥，用于签名。</strong></p>
<hr>
<h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><p>把上面那些概念理解清楚后，后面这个流程就很清晰了。</p>
<ol>
<li>服务器申请向 CA 申请证书</li>
<li>浏览器首次向服务器发起请求， 服务器返回证书给浏览器</li>
<li>浏览器拿到证书，通过签名及时间等，判断是否有效，是否可信任</li>
<li>若证书有效</li>
<li>客户端生成随机数，然后用证书中的公钥进行加密，加密后发送给服务器，服务器用私钥进行解密，得到随机数。（这个过程是非对称加密）</li>
<li>之后服务器和浏览器就用这个随机数做为钥匙，对数据进行加密解密。</li>
</ol>
<p><strong>所以知道拿到证书后，使用随机数后的过称，应该是对称加密</strong>。</p>
<p>下面解释为什么会有证书和签名这些东西。证书和签名都是为了保证互联网传输信息安全。</p>
<hr>
<h2 id="对称加密与非对称加密"><a href="#对称加密与非对称加密" class="headerlink" title="对称加密与非对称加密"></a>对称加密与非对称加密</h2><p>对称密钥加密技术的缺点之一就是发送者和接收者在互相对话之前，<strong>一定要有一个共享的保密密钥</strong>。</p>
<p>使用同一个密钥，带来的问题就是：</p>
<ol>
<li>密钥从网络传输是不安全的。</li>
<li>若网络中有N个节点，那么每个节点都要跟其他节点建立联系，则会有N^2个节点。</li>
</ol>
<p>为了解决上面两个问题，出现了非对称加密（“公开密钥加密技术”）。</p>
<p>节点A向节点B传送数据，节点A用节点B的公钥加密，B收到后用自己的私钥解密。</p>
<p><strong>非对称加密可以理解成，一个节点有两个东西：一把锁，一个钥匙。锁可以给任何人，钥匙节点自己留用。所有的人都可以带着锁过来，但是只有自己能看别人发给自己的东西。</strong></p>
<p>所以非对称加密虽然较安全也会带来问题：</p>
<ol>
<li>数据被篡改，密钥被拦截。</li>
<li>耗时多，加密与解密速度慢。</li>
</ol>
<p>假设A发送的数据被C拦截了，C用B的公钥和自己的数据加密后伪装成A发送给B了。</p>
<p>B也并不知道自己接受到的数据不是A的了，而是C的。</p>
<p>因此出现了数字签名和数字证书。</p>
<p>数字签名保证了B收到的信息内容没有被篡改(A用hash得到A的摘要，再用自己的私钥进行加密，得到签名，B收到后用A的公钥解密，得到摘要和收到的内容比对)</p>
<p>但是这并不能保证内容一定没有被C拦截。</p>
<p><img src="lack.png" alt="第三方拦截"></p>
<p>因为坏坏的C可以把B保存的A的公钥替换成自己的公钥。然后冒用A给B发送信息。C拦截A的信息，然后自己发送信息给B，用B的公钥加密，然后B用自己的私钥解密。（如上图）</p>
<p>所以出现了证书。证书的目的就是保证了数据不被篡改，并且保证B处A的公钥就是A的公钥。</p>
<blockquote>
<p>典型的对称加密算法： AES,DES,Trible DES<br>典型的非对称加密算法： RSA</p>
</blockquote>
<hr>
<h2 id="https和TSL-amp-SSL的关系"><a href="#https和TSL-amp-SSL的关系" class="headerlink" title="https和TSL&amp;SSL的关系"></a>https和TSL&amp;SSL的关系</h2><p>https是基于 TSL 及 SSL 实现的。TSL 和 SSL 主要依赖下面这几种算法</p>
<ol>
<li>散列函数 Hash: 基于散列函数验证信息的完整性</li>
<li>对称加密: 对称加密算法采用协商的密钥对数据加密</li>
<li>非对称加密: 非对称加密实现身份认证和密钥协商</li>
</ol>
<p>也就是说：<strong>TSL 其实对称加密和非对称加密都用到了。先用非对称加密获得对应的密钥。再用改密钥进行对称加密传输。</strong>这在我们上面的认证过程中有体现。</p>
<p>之所以后面获得密钥后，就用对称加密，主要是解决时间非对称加密太消耗时间和性能的问题。</p>
<p><img src="ssltsl.png" alt="流程图"></p>
<p>标注：上面的图片来源于<a href="https://juejin.im/post/5b88a93df265da43231f1451" target="_blank" rel="noopener">TLS 详解</a>一文。更多的 SSL 握手等细节，我不关注。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实我本来是遇到了一个<code>https</code>的问题, 然后去了解了 tsl 和 ssl， 然后又去了解了非对称加密和对称加密。然后又去了解了证书和CA。</p>
<p>上文有部分概念性文案 - 摘录来自: [美]David Gourley Brian Totty Marjorie Sayer Sailu Reddy Aushu Aggarwal. “HTTP权威指南 (图灵程序设计丛书)”。 iBooks.    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要是针对我对证书，对称加密，非对称加密，CA等内容的粗浅理解的记录。下图为我理解的大致流程。方便后续查阅。&lt;/p&gt;
&lt;p&gt;几个基本概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;密码: 对文本进行编码，使偷窥者无法识别的算法。&lt;/li&gt;
&lt;li&gt;密钥: 改变密码行为的数字化参数。
    
    </summary>
    
    
      <category term="http" scheme="http://sevencai.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>简单分析babel和webpack编译后的文件</title>
    <link href="http://sevencai.github.io/2019/03/06/%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90babel%E5%92%8Cwebpack%E7%BC%96%E8%AF%91%E5%90%8E%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://sevencai.github.io/2019/03/06/简单分析babel和webpack编译后的文件/</id>
    <published>2019-03-06T08:47:27.000Z</published>
    <updated>2019-03-06T09:06:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<ol>
<li><p><code>babel6</code> 或 <code>babel7</code> 后，可以使用<code>babel-plugin-add-module-exports</code>插件，解决 <code>require(xxx).default</code> 带 <code>default</code> 的问题。</p>
</li>
<li><p>webpack 直接被编译后的 es5 js文件是没法直接被import的，被import后会得到空的对象, 如果要直接引用这个文件，需要设置<code>libraryTarget: &#39;xxx&#39;</code>。</p>
</li>
<li><p>写了小demo,了解了下babel编译后的文件和webpack编译后的文件。</p>
</li>
</ol>
</blockquote>
<hr>
<h2 id="demo例子"><a href="#demo例子" class="headerlink" title="demo例子"></a>demo例子</h2><p>下面是分析 babel,webpack 编译后文件的小例子。后面的内容基于此demo分析。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">constructor</span>() &#123;  </span><br><span class="line"> </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  a() &#123;  </span><br><span class="line">    alert(<span class="string">'b'</span>)  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="分析babel7编译后的文件"><a href="#分析babel7编译后的文件" class="headerlink" title="分析babel7编译后的文件"></a>分析babel7编译后的文件</h2><p>下面是对上面的 demo 进行 babel 编译后的文件做了一个简单的分析，看下他们做了什么事情。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">  value: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _createClass = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">defineProperties</span>(<span class="params">target, props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> descriptor = props[i];</span><br><span class="line">      descriptor.enumerable = descriptor.enumerable || <span class="literal">false</span>;</span><br><span class="line">      descriptor.configurable = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"value"</span> <span class="keyword">in</span> descriptor) descriptor.writable = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(target, descriptor.key, descriptor);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Constructor, protoProps, staticProps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (protoProps) defineProperties(Constructor.prototype, protoProps);</span><br><span class="line">    <span class="keyword">if</span> (staticProps) defineProperties(Constructor, staticProps);</span><br><span class="line">    <span class="keyword">return</span> Constructor;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    _classCallCheck(<span class="keyword">this</span>, Test);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _createClass(Test, [&#123;</span><br><span class="line">    key: <span class="string">'a'</span>,</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">'b'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Test;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">exports.default = Test;</span><br></pre></td></tr></table></figure>
<p>从下面的 Test 开始看，定义了一个立即执行函数 Test, Test 内部调用了 <code>_classCallCheck</code>, 这个保证了 ES 模块，只能通过 new 来调用。也就是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Test()</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">let</span> t = Test()</span><br></pre></td></tr></table></figure>
<p>后面又执行了 <code>_createClass</code>方法，把函数的方法以 <code>key, value</code> 的形式传给 函数体，然后函数内利用 <code>defineProperty</code>方法，给<code>Test</code>添加属性。使用 <code>defineProperty</code>的时候，定义了<code>enumerable,configurable,writable</code>的值。<strong>注意 <code>static</code> 的方法，不能被继承，只能用类名来调用，应该写在 <code>constructor</code> 而不是 <code>constructor.prototype</code> 上</strong>。</p>
<p>最后直接暴露出了 <code>default</code> 方法。<code>exports.default = Test;</code></p>
<p>如果我们直接这么使用的话，调用 Test 方法时就需要这么使用<code>require(&#39;xxx&#39;).default</code>，这当然不是我们期望的。</p>
<p>所以可以利用插件<code>babel-plugin-add-module-exports</code>将<code>exports.default = Test</code>转换为<code>module.exports = exports.default</code> 或者 <code>export { _default as default };</code> (这个在babel6,babel7之前是不需要的。如果你使用 babel6 or babel7 你可以会使用这个插件)。</p>
<p>babel 配置为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  <span class="string">"presets"</span>: [  </span><br><span class="line">    [<span class="string">"@babel/preset-env"</span>, &#123;  </span><br><span class="line">      <span class="string">"modules"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;]  </span><br><span class="line">  ],  </span><br><span class="line">  <span class="string">"plugins"</span>: [  </span><br><span class="line">    <span class="string">"add-module-exports"</span>  </span><br><span class="line">  ]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>至于是转换成 <code>module.exports = exports.default</code> 还是 <code>export { _default as default };</code> 取决与有没有设置 <code>module:false</code>。</p>
<p>若设置了 <code>module:false</code> ，babel不会进行转换 es6 的 import, export 等。交给后面的webpack来处理。所以会转换成 <code>{ _default as default };</code>。</p>
<p>若没有设置则，babel会转成 <code>module.exports = exports.default</code>, 因为会认为你要的是纯的 ES5 语法。</p>
<p>注意babel，有 <code>loose: true, loose: false</code> 两种模式，分别表明了你是要用上面那种 <code>_createClass</code> 的形式生成编译文件，还是使用 <code>Test.prototype.xxx</code> 这种继承的模式来生成文件。建议是不要使用 不严格模式。</p>
<hr>
<h2 id="分析-webpack-编译后的文件"><a href="#分析-webpack-编译后的文件" class="headerlink" title="分析 webpack 编译后的文件"></a>分析 webpack 编译后的文件</h2><p>下面是同样一个 demo 被webpack编译后的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">      <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = (installedModules[moduleId] = &#123;</span><br><span class="line">      i: moduleId,</span><br><span class="line">      l: <span class="literal">false</span>,</span><br><span class="line">      exports: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    modules[moduleId].call(</span><br><span class="line">      <span class="built_in">module</span>.exports,</span><br><span class="line">      <span class="built_in">module</span>,</span><br><span class="line">      <span class="built_in">module</span>.exports,</span><br><span class="line">      __webpack_require__</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">  &#125;</span><br><span class="line">  __webpack_require__.m = modules;</span><br><span class="line">  __webpack_require__.c = installedModules;</span><br><span class="line">  __webpack_require__.d = <span class="function"><span class="keyword">function</span>(<span class="params">exports, name, getter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!__webpack_require__.o(exports, name)) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(exports, name, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get: getter</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  __webpack_require__.r = <span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">        value: <span class="string">"Module"</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">      value: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  __webpack_require__.t = <span class="function"><span class="keyword">function</span>(<span class="params">value, mode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">1</span>) value = __webpack_require__(value);</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">8</span>) <span class="keyword">return</span> value;</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">4</span> &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">"object"</span> &amp;&amp; value &amp;&amp; value.__esModule)</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    <span class="keyword">var</span> ns = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    __webpack_require__.r(ns);</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(ns, <span class="string">"default"</span>, &#123;</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      value: value</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">2</span> &amp;&amp; <span class="keyword">typeof</span> value != <span class="string">"string"</span>)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> value)</span><br><span class="line">        __webpack_require__.d(</span><br><span class="line">          ns,</span><br><span class="line">          key,</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value[key];</span><br><span class="line">          &#125;.bind(<span class="literal">null</span>, key)</span><br><span class="line">        );</span><br><span class="line">    <span class="keyword">return</span> ns;</span><br><span class="line">  &#125;;</span><br><span class="line">  __webpack_require__.n = <span class="function"><span class="keyword">function</span>(<span class="params">module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> getter =</span><br><span class="line">      <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule</span><br><span class="line">        ? <span class="function"><span class="keyword">function</span> <span class="title">getDefault</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">module</span>[<span class="string">"default"</span>];</span><br><span class="line">          &#125;</span><br><span class="line">        : <span class="function"><span class="keyword">function</span> <span class="title">getModuleExports</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">          &#125;;</span><br><span class="line">    __webpack_require__.d(getter, <span class="string">"a"</span>, getter);</span><br><span class="line">    <span class="keyword">return</span> getter;</span><br><span class="line">  &#125;;</span><br><span class="line">  __webpack_require__.o = <span class="function"><span class="keyword">function</span>(<span class="params">object, property</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, property);</span><br><span class="line">  &#125;;</span><br><span class="line">  __webpack_require__.p = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">return</span> __webpack_require__((__webpack_require__.s = <span class="string">"./class1.mjs"</span>));</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">  <span class="string">"./class1.mjs"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    __webpack_module__,</span></span></span><br><span class="line"><span class="function"><span class="params">    __webpack_exports__,</span></span></span><br><span class="line"><span class="function"><span class="params">    __webpack_require__</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    __webpack_require__.r(__webpack_exports__);</span><br><span class="line">    __webpack_require__.d(__webpack_exports__, <span class="string">"default"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Test;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_defineProperties</span>(<span class="params">target, props</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> descriptor = props[i];</span><br><span class="line">        descriptor.enumerable = descriptor.enumerable || <span class="literal">false</span>;</span><br><span class="line">        descriptor.configurable = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"value"</span> <span class="keyword">in</span> descriptor) descriptor.writable = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(target, descriptor.key, descriptor);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_createClass</span>(<span class="params">Constructor, protoProps, staticProps</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (protoProps) _defineProperties(Constructor.prototype, protoProps);</span><br><span class="line">      <span class="keyword">if</span> (staticProps) _defineProperties(Constructor, staticProps);</span><br><span class="line">      <span class="keyword">return</span> Constructor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> Test = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _classCallCheck(<span class="keyword">this</span>, Test);</span><br><span class="line">      &#125;</span><br><span class="line">      _createClass(Test, [</span><br><span class="line">        &#123;</span><br><span class="line">          key: <span class="string">"a"</span>,</span><br><span class="line">          value: <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"b"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]);</span><br><span class="line">      <span class="keyword">return</span> Test;</span><br><span class="line">    &#125;)();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>可以看到显示源文件被编译后跟上面的babel没有区别。被编译后的内容作为参数<code>modules</code>带到了立即执行函数里。执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return __webpack_require__(__webpack_require__.s = &quot;./class1.mjs&quot;);</span><br></pre></td></tr></table></figure>
<p>webpack 的核心，就是<code>__webpack_require</code> 这个函数做了什么事情。</p>
<ol>
<li>检查是否模块已经缓存，如果已经缓存了则直接返回</li>
<li>定义模块 module, <code>module</code> 内有一个<code>exports</code>属性</li>
<li>执行<code>modules[moduleId].call</code>，实际上就是调用了被babel编译后的模块，将 <code>module.exports</code>引用赋值给<code>__webpack_exports__</code></li>
<li>然后执行<code>__webpack_require__.d(__webpack_exports__, &quot;default&quot;, function() { return Test; });</code>，把module.exports上赋值给相应的模块。</li>
<li><code>return __webpack_require__</code>后的结果即为当前加载的模块。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;  </span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// Check if module is in cache  </span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedModules[moduleId]) &#123;  </span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">return</span> installedModules[moduleId].exports;  </span><br><span class="line"><span class="comment">/******/</span> &#125;  </span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// Create a new module (and put it into the cache)  </span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;  </span><br><span class="line"><span class="comment">/******/</span> 	i: moduleId,  </span><br><span class="line"><span class="comment">/******/</span> 	l: <span class="literal">false</span>,  </span><br><span class="line"><span class="comment">/******/</span> 	exports: &#123;&#125;  </span><br><span class="line"><span class="comment">/******/</span> &#125;;  </span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// Execute the module function  </span></span><br><span class="line"><span class="comment">/******/</span> modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);  </span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// Flag the module as loaded  </span></span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">module</span>.l = <span class="literal">true</span>;  </span><br><span class="line"><span class="comment">/******/</span>  </span><br><span class="line"><span class="comment">/******/</span>    <span class="comment">// Return the exports of the module  </span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> <span class="built_in">module</span>.exports;  </span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br></pre></td></tr></table></figure>
<p>从刚刚的分析中可以得到：</p>
<p><strong>webpack 编译后的文件是一个立即执行函数，并没有暴露出什么内容，如果直接copy到浏览器里，是一个 Module 对象，也就是并没有赋值给任何值如 window, module.exports, exports ,作用域只在当前。因此解释了为什么 webpack 被编译后的文件没办法直接被<code>import 或者 require</code></strong>。</p>
<p>针对这种情况，可以在webpack中设置：<code>libraryTarget: &#39;xxx&#39;</code>， 用来把最后得到的内容，暴露出去。如若值为 <code>commonjs2</code>则会是最外面会加上 <code>module.exports</code>, 若值为 <code>commonjs</code>会最终都为 <code>exports</code>, 若值为 <code>var</code>则是在window上可以使用。还有其他的值，这里就不一一列举了。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>之所以会出这篇文章，是因为最近在优化组里的一些公共组件，优化过程中遇到了一些问题，最后发现其实还是对这些欠缺一些了解。不总结出来，怕是对不起自己这几天的纠结。📚🌲</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;babel6&lt;/code&gt; 或 &lt;code&gt;babel7&lt;/code&gt; 后，可以使用&lt;code&gt;babel-plugin-add-module-exports&lt;/code&gt;插件，解决 &lt;code&gt;require(xxx
    
    </summary>
    
    
      <category term="工具/配置" scheme="http://sevencai.github.io/tags/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>解决 IOS 微信某些版本下键盘收起页面为下移导致点击事件失效问题</title>
    <link href="http://sevencai.github.io/2019/03/01/%E8%A7%A3%E5%86%B3-IOS-%E5%BE%AE%E4%BF%A1%E6%9F%90%E4%BA%9B%E7%89%88%E6%9C%AC%E4%B8%8B%E9%94%AE%E7%9B%98%E6%94%B6%E8%B5%B7%E9%A1%B5%E9%9D%A2%E4%B8%BA%E4%B8%8B%E7%A7%BB%E5%AF%BC%E8%87%B4%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>http://sevencai.github.io/2019/03/01/解决-IOS-微信某些版本下键盘收起页面为下移导致点击事件失效问题/</id>
    <published>2019-03-01T03:30:36.000Z</published>
    <updated>2019-03-01T03:43:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>某天发现了一个奇怪的现象。</p>
<p>一般我们会在点击支付的时候，弹出一个模态框，让用户选择支付渠道。</p>
<p>突然发现某个IOS微信手机上，当点击输入金额后，用户点击支付，弹窗出现后，<strong>无法点击中弹窗上的渠道。但是却能在非弹窗所在的空白地方，选中有反馈。这种感觉就像dom显示的地方和dom真实的地方分离了一样诡异。</strong>如下图所示。</p>
<p><img src="example.png" alt="示例图-（微信钱包-&gt;QB-&gt;官方渠道安全又放心）"><br>我们知道 IOS 有个很好的优化，就是当用户手动输入输入框时，IOS会自己把输入框弹上来，来确保输入框一定在可视框内，Android 没有这个优化，以前我们还经常对安卓做这种优化。</p>
<p>后来发现确实是这个优化导致了<strong>【弹窗虽然恢复正常了，但是body还是在键盘弹上去的位置】</strong>， 是由于 IOS 下的渲染问题导致的，当键盘弹下来的时候，弹窗下的body没有触发重绘。</p>
<p>所以问题变成了简单的，怎么让键盘下去的时候，body能够重绘。</p>
<p>我们首先想到的是，<strong>键盘收起的时候，resize 事件应该会触发</strong>，试着在 resize 中做处理，结果发现，IOS下竟然不会触发 resize, 也就是 IOS 下，<strong>当键盘收起的时候，并不会改变视窗的大小，所以也就不会触发 resize 事件</strong>。这也是为什么如果你的 body 本来是 100% 高度的，被键盘弹上去后，可能变成 120%， 你的body竟然可以滚动了。而且下面没有内容，还是白色的空白区域。<strong>安卓上键盘收起时视窗大小会改变，所以会触发 resize 事件，因此不会有这个问题</strong>。</p>
<p><code>resize</code> 走不通，那怎么让它触发重绘呢？想到 <code>IOS</code> 下，当键盘收起的时候，<code>input</code>不会被 <code>focus</code> 了（可以看到光标消失了），也就是说很有可能触发 <code>blur</code> 事件。经过证实，确实是触发了 blur。所以确定去触发重绘的时机就是 <code>blur</code> 时。</p>
<p>现在的问题就是重绘要怎么写呢？ 以前在 IOS 上遇到了很多渲染的坑，经验告诉我，只要让页面【动一下】就可以了。比如让页面 <code>scrollTop = 0</code>, 或者再 <code>focus</code> 一下，或者 <code>click touch</code>一下之类的。</p>
<p>这里为了让页面不会由于 <code>scrollTop = 0</code> 突然往上一下，就可以设置 <code>scrollTop = scrollTop</code> 也可以。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @blur=fixbug/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fixbug</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.userAgent.iOS) &#123;</span><br><span class="line">   <span class="built_in">document</span>.body &amp;&amp; (<span class="built_in">document</span>.body.scrollTop = <span class="built_in">document</span>.body.scrollTop)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种只能在单一的input上做处理不太好。如果要在所有 input 上都生效可以监听在<code>document</code>上。这时候，只需要判断下是不是 <code>input</code> 或者 <code>textarea</code> 元素就可以了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自行实现是否是 iOS 的判断，一般把 ipad,ipod, iphone 跟 navigagor.userAgent indexOf 一下就行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.userAgent.iOS) &#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'blur'</span>, e =&gt; &#123;</span><br><span class="line">    [<span class="string">'input'</span>, <span class="string">'textarea'</span>].indexOf(e.target.localName) ！== <span class="number">-1</span> &amp;&amp; (<span class="built_in">document</span>.body.scrollTop = <span class="built_in">document</span>.body.scrollTop)</span><br><span class="line">  &#125;, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在写这篇文章的时候，发现也有人碰到了类似的问题，他们是用的 <code>scrollIntoView</code>，我觉得也挺好的。但是不久之前，有同事在 IOS 11 上某个版本的时候，用 <code>scrollIntoView</code>会遇到页面卡住滑不动的情况，并且只在IOS11上的某个小版本出现，担心它还会有同样的问题，所以我们最终还是使用了 <code>document.body.scrollTop</code> 来解决。</p>
<p>他们的代码如下，我也想记录下来日后参考，都大同小异：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;(/iphone|ipod|ipad/i.test(navigator.appVersion)) &amp;&amp; document.addEventListener(&apos;blur&apos;, (e) =&gt; &#123; &apos;input&apos;, &apos;textarea&apos;].includes(e.target.localName) &amp;&amp; document.body.scrollIntoView(false) &#125;, true)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有的时候想想做前端真的是件不容易的事情，尤其是要跟浏览器打交道的时候，突然某天你可能发现之前跑的好好的版本，怎么突然间出问题了，你会先怀疑自己，再去找问题，再去复现问题，再去想怎么 hack。关键是有的时候你知道了怎么hack,有可能还是不知道是谁的bug,为什么会这样。太多外界因素（应用，系统）影响你的判断，并且你可能比较难去干预或者去告诉他你这里有bug。🌹</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;某天发现了一个奇怪的现象。&lt;/p&gt;
&lt;p&gt;一般我们会在点击支付的时候，弹出一个模态框，让用户选择支付渠道。&lt;/p&gt;
&lt;p&gt;突然发现某个IOS微信手机上，当点击输入金额后，用户点击支付，弹窗出现后，&lt;strong&gt;无法点击中弹窗上的渠道。但是却能在非弹窗所在的空白地方，选中有
    
    </summary>
    
    
      <category term="Javascript" scheme="http://sevencai.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>webpack 编译目录原样输出及webpack4 treeshaking小结</title>
    <link href="http://sevencai.github.io/2019/02/22/webpack-%E7%BC%96%E8%AF%91%E7%9B%AE%E5%BD%95%E5%8E%9F%E6%A0%B7%E8%BE%93%E5%87%BA%E5%8F%8Awebpack4-treeshaking%E5%B0%8F%E7%BB%93/"/>
    <id>http://sevencai.github.io/2019/02/22/webpack-编译目录原样输出及webpack4-treeshaking小结/</id>
    <published>2019-02-22T12:16:03.000Z</published>
    <updated>2019-04-17T13:05:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要记录两点</p>
<ol>
<li><p>如何在webpack中编译一个文件夹中的文件并且按照【原目录】输出。</p>
</li>
<li><p>总结在webpack 中使用 treeshaking 的条件。</p>
</li>
</ol>
</blockquote>
<hr>
<h2 id="webpack-编译文件目录并原样输出"><a href="#webpack-编译文件目录并原样输出" class="headerlink" title="webpack 编译文件目录并原样输出"></a>webpack 编译文件目录并原样输出</h2><p><strong>场景是需要编译一个文件夹下的所有js文件，并且把这些js文件都按照【原来的目录结构】输出。</strong></p>
<p>首先编译一个文件夹的所有js文件，比较好做。我们可以使用<code>glob</code>来获取目录下的所有js文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Webpack babel transform config  </span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">  entry: glob.sync(<span class="string">"./src/**/*.js"</span>),  </span><br><span class="line">  </span><br><span class="line">  mode: <span class="string">"production"</span>,  </span><br><span class="line">  </span><br><span class="line">  output: &#123;  </span><br><span class="line">	filename: <span class="string">'[name].js'</span>,  </span><br><span class="line">	path: path.resolve(__dirname, <span class="string">'./'</span>)  </span><br><span class="line">  &#125;,  </span><br><span class="line">  <span class="comment">// .....  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是如果我们像如上这么写，会直接输出一个 main.js 文件。也就是所有被编译的文件都会在同样的一个文件中输出。这不是我想要的，我想要的是【每个文件单独编译，并原样目录输出】。</p>
<p>查找了下 <code>webpack</code> 没有相关的配置, 如果我们要输出<code>module/a/index.js</code>在 <code>dist/module/a/</code>目录下。我们再写 entry 时就可以这么写:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    <span class="string">'module/a/index'</span>: <span class="string">'module/a/index.js'</span>,</span><br><span class="line">    <span class="string">'module/b/index'</span>: <span class="string">'module/b/index.js'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所以为了动态去输出到相应的目录，我们只需要去找到对应的entry即可。比如我们想要原样输出编译后的 src 目录下的文件, 先用 正则匹配到 对应的路径。然后再映射到entry上即可。主要是实现：<br><code>./src/lib/a.js =&gt; ./lib/a.js</code>的map。简单点的demo可能如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>)  </span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)  </span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)  </span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Get all file entries  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEntries</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;  </span><br><span class="line">  <span class="keyword">const</span> entryFiles = glob.sync(<span class="string">"./src/**/*.js"</span>)  </span><br><span class="line">  </span><br><span class="line">  entryFiles.forEach(<span class="function"><span class="params">filepath</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="keyword">let</span> fileDir = <span class="regexp">/.\/src\/(.*?)\.js/</span>.exec(filepath)  </span><br><span class="line">  </span><br><span class="line">    map[fileDir[<span class="number">1</span>]] = filepath  </span><br><span class="line">  &#125;)  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> map  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Webpack babel transform config  </span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">  entry: getEntries(),  </span><br><span class="line">  </span><br><span class="line">  mode: <span class="string">"production"</span>,  </span><br><span class="line">  </span><br><span class="line">  output: &#123;  </span><br><span class="line">    filename: <span class="string">'[name].js'</span>,  </span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./'</span>)  </span><br><span class="line">  &#125;,  </span><br><span class="line">  </span><br><span class="line">  <span class="built_in">module</span>: &#123;  </span><br><span class="line">    rules: [  </span><br><span class="line">      &#123;  </span><br><span class="line">        test: <span class="regexp">/\.js/</span>,  </span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,  </span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>  </span><br><span class="line">      &#125;  </span><br><span class="line">    ]  </span><br><span class="line">  &#125;,  </span><br><span class="line">  </span><br><span class="line">  plugins: [  </span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'lib'</span>]),  </span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123; <span class="string">"process.env.NODE_ENV"</span>: <span class="built_in">JSON</span>.stringify(<span class="string">"production"</span>) &#125;)  </span><br><span class="line">  ]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="webpack-的-treeshaking-条件"><a href="#webpack-的-treeshaking-条件" class="headerlink" title="webpack 的 treeshaking 条件"></a>webpack 的 treeshaking 条件</h2><p>webpack2 的 treeshaking 一般我们经常会用到。最近有浏览了类似的文章，总结下（下面是使用webpack4的相关配置）：</p>
<p><img src="treeshaking.png" alt="文档截图"></p>
<p>也就是说必须得</p>
<p>使用 treeshake 减少文件体积的4个条件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-   使用 ES2015 模块语法（即  `import`  和  `export`）。</span><br><span class="line">-   在项目  `package.json`  文件中，添加一个 &quot;sideEffects&quot; 属性。</span><br><span class="line">-   不能把 ES6 模块用 babel 先转换成 CommonJs, 在`@babel/preset-env`中，这是个默认行为，需要设置 `module: false`禁用掉。先编译成 CommonJs 后webpack就无法分析依赖了。</span><br><span class="line">-   webpack4中设置 mode: production，自动开启压缩, 如果是非webpack4,则需要引入一个能够删除未引用代码(dead code)的压缩工具(minifier)（例如  `UglifyJSPlugin`）。</span><br></pre></td></tr></table></figure>
<p>设置 module 为 false 的原因引用如下：</p>
<blockquote>
<h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a><code>modules</code></h3><p><code>&quot;amd&quot; | &quot;umd&quot; | &quot;systemjs&quot; | &quot;commonjs&quot; | &quot;cjs&quot; | &quot;auto&quot; | false</code>, defaults to  <code>&quot;auto&quot;</code>.<br>Enable transformation of ES6 module syntax to another module type.<br>Setting this to  <code>false</code>  will not transform modules.</p>
</blockquote>
<p>错误示范：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">exports.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>)    </span><br><span class="line">&#125;    </span><br><span class="line">  </span><br><span class="line">exports.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b'</span>)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'./a.js'</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误，需要用 import ,export ES6语法 才能 treeshake</span></span><br><span class="line">api.a()</span><br></pre></td></tr></table></figure></p>
<p>正确示范：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>)  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b'</span>)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>  </span><br><span class="line">a()</span><br></pre></td></tr></table></figure></p>
<p>简单点的示例demo:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js  </span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)  </span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)  </span><br><span class="line"><span class="keyword">const</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">  entry: <span class="string">'./test.mjs'</span>,  </span><br><span class="line">  </span><br><span class="line">  mode: <span class="string">"production"</span>,  </span><br><span class="line">  </span><br><span class="line">  output: &#123;  </span><br><span class="line">    filename: <span class="string">'index.js'</span>,  </span><br><span class="line">	path: path.resolve(__dirname, <span class="string">'./dist'</span>)  </span><br><span class="line">  &#125;,  </span><br><span class="line">  </span><br><span class="line">  <span class="built_in">module</span>: &#123;  </span><br><span class="line">    rules: [  </span><br><span class="line">      &#123;  </span><br><span class="line">        test: <span class="regexp">/\.js/</span>,  </span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,  </span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>  </span><br><span class="line">      &#125;  </span><br><span class="line">    ]  </span><br><span class="line">  &#125;,  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 当 mode 为 development 时，需要开启下面的代码。才能看到`treeshaking`</span></span><br><span class="line">  <span class="comment">// 当 mode 为 production 时，不需要</span></span><br><span class="line">  optimization: &#123;  </span><br><span class="line">    usedExports: <span class="literal">true</span></span><br><span class="line">  &#125;,  </span><br><span class="line">  </span><br><span class="line">  plugins: [  </span><br><span class="line">    <span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;  </span><br><span class="line">      minimize: <span class="literal">true</span>,  </span><br><span class="line">      debug: <span class="literal">false</span>  </span><br><span class="line">  &#125;),  </span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123; <span class="string">"process.env.NODE_ENV"</span>: <span class="built_in">JSON</span>.stringify(<span class="string">"production"</span>) &#125;)  </span><br><span class="line">  ]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="sideEffects怎么理解？"><a href="#sideEffects怎么理解？" class="headerlink" title="sideEffects怎么理解？"></a>sideEffects怎么理解？</h2><p>sideEffects 这个估计再花一个文章也讲不完。大概的表达下是：</p>
<p>很多时候在转换代码后，我们的代码会由于被编译而产生副作用，比如你对一个函数使用了 location.href 或者 window 上加了东西，即使你没有真的使用这个模块，这个模块也会被打包进到dist里去。</p>
<p>所以如果你真的想去除那些完全没有被引用到的，即使有副作用的包：<strong>就应该把这些 包/模块 被标记为 <code>sideEffects: false</code> 了，那么不管它是否真的有副作用，只要它没有被引用到，整个 模块/包 都会被完整的移除。</strong></p>
<p>举个我看到的很好的例子，例子原本出于文章<a href="https://juejin.im/post/5b4ff9ece51d45190c18bb65" target="_blank" rel="noopener"># Webpack 中的 sideEffects 到底该怎么用？</a>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import DevTools from &apos;mobx-react-devtools&apos;;</span><br><span class="line"></span><br><span class="line">class MyApp extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        ...</span><br><span class="line">        &#123; process.env.NODE_ENV === &apos;production&apos; ? null : &lt;DevTools /&gt; &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果你不在webpack4中设置 <code>sideEffects: false</code>， 那么即使 <code>NODE_ENV=production</code>, <code>mobx-react-devtools</code>也会被引入。</p>
<p>所以<strong>如果我们能确定或者想让这个包不对包以外的对象造成影响，那么我们就完全的可以放心设置这个参数了</strong>。</p>
<p><code>sideEffects</code> 不一定是 false, 比如对上面的 <code>babel polly-fill</code> 就可以使用 <code>sideEffects: [&quot;@babel/polly-fill&quot;]</code>，填入不需要 <code>treeshaking</code> 的即可。</p>
<p>再比如，`import ‘@babel/polly-fill’, 实际上你是没有导出任何模块的，如果你不加 sideEffect, webpack就会把整个模块去掉。</p>
<p>或者<code>&quot;sideEffects&quot;: [&quot;*.css&quot;]</code>，我们不需要对css进行 <code>treeshaking</code>。</p>
<p>关于 副作用，推荐一篇文章<a href="https://zhuanlan.zhihu.com/p/32831172" target="_blank" rel="noopener">你的Tree-Shaking并没什么卵用
</a>, 也方便自己后续查阅。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最近主要是想对组里的一些包做优化，做优化的过程中解决了一些问题，也带来了一些新的疑惑。疑惑还没解决，所以还不能总结成文章。虽然不是纠结上面的东西，但也算是纠结了好几天了。(ಥ _ ಥ)</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要记录两点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如何在webpack中编译一个文件夹中的文件并且按照【原目录】输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;总结在webpack 中使用 treeshaking 的条件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="工具/配置" scheme="http://sevencai.github.io/tags/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>2018年度总结</title>
    <link href="http://sevencai.github.io/2018/12/31/2018%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://sevencai.github.io/2018/12/31/2018年度总结/</id>
    <published>2018-12-31T09:44:03.000Z</published>
    <updated>2018-12-31T03:04:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>2018年已经是过去</p>
<p>小时候印象最深的一年是2008年</p>
<p>那一年开了运动会</p>
<p>那一年跟爸爸去了北京</p>
<p>那一年妈妈40岁</p>
<p>那一年我13岁</p>
<p>那一年下了大雪</p>
<p>那一年汶川地震</p>
<p>转眼间10年就过去了，10年，我长大了</p>
<p>那个胆小的我，变了敢于承担的我</p>
<p>那个问爸爸妈妈要钱的我，变成了给爸爸妈妈买东西的我</p>
<p>那个学生，变成了社会人</p>
<p>那个一个人，现在多了一个人和一个狗</p>
<p>多数时候我开心快乐，但是也有时候心情低落，崩溃大哭</p>
<p>我热爱我的工作，但也有时开始会想怎么能少加班</p>
<p>我赚了钱，但是也没有存一分钱，过着不亏待自己和家人的日子</p>
<p>我变了很多，不变的是我还是那个小胖子，我甚至已经会说俏皮话</p>
<p>我爱我的家人，爱我的妈妈，但总觉得自己亏欠她</p>
<p>我虽然每天跟她打电话，但是她总是跟我隐瞒她的心事</p>
<p>工作中遇到过不顺的时候，今年双十一那个星期，那一天，我觉得是我人生中最难过的一天</p>
<p>我不够强大</p>
<p>我今天去了日本，重庆，阳江，世界很大，我也在努力去看看，迈的步子不大，但在前进</p>
<p>我今年工作1年半了。算上实习2年半了</p>
<p>我依旧不化妆，甚至还长胖了5斤</p>
<p>一直在努力想着改变，但有时候很讨厌自己为什么不是那个坚持不懈的人</p>
<p>工作上觉得自己有进步，但是还有很多不足，清晰可见</p>
<p>我做了一些有意义的事情，比如帮助流浪狗，学习急救知识</p>
<p>也做了一些工作上可以节省劳动力的功能，虽然不是 KPI，但是我做的很开心</p>
<p>我有一次连续一个星期熬夜，就睡几个小时的时候的经历</p>
<p>大姨妈还是一样的痛的我想跳楼</p>
<p>我很爱我的小狗狗，但是它好像不太爱我，总咬我的衣服</p>
<p>大龙很棒，生病有点多</p>
<p>我们开始一起会思考未来的职业发展</p>
<p>也有任性的时候，一起哭的时候，一起生病的时候</p>
<p>他经历了一个月的低谷期，不过他很棒，很快就调整过来</p>
<p>迷茫的时候，我会休息一天，调整一天</p>
<p>我开始了每天阅读英语，但是也有漏天的时候</p>
<p>18年，我出了一次车祸，我现在还很清晰的记得那个时刻</p>
<p>过好每一天很重要，因为人生真的不可预测</p>
<p>刚刚跟组里去吃了个饭，今年饭局很多，很开心</p>
<p>今年组里还来了一个妹子，我觉得这是我春天的开始</p>
<p>我写了很多总结今年，但是还是没有勇气发到公司 KM 上</p>
<p>我今年有进步，有认真工作，也有忽然不想干的时候</p>
<p>那些迷茫的时候，我想为什么会有人愿意每天上12小时的班</p>
<p>那些认真工作的时候，我想不写代码真的可惜了</p>
<p>有的时候觉得自己是个胆小鬼</p>
<p>我享受每次写一段很好的代码的时候，享受每次写 created by sevencai 的时候</p>
<p>我在一天天的长大</p>
<p>妈妈在一天天的变老</p>
<p>19年的时候，我就24了</p>
<p>也许今年能存点钱，能圆老妈的门面梦</p>
<p>希望对 PHP,Nodejs 更加深学习</p>
<p>我现在对他们只停留在能做出来东西上（工程上），虽然对一般的工作来说够用了，但更深层次的东西并没有仔细学习过，并且遇到问花费的时间也会多些</p>
<p>也许今年能瘦下来，改掉不剩饭，非要把自己吃撑的坏毛病</p>
<p>也许今年能够工作顺利，明年这个时候，觉得自己又进步了非常多</p>
<p>也许家里人身体都健康，希望身边的人都幸福开心</p>
<p>也许我的愿望19年都会成真</p>
<p>也许我能多读点书</p>
<p>也许我能改变懒惰</p>
<p>也许我真的能坚持下来做一件事情</p>
<p>也许我能变得更加有效率，少加点班</p>
<p>只要有心，从自己开始做出改变，从心里由衷的善良和开朗，坚持和耐心，未来可期，我也相信自己，因为18年已经迈出了一小步了，不是吗</p>
<p>嗯，今天是2018的最后一天，天气很冷</p>
<p>2019，我准备好了，你来吧，嘻嘻🌹</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018年已经是过去&lt;/p&gt;
&lt;p&gt;小时候印象最深的一年是2008年&lt;/p&gt;
&lt;p&gt;那一年开了运动会&lt;/p&gt;
&lt;p&gt;那一年跟爸爸去了北京&lt;/p&gt;
&lt;p&gt;那一年妈妈40岁&lt;/p&gt;
&lt;p&gt;那一年我13岁&lt;/p&gt;
&lt;p&gt;那一年下了大雪&lt;/p&gt;
&lt;p&gt;那一年汶川地震&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://sevencai.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>webpack4读书笔记(二)</title>
    <link href="http://sevencai.github.io/2018/12/23/webpack4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://sevencai.github.io/2018/12/23/webpack4读书笔记-二/</id>
    <published>2018-12-23T04:57:36.000Z</published>
    <updated>2019-04-15T06:51:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章整理了几个点，这篇文章接着记录下我觉得有总结意义的点。</p>
<hr>
<h2 id="loader-和-pugin的区别"><a href="#loader-和-pugin的区别" class="headerlink" title="loader 和 pugin的区别"></a>loader 和 pugin的区别</h2><p>loader上篇总结了：webpack只知道处理 js 类的文件，对于很多其他类型的模块如图片，字体等他不知道怎么处理，这时候就可以设置相关的loader，告诉它怎么处理这些模块。</p>
<p><strong>plugin跟loader不同，我理解plugin是可以在webpack分析执行的某些节点或者生命周期时，做的某些操作。</strong></p>
<p>如 <code>webpackHtmlPlugin</code>,在打包最后处理，生成html文件。 <code>cleanWebpackPlugin</code>，在webpack打包的最开始，把dist目录清空。</p>
<p><code>plugin</code>有点像<code>react.vue</code>里的如<code>mounted, beforeRouteEnter</code>等节点，在某个时刻做某些事情。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> cleanWebpackPlugin(),</span><br><span class="line">  <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">"src/index.html"</span></span><br><span class="line">  &#125;)</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="理解sourceMap和webpack4中sourcemap的使用"><a href="#理解sourceMap和webpack4中sourcemap的使用" class="headerlink" title="理解sourceMap和webpack4中sourcemap的使用"></a>理解sourceMap和webpack4中sourcemap的使用</h2><p>sourcemap 是一个映射关系，映射了打包后的某个代码位置对应于打包前的代码位置，方便开发者定位问题。</p>
<p>webpack4中设置 <code>sourcemap</code> 可以使用 <code>devtool</code> 的值，或者使用<code>SourceMapDevToolPlugin</code>和<code>EvalSourceMapDevToolPlugin</code>，两个不可同时使用。</p>
<p>webpack4, <code>development</code>模式默认的devtool模式是 eval, 若<code>mode=production</code>并且不设置 devtool 则没有 sourcemap。</p>
<p>所有的 sourcemap 可以设置的值，有如下：</p>
<p><img src="devtool3.png" alt="sourcemap devtool"></p>
<p>我觉得可以不用去分别去记忆有哪些类型的sourcemap,所有的sourcemap都是几种关键字组合而成，每种可能代表一个含义，理解其中的关键字，然后再去翻看文档需要哪种即可。</p>
<p>下面看下这几种关键字,理解后再来看上述的就可以理解了。</p>
<hr>
<h2 id="1、-eval"><a href="#1、-eval" class="headerlink" title="1、 eval"></a>1、 eval</h2><p><strong>使用eval包裹模块代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">"// import Test from './Test'\n// import './1.png'\n// import './1.css'\n// new Test()\n\nconsele.log('log data')\n\n\n//# sourceURL=webpack:///./src/index.js?"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="2、-source-map"><a href="#2、-source-map" class="headerlink" title="2、 source-map"></a>2、 source-map</h2><p><strong>产生 .map 文件</strong>，sourcemap 不会和 js 代码耦合在一起。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main.bundle.js</span><br><span class="line">main.bundle.js.map</span><br></pre></td></tr></table></figure></p>
<h2 id="3、-cheap"><a href="#3、-cheap" class="headerlink" title="3、 cheap"></a>3、 cheap</h2><p><strong>不包含列信息</strong>，正常情况下我们只用知道是哪一行就可以了。如果加上哪一列相当于解析更费时间。</p>
<p>如：eval, 此时光标是值在出错的行及列。<br><img src="notcheap.png" alt="eval"></p>
<p>而：<code>cheap-eval-source-map</code>,此时光标只在最前面。<br><img src="ch.png" alt="cheap"></p>
<h2 id="4、inline"><a href="#4、inline" class="headerlink" title="4、inline"></a>4、inline</h2><p>将 .map 文件作为 DataURI嵌入，这种情况将不单独生成 .map 文件，而是跟bundle文件在一个文件里。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUEwQyxnQ0FBZ0M7QUFDMUU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnRUFBd0Qsa0JBQWtCO0FBQzFFO0FBQ0EseURBQWlELGNBQWM7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUF5QyxpQ0FBaUM7QUFDMUUsd0hBQWdILG1CQUFtQixFQUFFO0FBQ3JJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7OztBQUdBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ2xGQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiJtYWluLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2luZGV4LmpzXCIpO1xuIiwiLy8gaW1wb3J0IFRlc3QgZnJvbSAnLi9UZXN0J1xuLy8gaW1wb3J0ICcuLzEucG5nJ1xuLy8gaW1wb3J0ICcuLzEuY3NzJ1xuLy8gbmV3IFRlc3QoKVxuXG5jb25zZWxlLmxvZygnbG9nIGRhdGEnKVxuIl0sInNvdXJjZVJvb3QiOiIifQ=</span></span><br></pre></td></tr></table></figure>
<h2 id="5、module"><a href="#5、module" class="headerlink" title="5、module"></a>5、module</h2><p>除了提示业务代码本身的map外，其他模块如loader，也会被映射有相应的sourcemap。</p>
<p>其实看官方文档会更加清楚，它会讲为什么有些类型是不适合生产或者开发环境，或者能够告诉你什么是 <code>origin code</code> 或者 <code>transformed code</code>。</p>
<p>sourcemap的更加细节的原理，可以参考<a href="http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html" target="_blank" rel="noopener">JavaScript Source Map 详解-阮一峰</a></p>
<hr>
<h2 id="webpack-dev-server-HMR"><a href="#webpack-dev-server-HMR" class="headerlink" title="webpack-dev-server HMR"></a>webpack-dev-server HMR</h2><p>webpack4中开启 </p>
<ol>
<li>开启 <code>devsever hot: true, hotOnly: true</code></li>
<li>使用 <code>new webpack.HotModuleReplacementPlugin()</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: <span class="string">'./dist'</span>, <span class="comment">// 服务器根目录</span></span><br><span class="line">  hot: <span class="literal">true</span>,  <span class="comment">// 开启热更新</span></span><br><span class="line">  open: <span class="literal">true</span>,  <span class="comment">// 自动打开浏览器</span></span><br><span class="line">  hotOnly: <span class="literal">true</span> <span class="comment">// 人更新失败，也不要跟新浏览器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样还不够能实现js的热更新，如果要形成js的热更新，你还要告诉在代码里告诉webpack,我这个模块如果被修改了，要执行什么操作，如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./print.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Accepting the updated printMe module!'</span>);</span><br><span class="line">    printMe();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这告诉了我们如果print.js改变了，则会打印一句话。若果每个地方都这么干，我们写代码会很累，所以可以：</p>
<ol>
<li><strong>借助<code>Vue Loader</code>、<code>React Hot Loader</code></strong>， 此 loader 支持 vue 组件的 HMR，提供开箱即用体验，不用自己再去写<code>module.hot</code></li>
<li><strong>借助于<code>style-loader</code>，使用模块热替换来加载 CSS</strong> ,此 loader 在幕后使用了 <code>module.hot.accept</code>，在 CSS 依赖模块更新之后，会将其 patch(修补) 到 <code>&lt;style&gt;</code> 标签中。</li>
</ol>
<hr>
<h2 id="webpack-babel"><a href="#webpack-babel" class="headerlink" title="webpack babel"></a>webpack babel</h2><p>下面大概记录下整体的流程，以及几个模块之间的联系、区别及注意事项：</p>
<ol>
<li>安装<code>babel-loader</code>,<code>babel-core</code></li>
<li><code>babel-core</code>是babel的核心库,<code>babel-loader</code>是babel与webpack关系的桥梁</li>
<li>在<code>module rule</code>里设置，若是js文件结尾，用<code>babel-loader</code>处理</li>
<li>注意<code>babel-loader</code>只是与webpack打通，不进行es6转换</li>
<li>所以需要安装<code>babel-preset-env</code>,他负责转换新的es6的语法（syntax）,但是不会去转换map或者promise,weakmap, find这种<strong>对象和函数</strong>。只转换语法如箭头函数或者const这种语法</li>
<li>所以需要<code>babel-polyfill</code>,为当前环境提供垫片，转换为新的api,</li>
<li>如果直接引用，所有的都会被打包，所以需要添加<code>useBuiltIns</code>,实现方法转换的按需加载，减少文件提示，根据业务代码里使用情况来打包，体积会减少很多。</li>
<li>但是<code>babel-polyfill</code>是在window上的，会污染全局变量,如果是打包类库或者第三方库就不合适了。</li>
<li>所以需要<code>@babel/plugin-transform-runtime</code>这个插件，这样可以不用污染全局变量。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果是自己的业务代码</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"@babel/polyfill"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="string">'node_modules'</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">'@babel/preset-env'</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                targets: &#123;</span><br><span class="line">                  chrome: <span class="string">"64"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                useBuiltIns: <span class="string">'usage'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// **如果是第三方类库**</span></span><br><span class="line"><span class="comment">// npm install --save-dev @babel/plugin-transform-runtime</span></span><br><span class="line"><span class="comment">// npm install --save @babel/runtime</span></span><br><span class="line"><span class="comment">// npm install --save @babel/runtime-corejs2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="string">'node_modules'</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="string">"plugins"</span>: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">"@babel/plugin-transform-runtime"</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="string">"absoluteRuntime"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"corejs"</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="string">"helpers"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">"regenerator"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">"useESModules"</span>: <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>备注下，<code>babel-preset-env</code>不会转换的有：</p>
<ol>
<li>全局对象，如 <code>Promise</code>, <code>map</code>, <code>WeakMap</code>等</li>
<li>全局函数，如 <code>Array.from</code>, <code>Object,assign</code>等</li>
<li>示例方法，如 <code>Array.prototype.includes</code>等</li>
</ol>
<p>注意<code>presets</code>的执行顺序也是从下往上，从右往左的顺序。如果是第三方类库:</p>
<p>事实上这些配置都可以放在<code>.babelrc</code>文件中。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章主要是自我知识的梳理及记录。</p>
<p>周末在家，总觉得那种没啥事，不用出门，也不用加班，看看游戏视频，看看书遛遛狗的日子，才叫周末。📚🌲</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇文章整理了几个点，这篇文章接着记录下我觉得有总结意义的点。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;loader-和-pugin的区别&quot;&gt;&lt;a href=&quot;#loader-和-pugin的区别&quot; class=&quot;headerlink&quot; title=&quot;loader 和 pugin
    
    </summary>
    
    
      <category term="工具/配置" scheme="http://sevencai.github.io/tags/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>webpack4读书笔试(一)</title>
    <link href="http://sevencai.github.io/2018/12/22/webpack4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AF%95/"/>
    <id>http://sevencai.github.io/2018/12/22/webpack4读书笔试/</id>
    <published>2018-12-22T12:38:39.000Z</published>
    <updated>2019-04-15T06:44:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>今日鸡汤： 优秀的工程师 = 主人翁意识 + 追求卓越的精神</p>
</blockquote>
<p>写这篇文章的目的是因为webpack4的出现，并且发现以前有很多东西其实一直都在用，但是没有很细的了解里面的东西，本篇文章主要梳理下相关内容。</p>
<p>想要把自己知道的和不知道的，都系统的总结下。</p>
<p><strong>webpack模块打包工具  -  a static module bundler</strong></p>
<hr>
<h2 id="webpack4如何做到更快"><a href="#webpack4如何做到更快" class="headerlink" title="webpack4如何做到更快"></a>webpack4如何做到更快</h2><p>需要nodejs版本新 + webpack版本新</p>
<p>webpack 会利用新版 Nodejs 的特性进行更好的优化</p>
<hr>
<h2 id="–save-dev-D"><a href="#–save-dev-D" class="headerlink" title="–save-dev =  -D"></a>–save-dev =  -D</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli --save-dev</span><br><span class="line">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="npx和npm的区别"><a href="#npx和npm的区别" class="headerlink" title="npx和npm的区别"></a>npx和npm的区别</h2><p>npx会去当前文件夹下的 node_modules 找命令<br>npm会去全局找命令，如果找不到，才会去当前的node_modules下<br>如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm webpack -v 是全局的 webpack 版本</span><br><span class="line">npx webpack -v 是当前项目内使用的 webpack 版本</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="安装某个版本的webpack"><a href="#安装某个版本的webpack" class="headerlink" title="安装某个版本的webpack"></a>安装某个版本的webpack</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查看webpack的历史version信息</span><br><span class="line">npm info webpack</span><br><span class="line">// 安装指定版本的version</span><br><span class="line">npm install webpack@version -D</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="webpack查询配置路径"><a href="#webpack查询配置路径" class="headerlink" title="webpack查询配置路径"></a>webpack查询配置路径</h2><p>webpack 需要指定入口文件</p>
<ol>
<li><code>npx webpack index.js</code>入口文件为 <code>index.js</code>, <code>webpack4</code>以<code>index.js</code>作为入口。</li>
<li>若不指定入口，<code>webpack</code>则取找 <code>webpack.config.js</code> 文件，读取配置文件中的<code>entry</code>。</li>
<li>若不指定入口并且没有<code>webpack.config.js</code>文件，则报错。</li>
<li>如果不想用 <code>webpack.config.js</code>，可以使用<code>npx webpack --config webpackconfig.js</code>来指定配置文件。</li>
</ol>
<p>最简单的 demo:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 注意这里是绝对路径，webpack4默认是这个dist路径，如果你不写的话</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    <span class="comment">// filename 可以指定生成的文件的名称</span></span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span>,</span><br><span class="line">    <span class="comment">// filename: '[name].bundle.js',  </span></span><br><span class="line">	<span class="comment">// filename: '[name].js',  </span></span><br><span class="line">	<span class="comment">// filename: '[hash].bundle.js' //b4  </span></span><br><span class="line">	<span class="comment">// filename: '[id].bundle.js'  </span></span><br><span class="line">	<span class="comment">// filename: '[chunkhash].bundle.js',ed  </span></span><br><span class="line">	<span class="comment">// filename: '[contenthash].bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>如下分别是对应的生成结果：</p>
<p><img src="hash.png" alt="相关filename配置"></p>
<p>为什么 <code>[name].js</code>生成的对应是 <code>main.js</code>呢？因为<code>entry: &#39;xxx&#39; = entry: {main: &#39;xxx&#39;}</code>, 省略了名称为 <code>main</code> 的写法。</p>
<p>output还有很多options,可以参照官方文档来看。<a href="https://webpack.js.org/configuration/output/" target="_blank" rel="noopener">output</a></p>
<p>注意一般情况我们不会把 output 里的 filename 直接设置为 bundle.js,这样如果又多个entry,最后都被命名为 bundle.js，webpack就会报错了。一般情况下，我们就设置为<code>[name].bundle.js</code>就挺好的。</p>
<p>output 里面还有我们经常用到的 <code>publicPath</code>, 用于设置静态资源的地址，比如我们可以设置它为cdn的域名路径。<code>//cdn.com/h5</code>,最后html文件中生成的路径可能就是<code>&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.com/h5/main.bundle.js&quot;&gt;&lt;/script&gt;</code>这种我们需要的路径。</p>
<hr>
<h2 id="webpack4-mode"><a href="#webpack4-mode" class="headerlink" title="webpack4 mode"></a>webpack4 mode</h2><p><code>mode: development/production</code> 主要区别在是否压缩。如果配置中不写，默认是 <code>production</code>,并且会有 warning。</p>
<p>webpack打包后控制台信息：<br>hash  本次打包的唯一一个hash值<br>Version  webpack的版本<br>Time  打包耗时<br>Asset  打包后的文件名<br>Size  打包后的文件大小<br>Chunks  打包后文件对应的id<br>Chunk Names  每一个打包后文件对应的打包文件名字</p>
<p><img src="webpack.png" alt="控制台信息"></p>
<p>有的时候有警告是因为没有配置打包的模式：mode，mode有两种设置：默认的是production，代码会被压缩，还可以是development，代码不压缩</p>
<hr>
<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>webpack 默认只知道打包js文件，png,css 等是不知道应该怎么处理的。</p>
<p><strong>所以对于 png, css, vue 这一类的模块资源，我们就得在webpack配置中，告诉webpack怎么打包。具体就是放在 module 里，配置相关的rule，然后用相关的 loader 去处理</strong>。</p>
<p>因此可以理解为：loader就是打包方案，对非js结尾模块，要用loader进行处理。</p>
<hr>
<h2 id="处理图片的loader"><a href="#处理图片的loader" class="headerlink" title="处理图片的loader"></a>处理图片的loader</h2><p>这里举例两种处理图片的loader, <code>file-loader</code>及<code>url-loader</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|jpeg)$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'file-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            name: <span class="string">'[name]_[hash].[ext]'</span>,</span><br><span class="line">            outputPath: <span class="string">'images/'</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多相关配置，要参考 <a href="https://webpack.js.org/loaders/file-loader/#outputpath" target="_blank" rel="noopener">webpack loader</a> 一节。标注两个经常用到的点：</p>
<ol>
<li><code>name</code>标明你要生成图片的名称，比如<code>[name].[ext]</code>就是原文件名输出，<code>[name]_[hash].[ext]</code>就是<code>名称+hash</code>后的文件，如：<code>1_752df31a916202d90967bed23f618507.png</code>。</li>
<li><code>outputPath</code>标明你要把文件放在哪个目录下，如<code>dist/images</code>下。设置这里<code>outputPath</code>还可以是个函数。如下</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">outputPath: <span class="function">(<span class="params">url, resourcePath, context</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/images/</span>.test(context)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`image_output_path/<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`output_path/<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>里面 <code>file-loader</code> 做了两件事情：</p>
<ol>
<li>移动文件到dist文件下</li>
<li>得到图片名称，作为返回值，返回名称</li>
</ol>
<p>注意file-loader不一定是针对图片，对txt等其他文件也是一样的。</p>
<p>还有一个是 <code>url-loader</code>, <code>url-loader</code> 和 <code>file-loader</code>。</p>
<p><code>url-loader</code>可以把图片转换成base64编码，并放于js中。这样的好处是节约了一次http请求，坏处是如果图片太大，转换成的<code>base64</code>太大，就会导致js太大，影响页面的加载和执行。</p>
<p>因此正确使用 <code>url-loader</code> 的形式是如果图片很小，比如是个 <code>icon</code>, 那么用 <code>url-loader</code> 就太适合了。</p>
<p>比如我们可以这么来写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|jpeg|)$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            name: <span class="string">'[name]_[hash].[ext]'</span>,</span><br><span class="line">            outputPath: <span class="string">'images/'</span>,</span><br><span class="line">            limit: <span class="number">20480</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>如果文件比 20k 要大， 则<code>url-loader</code>会自动使用<code>file-loader</code>来处理文件。</p>
<hr>
<h2 id="处理css的loader"><a href="#处理css的loader" class="headerlink" title="处理css的loader"></a>处理css的loader</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rule: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">            <span class="string">'style-loader'</span>,</span><br><span class="line">             &#123;</span><br><span class="line">               loader: <span class="string">'css-loader'</span>,</span><br><span class="line">               options: &#123;</span><br><span class="line">                 importLoaders: <span class="number">2</span>,</span><br><span class="line">                 modules: <span class="literal">true</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="string">'sass-loader'</span>,</span><br><span class="line">             <span class="string">'postcss-loader'</span></span><br><span class="line">           ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：<strong>loader的执行顺序是从下到上，从右到左</strong>，如上面就是先执行 <code>postcss-loader</code>, 最后执行<code>style-loader</code>。其中区别解释如下：</p>
<ol>
<li><code>style-loader</code> 用来把 style 节点添加到 dom 上的，即负责把css代码挂载到<head></head>中间。</li>
<li><code>css-loader</code> 用来把一个或多个css文件合并成一段css代码，比如有多个css文件，可以合成一个。</li>
<li><code>postcss-loader</code> 可以用来帮我们做css添加前缀，或者压缩优化css等工作。一般<code>postcss-loader</code>需要建立一个<code>postcss.config.js</code>用来写相关配置。如：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解释<code>css-loader</code>部分参数的含义：</p>
<ol>
<li><code>importLoaders: 2</code>保证不管是js中引用css文件，还是js中引用js文件，都要从上到下依次进行使用loader, 而不是只有index里面import的css被从下到上执行，而css里面引用的文件不会从下到上执行。</li>
<li><code>modules: true</code>使css支持模块化引用，如不想让某个css文件作用于全局。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">'./1.css'</span></span><br><span class="line"></span><br><span class="line">img.classList.add(style.avatar)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这样，style中的样式可以只针对某些地方生效，而不是全局生效。其实我最经常用的是 <code>import &#39;./1.css&#39;</code> 作用于全局,因为我们的样式都是重构统一给到的。</p>
<hr>
<h2 id="处理字体文件的loader"><a href="#处理字体文件的loader" class="headerlink" title="处理字体文件的loader"></a>处理字体文件的loader</h2><p>当我们再css、sass文件中引入了字体文件，如<code>eot, ttf, svg</code>,如果我们不告诉webpack，webpack会报错<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"iconfont"</span>,</span><br><span class="line">    src: <span class="built_in">url</span>(<span class="string">'./font/iconfont.eot'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因为webpack并不知道如何去处理并引入这些文件，所以我们需要给这些结尾的文件（字体），使用 <code>file-loader</code>，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(eot|ttf|svg)$/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    loader: <span class="string">'file-loader'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>除了上述loader,还有其他如 <code>xml-loader, cvs-loader</code> 等,可以参考着一节。<a href="https://webpack.js.org/guides/asset-management/#loading-fonts" target="_blank" rel="noopener">loader</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">      path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">-   <span class="built_in">module</span>: &#123;</span><br><span class="line">-     rules: [</span><br><span class="line">-       &#123;</span><br><span class="line">-         test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">-         use: [</span><br><span class="line">-           <span class="string">'style-loader'</span>,</span><br><span class="line">-           <span class="string">'css-loader'</span></span><br><span class="line">-         ]</span><br><span class="line">-       &#125;,</span><br><span class="line">-       &#123;</span><br><span class="line">-         test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">-         use: [</span><br><span class="line">-           <span class="string">'file-loader'</span></span><br><span class="line">-         ]</span><br><span class="line">-       &#125;,</span><br><span class="line">-       &#123;</span><br><span class="line">-         test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">-         use: [</span><br><span class="line">-           <span class="string">'file-loader'</span></span><br><span class="line">-         ]</span><br><span class="line">-       &#125;,</span><br><span class="line">-       &#123;</span><br><span class="line">-         test: <span class="regexp">/\.(csv|tsv)$/</span>,</span><br><span class="line">-         use: [</span><br><span class="line">-           <span class="string">'csv-loader'</span></span><br><span class="line">-         ]</span><br><span class="line">-       &#125;,</span><br><span class="line">-       &#123;</span><br><span class="line">-         test: <span class="regexp">/\.xml$/</span>,</span><br><span class="line">-         use: [</span><br><span class="line">-           <span class="string">'xml-loader'</span></span><br><span class="line">-         ]</span><br><span class="line">-       &#125;</span><br><span class="line">-     ]</span><br><span class="line">-   &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇主要跟 loader 相关。理解webpack是任何时候可以把任何类型的文件都当成模块去处理。</p>
<p>理解 loader 是为了告诉 webpack 什么样的文件，应该用什么样的东西处理。</p>
<p>即loader 是打包方案，是告诉 webpack 非 js 结尾的应该怎么处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今日鸡汤： 优秀的工程师 = 主人翁意识 + 追求卓越的精神&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写这篇文章的目的是因为webpack4的出现，并且发现以前有很多东西其实一直都在用，但是没有很细的了解里面的东西，本篇文章主要梳理下相关内容。&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>import or require?</title>
    <link href="http://sevencai.github.io/2018/12/05/import-or-require/"/>
    <id>http://sevencai.github.io/2018/12/05/import-or-require/</id>
    <published>2018-12-05T13:25:18.000Z</published>
    <updated>2018-12-05T07:16:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>之所以会去写这个，是因为自己最近遇到了 import 的一个问题。</p>
<p>找问题的过称中，发现自己虽然一直在用 import，但对 require/import 的区别并没有了解的很全面。</p>
<p>具体的点就在 <code>Imports are hoisted</code>。趁此机会大概的重新总结下。</p>
<hr>
<h2 id="历史追溯"><a href="#历史追溯" class="headerlink" title="历史追溯"></a>历史追溯</h2><blockquote>
<p>了解历史，不一定是使用历史，却可以对整体的知识有个大致的认识。我自己没有经历过 <code>SeaJS/RequireJS</code> 时代，所以对它里面具体的原理实现和用法不是特别熟悉。只是看到组里以前同事的旧代码，才发现那几年确实可能很火。</p>
</blockquote>
<p>关于 CommonJS, RequireJS, SeaJS , 我大致的画了如下一个图来描述：</p>
<p><img src="understandstandard.png" alt="关系图"></p>
<p>总结为下面几点：</p>
<ol>
<li><code>CommonJS</code> 因 <code>Nodejs</code> 而生，是 <strong><code>Nodejs 的规范</code></strong>，一直沿用至今。</li>
<li>由于浏览器端也需要模块化的原因，由 <code>CommonJS</code> 衍生出来了 AMD 和 CMD 规范。</li>
<li>基于 AMD/CMD 规范，出现了两个基于此规范的库。分别是 <code>RequireJS</code>, <code>SeaJS</code>。</li>
<li><code>RequireJS</code> 是 AMD 的规范。特点是：<strong>提前加载</strong>。</li>
<li><code>SeaJS</code> 是 CMD 的规范。特点是：按需加载。<strong>用到时才加载</strong>。</li>
<li>现在新的标准 <code>ES6 import/export</code> 出现，但是很多浏览器还未实现，所以最终还是需要用 <strong>babel 转换成 CommonJS</strong>。</li>
<li><code>import/export</code> 是大势所趋。</li>
</ol>
<p>具体的想看 AMD/CMD 的区别，可以参考 16 年我总结的文件。<a href="https://sevencai.github.io/2016/02/18/AMD%E5%92%8CCMD%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/">AMD和CMD的区别和联系</a>。</p>
<hr>
<h2 id="import-require-区别-Commonjs-pk-ES6"><a href="#import-require-区别-Commonjs-pk-ES6" class="headerlink" title="import / require 区别 (Commonjs pk ES6)"></a>import / require 区别 (Commonjs pk ES6)</h2><p><img src="requireimport.png" alt="require pk import"></p>
<h3 id="写法不同"><a href="#写法不同" class="headerlink" title="写法不同"></a>写法不同</h3><p>CommonJS 的模块化，require/exports 基本上只有下面这几种写法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">exports.fs = fs</span><br><span class="line"><span class="built_in">module</span>.exports = fs</span><br><span class="line"></span><br><span class="line">fs.readFileSync(path)</span><br></pre></td></tr></table></figure></p>
<p>import 的写法多种多样，比如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cookie <span class="keyword">from</span> <span class="string">'./cookie'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getCookie, setCookie &#125; <span class="keyword">from</span> <span class="string">'./cookie'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cookie, &#123; getCookie &#125; <span class="keyword">from</span> <span class="string">'./cookie'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面两者相同</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> cookie &#125; <span class="keyword">from</span> <span class="string">'./cookie'</span></span><br><span class="line"><span class="keyword">import</span> cookie <span class="keyword">from</span> <span class="string">'./cookie'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> cookie</span><br><span class="line"><span class="keyword">export</span> cookie</span><br><span class="line"><span class="keyword">export</span> &#123; getCookie, setCookie &#125;</span><br></pre></td></tr></table></figure></p>
<p>等等写法。 import 比较灵活，并且支持部分模块的导入。不像 require 全部导入。</p>
<h3 id="加载顺序不同-Imports-are-hoisted"><a href="#加载顺序不同-Imports-are-hoisted" class="headerlink" title="加载顺序不同 - Imports are hoisted"></a>加载顺序不同 - Imports are hoisted</h3><p>ES6 模块是编译时加载，使得静态分析成为可能。</p>
<p>import 会提前加载，类似于 JS 里的概念 变量提升。也就可以理解为 import 总被先移到上面去执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'in config'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="attr">port</span>: <span class="number">80</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'begin load'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'load finished'</span>)</span><br></pre></td></tr></table></figure></p>
<p>执行 main.js 将返回：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span> config</span><br><span class="line">begin load</span><br><span class="line">load finished</span><br></pre></td></tr></table></figure></p>
<p>也就是说这么写不会报错：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">renderData()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; renderData &#125; <span class="keyword">from</span> <span class="string">'../util'</span></span><br></pre></td></tr></table></figure></p>
<p>但是这么写会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 报错</span><br><span class="line">if (x === true) &#123;</span><br><span class="line">  import MyModual from &apos;./myModual&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">import x+var from &apos;./&apos; + filename</span><br></pre></td></tr></table></figure></p>
<p>import 是在编译时，if 这些语句都会被忽略，会被提到最上面。因此会报语法错误，而不是执行的错误。所以import export 最好就放在最顶层。不要在函数或者条件语句中。</p>
<p>require 是非静态编译类型。是 CommonsJS 这种，运行时加载,所以可以动态去拼接模块。</p>
<p>对于Require来说运行结果就是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'in config'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;<span class="attr">port</span>: <span class="number">80</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'begin load'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config.mjs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'load finished'</span>)</span><br></pre></td></tr></table></figure></p>
<p>得到的结果，跟我们的预期相同。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">begin load</span><br><span class="line">in config</span><br><span class="line">load finished</span><br></pre></td></tr></table></figure></p>
<h3 id="Imports-只可读-Imports-are-read-only-views-on-exports"><a href="#Imports-只可读-Imports-are-read-only-views-on-exports" class="headerlink" title="Imports 只可读 - Imports are read-only views on exports"></a>Imports 只可读 - Imports are read-only views on exports</h3><p>这点可以阅读这个文档：<a href="http://exploringjs.com/es6/ch_modules.html#sec_imports-as-views-on-exports" target="_blank" rel="noopener">讲的很清楚</a>。看个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; counter, incCounter &#125; <span class="keyword">from</span> <span class="string">'./counter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The imported value `counter` is live</span></span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 3</span></span><br><span class="line">incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p>
<p>上面这种是ok的，但是下面这种是不合法的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; counter, incCounter &#125; <span class="keyword">from</span> <span class="string">'./counter'</span>;</span><br><span class="line"></span><br><span class="line">counter++ <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Note that while you can’t change the values of imports, you can change the objects that they are referring to. For example:</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; obj &#125; <span class="keyword">from</span> <span class="string">'./lib'</span>;</span><br><span class="line"></span><br><span class="line">obj.prop = <span class="number">123</span>; <span class="comment">// OK</span></span><br><span class="line">obj = &#123;&#125;; <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure>
<p>这点我们可以理解为，变量的地址是不能改变的，重新赋值时，变量的地址变了，这个不允许，但是你如果改变对象的里面属性的值，地址是不变的。</p>
<p>这个就像你声明一个 const obj, 也可以更改 Obj.value 一样。</p>
<p>Require 不同，你可以修改里面的内容。</p>
<p>推荐文章： <a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">ruanyifeng-es6-module</a></p>
<h3 id="值引用-or-值拷贝"><a href="#值引用-or-值拷贝" class="headerlink" title="值引用 or 值拷贝"></a>值引用 or 值拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'increase count to'</span>, ++count, <span class="string">'in counter.js after 500ms'</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;count&#125; <span class="keyword">from</span> <span class="string">'./counter.mjs'</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'read count after 1000ms in es6 is'</span>, count)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>得到的结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">increase count to 1 in counter.js after 500ms</span><br><span class="line">read count after 1000ms in es6 is 1</span><br></pre></td></tr></table></figure></p>
<p>另外一段代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js</span></span><br><span class="line">exports.count = <span class="number">0</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'increase count to'</span>, ++exports.count, <span class="string">'in counter.js after 500ms'</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;count&#125; = <span class="built_in">require</span>(<span class="string">'./counter'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'read count after 1000ms in commonjs is'</span>, count)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure></p>
<p>得到的结果是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">increase count to <span class="number">1</span> <span class="keyword">in</span> counter.js after <span class="number">500</span>ms</span><br><span class="line">read count after <span class="number">1000</span>ms <span class="keyword">in</span> commonjs is <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>大概的意思其实就是：<strong>CommonJS模块是运行输出(加载)一个值(或对象)的拷贝，而ES6模块则是编译时输出(加载)一个值的引用(或者叫做连接).</strong></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本地测试 import 时可以使用 <strong><code>--experimental-modules</code> 实验模块标志来启用加载 <code>ECMAScript Modules</code> 的特性</strong>。</p>
<p>作为ES模块加载的文件名，须以.mjs后缀结尾</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node --experimental-modules app.mjs</span><br><span class="line"></span><br><span class="line">// 此种方法，在输出的时候会提示：</span><br><span class="line">(node:6527) ExperimentalWarning: The ESM module loader is experimental.</span><br></pre></td></tr></table></figure>
<p>线上环境还是用 babel 去转 ~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之所以会去写这个，是因为自己最近遇到了 import 的一个问题。&lt;/p&gt;
&lt;p&gt;找问题的过称中，发现自己虽然一直在用 import，但对 require/import 的区别并没有了解的很全面。&lt;/p&gt;
&lt;p&gt;具体的点就在 &lt;code&gt;Imports are hoiste
    
    </summary>
    
    
      <category term="Javascript" scheme="http://sevencai.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>async await 做了什么事情</title>
    <link href="http://sevencai.github.io/2018/12/03/async-await-%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%E4%BA%8B%E6%83%85/"/>
    <id>http://sevencai.github.io/2018/12/03/async-await-做了什么事情/</id>
    <published>2018-12-03T13:10:02.000Z</published>
    <updated>2018-12-04T04:04:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>组里的一个有趣又很严谨的同事，今天在纠结一个不看起来是问题的问题，其实这种感觉就像你经常这么用或者这么想的一个东西，某一天某个时刻，你突然不知道为什么了，就像我偶尔会去纠结为什么某个汉字是这样写：</p>
<p><img src="testasyncawait.png" alt="问题"></p>
<p>他认为最后应该 res === b,而不是 res === a, 我认为很明显应该 res === a, 因为大家平时一直都是这么用的, 但是跟他讲理由的时候，竟然语塞了。</p>
<hr>
<h2 id="关于-async-🚶"><a href="#关于-async-🚶" class="headerlink" title="关于 async 🚶"></a>关于 async 🚶</h2><p>于是我去找了一段 MDN 上的解释：</p>
<blockquote>
<p>当调用一个 async 函数时，<strong>会返回一个 Promise 对象</strong>。当这个 async 函数返回一个值时，<strong>Promise 的 resolve 方法会负责传递这个值</strong>；当 async 函数抛出异常时，Promise 的 reject 方法也会传递这个异常值。</p>
</blockquote>
<p>上面这句话我用两个粗体标明了两句话，第一句话意思明显，意为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>调用 test() 得到的是一个 Promise, 也就是无论函数内返回（return）的是什么（常量 or 字符串 or Promise or 其它）， async 总会用 <code>Promise.resolve</code> 包一层，如若 async 里面有异常， 会 <code>throw Error</code>。</strong></p>
<p><strong>如果 test 内什么都不返回，也会得到 <code>Promise.resolve(undefined)</code>, 总之 async 总返回一个 Promise 对象。</strong></p>
<p>再看后面一句解释： Promise 的 resolve 方法会负责传递这个值；</p>
<p>哇，是不是突然间觉得我同事疑惑的是对的了。其实不要受这句话的影响。它说的传递，其实就是return过去的时候是传递的。总结下： 我们就理解为：async 返回了一个包含改值的 Promise。</p>
<p>分析下面这段代码的执行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test()</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res === a)</span><br><span class="line">    <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>那么为什么 <code>test().then(a =&gt; { a === {} })</code> 又是对的了呢？ 不是说返回了一个 Promise 吗？ 怎么又是一个对象值了？(注意这里是值引用，所以可以直接这么比较)</p>
<p><strong>这是因为 <code>Promise.then</code> 里面会在重新接收这个值的时候，得到的不再是一个 Promise 对象，而是一个被解析过了的值</strong>。 也就是说下面这段代码的含义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回一个 Promise ，内容为 statusCode 404</span></span><br><span class="line">    <span class="keyword">return</span> getServerStatusCode(r);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res 为一个对象，不是一个 Promise, 因为已经被解析过了</span></span><br><span class="line">    <span class="built_in">console</span>.log(res.statusCode);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这个时候，你 then 里面的值，就跟你用 await 得到的一样了。</p>
<hr>
<h2 id="关于-await-👂"><a href="#关于-await-👂" class="headerlink" title="关于 await 👂"></a>关于 await 👂</h2><p>await 等待的是什么呢？</p>
<blockquote>
<p>await  操作符用于等待一个Promise 对象。它只能在异步函数 <code>async function</code> 中使用。</p>
</blockquote>
<p>上面是 MDN 里的说明，我觉得不太对， await 不一定是等待一个 Promise 对象，它要等待的是<strong>一个 Promise 对象或者任何要等待的值。</strong>。</p>
<p>如果它等待的不是一个 Promise 对象，如 await 3 , 那么表达式的运算结果就是它等待的东西。</p>
<p>如果它等待的是一个 Promise 对象， 如 <code>await Promise.resolve(3)</code>, 那么 await 会阻塞后面的代码，等待 Promise 对象 <code>resolve or reject</code>。</p>
<p>看下下面这种情况：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">Promise</span>.reject(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> a &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        obj = <span class="keyword">await</span> abc()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"err"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"main"</span>, obj === a) <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"test"</span>, obj === &#123;&#125;) <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj) <span class="comment">// null</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj) === <span class="built_in">JSON</span>.stringify(a))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>很明显， obj 是等于 null 的，因为 await 等待的是一个 reject 的结果。导致了异常被抛出来了。所以赋值等工作都没有进行。</p>
<blockquote>
<p>await 表达式会暂停当前 <code>async function</code> 的执行，等待 Promise 处理完成。若 Promise 正常处理(fulfilled)，其回调的resolve函数参数作为 await 表达式的值，继续执行 <code>async function</code>。</p>
<p>若 Promise 处理异常(rejected)，await 表达式会把 Promise 的<strong>异常原因抛出</strong>。</p>
<p>另外，如果 await 操作符后的表达式的值不是一个 Promise，则返回该值本身。</p>
</blockquote>
<p>MDN 的解释跟我们理解的相同。也就是说 <strong>await 如果得到的是一个 reject 的结果，会直接 throw 一个 Error 出来。这也是为什么为了避免报错，我们需要对 <code>async await</code> 进行 <code>try catch</code> 的原因</strong>。</p>
<hr>
<h2 id="使用-async-await-要注意的地方"><a href="#使用-async-await-要注意的地方" class="headerlink" title="使用 async await 要注意的地方"></a>使用 async await 要注意的地方</h2><p>async await 设计本身是为了让我们防止地狱回调的，但是是不能够滥用。比如下面这个很经典的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> pizza = <span class="keyword">await</span> selectPizza()</span><br><span class="line">  <span class="keyword">const</span> drink = <span class="keyword">await</span> selectDrink()</span><br><span class="line"></span><br><span class="line">  order(pizza, drink); <span class="comment">// async call</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>
<p>上面的 <code>getPizzaInfo</code> 和 <code>getDrinkInfo</code> 实际并没有任何依赖关系，这么写还增加了等待的时间。所以在用 async await 的时候，一定要充分理解他们的关系。可以优化如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> pizzaPromise = selectPizza();</span><br><span class="line">  <span class="keyword">const</span> drinkPromise = selectDrink();</span><br><span class="line">  <span class="keyword">const</span> pizza = <span class="keyword">await</span> pizzaPromise;</span><br><span class="line">  <span class="keyword">const</span> drink = <span class="keyword">await</span> drinkPromise;</span><br><span class="line">  order(pizza, drink); <span class="comment">// async call</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">Promise</span>.all([selectPizza(), selectDrink()]).then(order); <span class="comment">// async call</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>再举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  b();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">c(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  d();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>最后写成了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> a();</span><br><span class="line"><span class="keyword">await</span> b();</span><br><span class="line"><span class="keyword">await</span> c();</span><br><span class="line"><span class="keyword">await</span> d();</span><br></pre></td></tr></table></figure></p>
<p>这种原本 d 只需要等待 c 的，结果变成要等待 a,b,c。 时间慢了很多。性能不好。稍改一下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aPromise = a()</span><br><span class="line"><span class="keyword">const</span> cPromise = c()</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> aPromise()</span><br><span class="line">b()</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> cPromise()</span><br><span class="line">d()</span><br></pre></td></tr></table></figure>
<p>这样会稍微好点了，但是还是有问题， d由原来的需要等待 c, 变成了需要等待 a,c(如果a的返回时间要大于c)</p>
<p>所以可以改成下面这两种方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span>() &#123;</span><br><span class="line">    <span class="keyword">await</span> a()</span><br><span class="line"></span><br><span class="line">    b()</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span>() &#123;</span><br><span class="line">    <span class="keyword">await</span> c()</span><br><span class="line"></span><br><span class="line">    d()</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者改为</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([a(), c()])</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.all([b(), d()])</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p>
<p>总之用 async, await 的时候得多想想。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有好奇心和探索知识的欲望是好事，当别人问你的问题的时候，如果你不能把别人解释清楚的时候，那么可能他的问题同样就是你的问题~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组里的一个有趣又很严谨的同事，今天在纠结一个不看起来是问题的问题，其实这种感觉就像你经常这么用或者这么想的一个东西，某一天某个时刻，你突然不知道为什么了，就像我偶尔会去纠结为什么某个汉字是这样写：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;testasyncawait.png&quot; a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>总结几个最近遇到的问题</title>
    <link href="http://sevencai.github.io/2018/11/27/%E6%80%BB%E7%BB%93%E5%87%A0%E4%B8%AA%E6%9C%80%E8%BF%91%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://sevencai.github.io/2018/11/27/总结几个最近遇到的问题/</id>
    <published>2018-11-27T13:08:19.000Z</published>
    <updated>2018-11-27T13:19:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了些文章，遇到了写问题，花了点时间总结如下。</p>
<hr>
<h2 id="localhost-和-127-0-0-1"><a href="#localhost-和-127-0-0-1" class="headerlink" title="localhost 和 127.0.0.1"></a>localhost 和 127.0.0.1</h2><p>一般情况下，我们的电脑可能有<strong>三块网卡</strong>。分别是🌹：</p>
<ol>
<li>一块叫 loopback 的虚拟网卡</li>
<li>一块叫 ethernet 的有限网卡</li>
<li>一块叫 wlan 的无限网卡</li>
</ol>
<p>我们电脑的本机 IP ，可以理解为时真实网卡的 IP, 有限和无限分别有一个。是网络出口IP。</p>
<p>现在主要是了解下这个 虚拟的网卡 loopback 它是什么，以及它和 127.0.0.1 的关系。</p>
<p>127.0.0.1 到 127.255.255.255整个都是环回地址(loopback)，用来测试本机的TCP/IP协议栈，发往这段A类地址<strong>数据包不会出网卡，网络设备不会对其做路由</strong>, 也就是只在本地做回环访问，故只能本机访问。</p>
<p><strong>所以环回地址是主机用于向自身发送通信的一个特殊地址，是一个特殊的目的地址。因此如果一台主机上的两项服务如果使用的是环回地址而非分配的主机地址，就可以绕开 TCP/IP 协议栈的下层，不用再通过链路层，物理层，以太网等传出去。</strong></p>
<p><strong>而localhost 是一个 域名，一般指向 127.0.0.1， 实际上它也可以指向任何一个ip, 可以去系统文件中修改</strong>。</p>
<p>之所以去了解这个，其实是因为最近踩了下面个坑，顺带也去了解了下这个。</p>
<hr>
<h2 id="whistle-转发-header-host-被更改问题"><a href="#whistle-转发-header-host-被更改问题" class="headerlink" title="whistle 转发 header host 被更改问题"></a>whistle 转发 header host 被更改问题</h2><p>❎同事B为了在页面内 include 一个 php cgi 返回的 token, 希望能够在 apache 里面配置代理转发，当看到了这个include的 cgi 后，即转发到对应的 机器上。</p>
<p>她发现 php 的接口已经成功转发到测试机器上，但是返回的内容不正常，在帮她调试接口后，发现后台接口验证了 Valid Host, 而她的 host 还是本机的 localhost。</p>
<p>她相关的whistle 配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pay.qq.com  localhost/wechat_h5/dist/h5/store/views/</span><br></pre></td></tr></table></figure></p>
<p>可以通过 pay.qq.com/index.shtml 直接访问到对应的本地页面。但是为什么 header 里面的 host 竟然不是 pay.qq.com 而是 localhost 呢？❌</p>
<p>这里是由于 whistle 导致的。</p>
<p>whistle 对于上面这种配置，<strong>会认为是一个 rule</strong>, 直接整个链接类似被 302 跳转了，导致了 header 里的 host 也被修改为了 localhost, 所以不能通过接口校验。</p>
<p>需要改成如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pay.qq.com/wechat_h5/dist/h5/store/views/ localhost</span><br></pre></td></tr></table></figure></p>
<p>这种情况，<strong>whistle 会认为这是一个 host 代理， header 里面的内容不会受影响</strong>。</p>
<p>两种类似相似的写法，还是有不一样的效果，如果不是这种后台会验证 valid host 的情况，两种都可以用。</p>
<hr>
<h2 id="es6-promise-不支持-finally"><a href="#es6-promise-不支持-finally" class="headerlink" title="es6-promise 不支持 finally?"></a>es6-promise 不支持 finally?</h2><p><code>es6-promise</code> 是一个比较好的 <code>promise polyfill</code> 库 ，但是遗憾的是目前它还不支持 finally，如果用 <code>es6-promise</code> ，又想用 <code>finally</code> ，怎么办呢？可以简单的用 <code>then</code> 来代替 <code>finally</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">printPersonFullName() &#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">'./data/person.json'</span>)</span><br><span class="line">           .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> response.json();</span><br><span class="line">           &#125;)</span><br><span class="line">           .then(<span class="function"><span class="params">person</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;person.firstName&#125;</span> <span class="subst">$&#123;person.lastName&#125;</span>`</span>);</span><br><span class="line">           &#125;)</span><br><span class="line">           .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">           .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">'finally'</span>);</span><br><span class="line">           &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这样最后一个 then 方法一定会进入，及时之前 catch 到了 error。可以简单的来替代 finally。</p>
<hr>
<h2 id="神奇的translate3d"><a href="#神奇的translate3d" class="headerlink" title="神奇的translate3d"></a>神奇的translate3d</h2><p><code>ios safari</code> 下，如果你经常用 <code>position: fixed</code>， 可能会遇到一些奇奇怪怪的问题，比如页面卡住，页面白屏等问题。</p>
<p>这时候你可以试试神奇的 translate3d, 它会触发 GPU 的重新加速。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Element-header</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0,0,0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Element-header--fixed</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>不太了解 CSS 的我，靠这个解决了很多问题。<a href="https://stanko.github.io/ios-safari-scroll-position-fixed/" target="_blank" rel="noopener">相关参考文章</a>。</p>
<p>建议是<code>safari</code>中能不用<code>fixed</code>就不用 <code>fixed</code>。</p>
<hr>
<h2 id="Promise-Anti-patterns"><a href="#Promise-Anti-patterns" class="headerlink" title="Promise Anti-patterns"></a>Promise Anti-patterns</h2><p>最近看了一篇文章，讲的不错，大概讲的就是说常见的一些错误的 Promise 用法。在这里记录下，供自己经常翻看。原文章地址在<a href="http://taoofcode.net/promise-anti-patterns/" target="_blank" rel="noopener">此。</a></p>
<h3 id="Nested-Promises"><a href="#Nested-Promises" class="headerlink" title="Nested Promises"></a>Nested Promises</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">loadSomething().then(<span class="function"><span class="keyword">function</span>(<span class="params">something</span>) </span>&#123;</span><br><span class="line">  loadAnotherthing().then(<span class="function"><span class="keyword">function</span>(<span class="params">another</span>) </span>&#123;</span><br><span class="line">    DoSomethingOnThem(something, another);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>To fix:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.all([loadSomething(), loadAnotherThing()])</span><br><span class="line">    .spread(<span class="function"><span class="keyword">function</span>(<span class="params">something, another</span>) </span>&#123;</span><br><span class="line">        DoSomethingOnThem(something, another);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="The-Broken-Chain"><a href="#The-Broken-Chain" class="headerlink" title="The Broken Chain"></a>The Broken Chain</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">anAsyncCall</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = doSomethingAsync();</span><br><span class="line">    promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        somethingComplicated();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To Fixed:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">anAsyncCall</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = doSomethingAsync();</span><br><span class="line">    <span class="keyword">return</span> promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        somethingComplicated()</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="The-Collection-Kerfuffle"><a href="#The-Collection-Kerfuffle" class="headerlink" title="The Collection Kerfuffle"></a>The Collection Kerfuffle</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workMyCollection</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> resultArr = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_recursive</span>(<span class="params">idx</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (idx &gt;= resultArr.length) <span class="keyword">return</span> resultArr;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> doSomethingAsync(arr[idx]).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">            resultArr.push(res);</span><br><span class="line">            <span class="keyword">return</span> _recursive(idx + <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _recursive(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To fix, use map &amp; reduce:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workMyCollection</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q.all(arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doSomethingAsync(item);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or you want them in series</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workMyCollection</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">promise, item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> doSomethingAsyncWithResult(item, result);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, q());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="The-Ghost-Promise"><a href="#The-Ghost-Promise" class="headerlink" title="The Ghost Promise"></a>The Ghost Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise;</span><br><span class="line"><span class="keyword">if</span> (asyncCallNeeded)</span><br><span class="line">    promise = doSomethingAsync();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    promise = Q.resolve(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    doSomethingCool();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>To fix:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 Q 包一层</span></span><br><span class="line">Q(asyncCallNeeded ? doSomethingAsync() : <span class="number">42</span>)</span><br><span class="line">    .then(</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">            doSomethingGood();</span><br><span class="line">        &#125;)</span><br><span class="line">    .catch(</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            handleTheError();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="The-Overly-Keen-Error-Handler"><a href="#The-Overly-Keen-Error-Handler" class="headerlink" title="The Overly Keen Error Handler"></a>The Overly Keen Error Handler</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">somethingAsync.then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> somethingElseAsync();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        handleMyError(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>To fix :<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 避免上面fufilled内的error不被 catch 到</span></span><br><span class="line">somethingAsync</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> somethingElseAsync();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        handleMyError(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="The-Forgotten-Promise"><a href="#The-Forgotten-Promise" class="headerlink" title="The Forgotten Promise"></a>The Forgotten Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deferred = Q.defer();</span><br><span class="line">doSomethingAsync().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    res = manipulateMeInSomeWay(res);</span><br><span class="line">    deferred.resolve(res);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    deferred.reject(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> deferred.promise;</span><br></pre></td></tr></table></figure>
<p>To fix:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 避免上述无意义的创建 promise</span></span><br><span class="line"><span class="keyword">return</span> doSomethingAsync().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> manipulateMeInSomeWay(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看了一些文章，其实多看看这些总结类的文章，然后自己把自己工作中遇到的问题总结出来是个很好的事情，梳理了自己的脑袋瓜哈哈。 今天好累啊，可能是生病的原因，早点回家了。9点20。给老妈打个☎️，回去再看看书，遛遛狗🐩，完美😊~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了些文章，遇到了写问题，花了点时间总结如下。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;localhost-和-127-0-0-1&quot;&gt;&lt;a href=&quot;#localhost-和-127-0-0-1&quot; class=&quot;headerlink&quot; title=&quot;localhost 和 
    
    </summary>
    
    
      <category term="Javascript" scheme="http://sevencai.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>记几个小知识点</title>
    <link href="http://sevencai.github.io/2018/11/20/%E8%AE%B0%E5%87%A0%E4%B8%AA%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://sevencai.github.io/2018/11/20/记几个小知识点/</id>
    <published>2018-11-20T13:14:33.000Z</published>
    <updated>2018-11-20T13:21:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>好久都没有更新博客了，之前经历了疯狂的一段加班时间，收获了下面一句话，对我来说很珍贵的经验。📒</p>
<p><strong>再短也要记得思考，再忙也要记得时不时停下来，不慌不忙一步步走稳</strong>~📚</p>
</blockquote>
<hr>
<h2 id="在-url-上增加参数"><a href="#在-url-上增加参数" class="headerlink" title="在 url 上增加参数"></a>在 url 上增加参数</h2><p>下面这段是一段给 url 增加参数的代码片段：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在 url 上添加参数</span></span><br><span class="line"><span class="comment"> * @param arr  Array or Object</span></span><br><span class="line"><span class="comment"> * @param url</span></span><br><span class="line"><span class="comment"> * @return &#123;string|*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addParam</span>(<span class="params">arr, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> names = <span class="built_in">Object</span>.keys(arr)</span><br><span class="line">  <span class="keyword">var</span> postfix = serializeParams(arr)</span><br><span class="line"></span><br><span class="line">  url = delParam(names, url)</span><br><span class="line">  url += <span class="regexp">/(\?|&amp;)$/</span>.test(url) ? <span class="string">""</span> + postfix : <span class="regexp">/\?/</span>.test(url) ? <span class="string">"&amp;"</span> + postfix : <span class="string">"?"</span> + postfix</span><br><span class="line">  <span class="keyword">return</span> url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>除去写法问题，逻辑上能看出有什么问题吗❌？</p>
<p>它只支持不带 hash 的增加参数，对于带 hash 的url, 它基本不能使用。因为这个方法已经被其他人使用，为了最小的改动性，可以在上面再封装一次。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addHashParam</span>(<span class="params">arr, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [prefix, suffix] = url.split(<span class="string">"#"</span>)</span><br><span class="line">  <span class="keyword">let</span> addedUrl = addParam(arr, prefix)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (suffix) &#123;</span><br><span class="line">    <span class="keyword">return</span> [addedUrl, <span class="string">"#"</span>, suffix].join(<span class="string">""</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> addedUrl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单的 split 一下，再对 hash 之前的进行 addParam, 最后再拼接回去即可。</p>
<hr>
<h2 id="chrome-breakpoints"><a href="#chrome-breakpoints" class="headerlink" title="chrome breakpoints"></a>chrome breakpoints</h2><p>今天又把 chrome 的 <a href="https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints?hl=zh-cn" target="_blank" rel="noopener">breakpoints 的文档</a>瞟了一遍。希望自己能把下面这个图记清楚：</p>
<p><img src="chromebreakpoint.png" alt="Overview of when to use each breakpoint type"></p>
<p>平时还是得刻意有意的去使用不同的类型断点形式，这样才不会如果突然事件很紧发现问题时，手忙脚乱。</p>
<p>比如上面这些断点类型中， <code>Line-of-code</code>，<code>Conditional line-of-code</code>，<code>Exception</code> 用的比较多，其他几个如 <code>DOM</code>, <code>Xhr</code>, <code>Function</code> 用的比较📒少。</p>
<hr>
<h2 id="关于网络的小知识"><a href="#关于网络的小知识" class="headerlink" title="关于网络的小知识"></a>关于网络的小知识</h2><p>最近公司的网络部分打通了，对于 mac pro 而言，以前非常不好真机调试，现在非常方便了我们。去了解了下这里面的工作。</p>
<blockquote>
<p>同一网段：要判断两个IP地址是不是在同一个网段，就将它们的IP地址分别与<strong>子网掩码</strong>做<strong>与运算</strong>，得到的结果一网络号，如果网络号相同，就在同一子网，否则，不在同一子网。</p>
<p>一般情况下，如果两个设备的 IP 地址前三位都是一样的话，就算是位于同一网段。</p>
</blockquote>
<p>抓包或者真机调试需要电脑和手机在同一网段下。 现在由于网络打通，都在同一局域网内，直接手机上配置代理，连接电脑相应的端口即可。一般我们为了抓包，电脑上会装 fiddler or charles or whistle, 我这里使用 whistle 开启了一个新端口，手机就连这个端口即可抓包。</p>
<p>原先由于我们的手机和电脑不是同一个网络，所以才需要软AP如 小米 WIFI 这种东西去使手机和电脑在同一个网络里，进行抓包。</p>
<p>这里出来了一个新词，叫做 <strong>软AP</strong>。</p>
<p>软AP指的是：<strong>“软AP”的无线产品在市场上颇为常见，软AP就是Soft-AP，它的硬件部分就是一块标准的无线网卡，但其通过驱动程序使其提供与AP一样的信号转接、路由等功能</strong>。与传统AP相比，它的成本很低，功能上也能凑合。</p>
<p>简单的理解话<strong>AP 就是 AccessPoint ,是无限访问热点的简称，无限路由器可以称为 AP, 软AP 则是用软件和无线王卡结合模拟出来的</strong>。</p>
<p>是否需要这个软AP跟我们的网络有关系。若电脑和手机处于一个网段，就不需要软AP创建WIFI网络。若不在一个网络，就需要用到软AP软件。比如你的电脑是连的自家的WIFI,你的手机是4G网络。或者你的电脑是有限网络，手机是无线网络，那么很有可能就不在一个网段上。</p>
<blockquote>
<p>在同一个局域网内是可以相互连接到对方的广播的，也可以冒认接收端来截取数据。或者混乱arp数据包，进行全部抓取。那么如何将mac和iPhone连接到同一个局域网呢？方法一，将两个设备都连接一个wifi路由器；方法二，将mac连接以太网，然后在 系统偏好设置——共享 中设置共享以太网来源的连接，然后用wifi端口共享给电脑（手机）。然后再将手机去连接电脑发散出的wifi。</p>
</blockquote>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>要对未来有信心，要对自己做的事情写的代码抱有信念，要跟随自己的心。（不是对别人的鸡汤，是对自己的鼓励，加油）🌹</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;好久都没有更新博客了，之前经历了疯狂的一段加班时间，收获了下面一句话，对我来说很珍贵的经验。📒&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;再短也要记得思考，再忙也要记得时不时停下来，不慌不忙一步步走稳&lt;/strong&gt;~📚&lt;/p&gt;
&lt;/blockquote
    
    </summary>
    
    
      <category term="笔记" scheme="http://sevencai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>记几个小问题</title>
    <link href="http://sevencai.github.io/2018/08/31/%E8%AE%B0%E5%87%A0%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://sevencai.github.io/2018/08/31/记几个小问题/</id>
    <published>2018-08-31T13:06:47.000Z</published>
    <updated>2018-08-31T13:08:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="swiper-v-for-中-click-不生效"><a href="#swiper-v-for-中-click-不生效" class="headerlink" title="swiper v-for 中 click 不生效"></a>swiper v-for 中 click 不生效</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;swiper-slide</span><br><span class="line">	v-<span class="keyword">for</span>=<span class="string">"(item, index) in bannerAds"</span></span><br><span class="line">	v-bind:key=<span class="string">"index"</span></span><br><span class="line">	@click.native=<span class="string">"linkAds(item)"</span></span><br><span class="line">	:style=<span class="string">"'background-image:url('+ item.url +')'"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/swiper-slide&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你的 swiper 也是使用了 v-for 并且 click 作用在 v-for 所在的元素，那么有可能会导致 click 事件不会执行。这时候试试在用 <code>@click.native</code> 可解决问题。</p>
<p>类似的问题还有 <code>router-link</code> 上加 click 也不生效。方法相同。</p>
<p>一般是自己定义的组件，或者 vue 自定义的标签，如上面的 <code>router-link</code>会有这个问题。</p>
<p>可以理解为，<strong><code>.native</code> 修饰符就是用来注册元素的原生事件而不是组件自定义事件的。是把组件变回原生DOM的一种方式，相当于给组件绑定原生事件。对原生html标签无用。</strong>因为本身Vue是有自己的一套进行传递的机制，这样告诉了Vue,用原生的事件，而不是Vue自己的那一套事件触发机制。</p>
<hr>
<h2 id="对象的-filter"><a href="#对象的-filter" class="headerlink" title="对象的 filter"></a>对象的 filter</h2><p>一般我们会很习惯去用 arr.filter 去帮我们做一些过滤的事情，那么如果是想要给 object map 做一些过滤的事情，我们可以像下面这样封装：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 对象过滤器</span></span><br><span class="line"><span class="comment"> * @param obj</span></span><br><span class="line"><span class="comment"> * @param filterFunction</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">objectFilter</span>(<span class="params">obj, filterFunction</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(</span><br><span class="line">    ...Object.keys(obj)</span><br><span class="line">      .filter(<span class="function"><span class="params">key</span> =&gt;</span> filterFunction(obj[key]))</span><br><span class="line">      .map(<span class="function"><span class="params">key</span> =&gt;</span> (&#123; [key]: obj[key] &#125;))</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象过滤器</span></span><br><span class="line"><span class="comment"> * arr.reduce(callback[, initialValue])</span></span><br><span class="line"><span class="comment"> * callback(accumulator, currentValue, currentIndex, array)</span></span><br><span class="line"><span class="comment"> * @param obj</span></span><br><span class="line"><span class="comment"> * @param filterFunction</span></span><br><span class="line"><span class="comment"> * @returns &#123;&#123;&#125;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">filterObject</span>(<span class="params">obj, filterFunction</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">    .filter(<span class="function"><span class="params">key</span> =&gt;</span> filterFunction(obj[key]))</span><br><span class="line">    .reduce(<span class="function">(<span class="params">res, currKey</span>) =&gt;</span> (res[currKey] = obj[key]), &#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Raven配置某些时候不发送错误数据"><a href="#Raven配置某些时候不发送错误数据" class="headerlink" title="Raven配置某些时候不发送错误数据"></a>Raven配置某些时候不发送错误数据</h2><p><code>shouldSendCallback</code>设置只有 production 环境才发送错误数据，本地的错误内容不发送到 sentry 上。</p>
<p><code>dataCallback</code>在发送数据之前想要做的事情，可以放这里面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Raven.config(<span class="string">"xxxx"</span>, &#123;</span><br><span class="line">  environment: process.env.NODE_ENV,</span><br><span class="line">  release: process.env.VERSION,</span><br><span class="line">  sampleRate: <span class="number">0.1</span>,</span><br><span class="line">  dataCallback: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV != <span class="string">"production"</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;,</span><br><span class="line">  shouldSendCallback: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> process.env.NODE_ENV == <span class="string">"production"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  .addPlugin(RavenVue, Vue)</span><br><span class="line">  .install()</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;swiper-v-for-中-click-不生效&quot;&gt;&lt;a href=&quot;#swiper-v-for-中-click-不生效&quot; class=&quot;headerlink&quot; title=&quot;swiper v-for 中 click 不生效&quot;&gt;&lt;/a&gt;swiper v-for 中
    
    </summary>
    
    
      <category term="Javascript" scheme="http://sevencai.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>The Linux Command Line 读书笔记（三）</title>
    <link href="http://sevencai.github.io/2018/08/23/The-Linux-Command-Line-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://sevencai.github.io/2018/08/23/The-Linux-Command-Line-读书笔记（三）/</id>
    <published>2018-08-23T07:27:57.000Z</published>
    <updated>2018-08-23T07:55:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第11章：shell-环境-🏡"><a href="#第11章：shell-环境-🏡" class="headerlink" title="第11章：shell 环境 🏡"></a>第11章：shell 环境 🏡</h1><blockquote>
<p>shell 在 shell 会话中保存着大量信息。这些信息被称为 (shell 的) 环境。 程序获取环境中的数据（即环境变量）来了解本机的配置。虽然大多数程序用配置文件来存储程序设置， 一些程序会根据环境变量来调整他们的行为。知道了这些，我们就可以用环境变量来自定制 shell 体验。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-   printenv - 打印部分或所有的环境变量</span><br><span class="line">-   <span class="built_in">set</span> - 设置 shell 选项</span><br><span class="line">-   <span class="built_in">export</span> — 导出环境变量，让随后执行的程序知道。</span><br><span class="line">-   <span class="built_in">alias</span> - 创建命令别名</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="printenv-amp-set"><a href="#printenv-amp-set" class="headerlink" title="printenv &amp; set"></a>printenv &amp; set</h2><blockquote>
<p>shell 在环境中存储了两种基本类型的数据，虽然 bash 几乎无法分辨这些数据的类型。 它们是<strong>环境变量和 shell 变量</strong>。Shell 变量是 bash 存放的少量数据。剩下的都是 环境变量。除了变量，shell 也存储了一些可编程的数据，即别名和 shell 函数。</p>
</blockquote>
<p>我们可以用 bash 的内建命令 set，或者是 printenv 程序来查看环境变量。<strong>set 命令可以 显示 shell 或环境变量，而 printenv 只是显示环境变量。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printenv | less</span><br><span class="line"></span><br><span class="line"><span class="comment">// printenv 支持查看某个环境变量</span></span><br><span class="line">printenv USER   =&gt; sevencai</span><br></pre></td></tr></table></figure>
<p>当使用没有带选项和参数的 set 命令时，shell 变量，环境变量，和定义的 shell 函数 都会被显示。不同于 printenv 命令，set 命令的输出很友好地按照首字母顺序排列：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> | less</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$HOME</span></span><br><span class="line"></span><br><span class="line">// 别名无法通过使用 <span class="built_in">set</span> 或 printenv 来查看。 用不带参数的 <span class="built_in">alias</span> 来查看别名:</span><br><span class="line"><span class="built_in">alias</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="如何建立-shell-环境？"><a href="#如何建立-shell-环境？" class="headerlink" title="如何建立 shell 环境？"></a>如何建立 shell 环境？</h2><blockquote>
<p>When we log on to the system, the bash program starts, and reads a series of configuration scripts called startup files, which define the default environment shared by all users. This is followed by more startup files in our home directory that define our personal environment. The exact sequence depends on the type of shell session being started. There are two kinds: a login shell session and a non-login shell session.</p>
</blockquote>
<p>登录shell或者非登录shell都会去读取相应的文件，但是读取的文件多少会有区别。例如：</p>
<p>登录shell可能会读取：</p>
<p><img src="login.png" alt="login"></p>
<p>非登录shell可能会读取：</p>
<p><img src="unlogin.png" alt="unlogin.png"></p>
<p>一个典型的 .bashrc 文件可能长下面这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bash_profile</span></span><br><span class="line"><span class="comment"># Get the aliases and functions</span></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">. ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># User specific environment and startup programs</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure></p>
<p>翻译过来可能是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">If the file ~/.bashrc exists, <span class="keyword">then</span></span><br><span class="line"><span class="built_in">read</span> the ~/.bashrc file.</span><br></pre></td></tr></table></figure></p>
<p><strong>是否曾经对 shell 怎样知道在哪里找到我们在命令行中输入的命令感到迷惑？例如，当我们输入 ls 后， shell 不会查找整个计算机系统来找到 /bin/ls（ls 命令的全路径名），相反，它查找一个目录列表， 这些目录包含在 PATH 变量中。</strong></p>
<p>我们对于文件 .bashrc 的修改不会生效，直到我们关闭终端会话，再重新启动一个新的会话， 因为 .bashrc 文件只是在刚开始启动终端会话时读取。然而，我们可以强迫 bash 重新读取修改过的 .bashrc 文件，使用下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> l.=<span class="string">'ls -d .* --color=auto'</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l --color=auto'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="第12章：-vi简介🐩"><a href="#第12章：-vi简介🐩" class="headerlink" title="第12章： vi简介🐩"></a>第12章： vi简介🐩</h1><p>这个我已经比较熟悉了，这里还是列出下书里的总结，整体的总结书里写的挺好：</p>
<blockquote>
<p>vi（发音“vee eye”），大多数 Linux 发行版不包含真正的 vi；而是自带一款高级替代版本，叫做 vim（它是“vi improved”的简写）由 Bram Moolenaar 开发的。vim 相对于传统的 Unix vi 来说，取得了实质性进步。通常，vim 在 Linux 系统中是“vi”的符号链接（或别名）。</p>
</blockquote>
<h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><p><img src="move.png" alt="move"></p>
<p>补充一个：<code>0,$,^,g_</code>  的区别和联系。<code>0,$</code>是到行头和行尾，<code>^,g_</code>到非blank字符位置。<code>J</code>合并行。</p>
<h2 id="文本删除命令"><a href="#文本删除命令" class="headerlink" title="文本删除命令"></a>文本删除命令</h2><p><img src="delete.png" alt="delete"></p>
<h2 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h2><p><img src="copy.png" alt="copy"></p>
<h2 id="全局查找与替换"><a href="#全局查找与替换" class="headerlink" title="全局查找与替换"></a>全局查找与替换</h2><p>如<code>:%s/Line/line/g</code></p>
<p>查找一行内的是用 <code>f</code> 命令，查找下一个出现的，是用 <code>/</code>命令。</p>
<p><img src="replace.png" alt="replace"></p>
<h2 id="多行编辑"><a href="#多行编辑" class="headerlink" title="多行编辑"></a>多行编辑</h2><ol>
<li>vi file1 file2 file3…</li>
<li>:n 从这个文件切换下一个文件，使用这个 ex 命令</li>
<li>:N 回到先前的文件使用:N</li>
<li>:buffers 我们可以查看正在编辑的文件列表，使用:buffers 命令。运行这个 命令后，屏幕顶部就会显示出一个文件列表, :buffers 2 就切换到2号文件了。</li>
</ol>
<hr>
<h1 id="第13章：自定制-shell-提示符-💉"><a href="#第13章：自定制-shell-提示符-💉" class="headerlink" title="第13章：自定制 shell 提示符 💉"></a>第13章：自定制 shell 提示符 💉</h1><p>和 Linux 内的许多程序一样，shell 提示符是可高度配置的，虽然我们把它相当多地看作是理所当然的， 但是我们一旦学会了怎样控制它，shell 提示符是一个相当有用的工具。</p>
<p>我们的默认提示符如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[me@linuxbox ~]$</span><br></pre></td></tr></table></figure></p>
<p>注意它包含我们的用户名，主机名和当前工作目录，但是它又是怎样得到这些东西的呢？ 结果证明非常简单。提示符是由一个环境变量定义的，叫做 PS1（是“prompt string one” 的简写）。我们可以通过 echo 命令来查看 PS1的内容。</p>
<h2 id="认识-PS1"><a href="#认识-PS1" class="headerlink" title="认识$PS1"></a>认识$PS1</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[me@linuxbox ~]$ <span class="built_in">echo</span> <span class="variable">$PS1</span></span><br><span class="line"><span class="variable">$&#123;ret_status&#125;</span> %&#123;<span class="variable">$fg</span>[cyan]%&#125;%c%&#123;<span class="variable">$reset_color</span>%&#125; $(git_prompt_info)</span><br></pre></td></tr></table></figure>
<h2 id="更改-PS1"><a href="#更改-PS1" class="headerlink" title="更改 $PS1"></a>更改 $PS1</h2><p>我们可以首先备份下 $PS1, 然后再随意修改 $PS1, 最后再重新变回来就可以了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 备份 PS1</span><br><span class="line">ps1_old=<span class="string">"<span class="variable">$PS1</span>"</span></span><br><span class="line"></span><br><span class="line">// 随意修改 PS1</span><br><span class="line">$ PS1=<span class="string">"\a\$ "</span></span><br><span class="line"></span><br><span class="line">// 最后改回来</span><br><span class="line">PS1=<span class="variable">$ps1_old</span></span><br></pre></td></tr></table></figure></p>
<p>其实这个我平时肯定不会用，但是看着看着还挺有意思的，就随意记录了下。</p>
<hr>
<h1 id="总结-🌺"><a href="#总结-🌺" class="headerlink" title="总结 🌺"></a>总结 🌺</h1><p>这几个章节主要是总结了<code>配置文件和 shell 环境</code>这 一张。这章内容少用，但是对于理解整体 shell 是很有帮助的。</p>
<p>时间都是挤出来的，事实证明利用好中午和晚上回家之前的时间，也是能有所收获。📚</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第11章：shell-环境-🏡&quot;&gt;&lt;a href=&quot;#第11章：shell-环境-🏡&quot; class=&quot;headerlink&quot; title=&quot;第11章：shell 环境 🏡&quot;&gt;&lt;/a&gt;第11章：shell 环境 🏡&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;s
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://sevencai.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>The Linux Command Line 读书笔记（二）</title>
    <link href="http://sevencai.github.io/2018/08/17/The-Linux-Command-Line-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://sevencai.github.io/2018/08/17/The-Linux-Command-Line-读书笔记（二）/</id>
    <published>2018-08-17T09:11:25.000Z</published>
    <updated>2018-08-17T09:29:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第九章-权限管理🏫"><a href="#第九章-权限管理🏫" class="headerlink" title="第九章-权限管理🏫"></a>第九章-权限管理🏫</h1><blockquote>
<p>Unix 传统中的操作系统不同于那些 MS-DOS 传统中的系统，区别在于它们不仅是多任务系统，而且也是 多用户系统。这到底意味着什么？它意味着多个用户可以在同一时间使用同一台计算机。<br>为了使多用户特性付诸实践，那么必须发明一种方法来<strong>阻止用户彼此之间受到影响</strong>。毕竟，一个 用户的行为不能导致计算机崩溃，也不能乱动属于另一个用户的文件。</p>
</blockquote>
<p>主要的命令有：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">id – 显示用户身份号（每个用户都会有个 id）</span><br><span class="line">chmod – 更改文件模式</span><br><span class="line"><span class="built_in">umask</span> – 设置默认的文件权限 (这个我基本不会用到，暂时忽略)</span><br><span class="line">su – 以另一个用户的身份来运行 shell</span><br><span class="line">sudo – 以另一个用户的身份来执行命令</span><br><span class="line">chown – 更改文件所有者</span><br><span class="line">chgrp – 更改文件组所有权</span><br><span class="line">passwd – 更改用户密码</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="chmod-更改文件模式"><a href="#chmod-更改文件模式" class="headerlink" title="chmod-更改文件模式"></a>chmod-更改文件模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--    1 sevencai  TENCENT\Domain Users     523  8 15 15:36 README.md</span><br></pre></td></tr></table></figure>
<p><strong>列表的前十个字符是文件的属性。这十个字符的第一个字符表明文件类型。</strong></p>
<p>具体可能有的值有：</p>
<p><img src="firstletter.png" alt="first letter"></p>
<p><strong>剩下的九个字符叫做文件模式，代表着文件所有者、文件组所有者和其他人的读、写和执行权限。</strong></p>
<p><img src="filemode.png" alt="filemode"></p>
<p><img src="attribute.png" alt="attribute"></p>
<p>如<code>-rwxr-xr-x</code>标识的含义是：一个普通文件，对文件所有者来说可读、可写、可执行。也可以被其他的所有人读取和执行。</p>
<p><strong>我们使用八进制数字来设置所期望的权限模式。因为每个八进制数字代表了 3个二进制数字，这种对应关系，正好映射到用来存储文件模式所使用的方案上。</strong></p>
<p>对应的值为：</p>
<p><img src="otcal.png" alt="octal"></p>
<p>通过使用3个八进制数字，我们能够设置文件所有者、用户组和其他人的权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 foo.txt</span><br><span class="line">chmod 755 shell.sh</span><br></pre></td></tr></table></figure>
<p>通过传递参数 “600”，我们能够设置文件所有者的权限为读写权限，而删除用户组和其他人的所有 权限。虽然八进制到二进制的映射看起来不方便，但通常只会用到一些常见的映射关系： 7 (rwx)，6 (rw-)，5 (r-x)，4 (r–)，和 0 (—)。</p>
<p>chmod 命令还支持一种符号表示法，来指定文件模式。符号表示法分为三部分：更改会影响谁， 要执行哪个操作，要设置哪种权限。通过字符 “u”、“g”、“o”和 “a” 的组合来指定 要影响的对象，如下所示：</p>
<p><img src="ugoa.png" alt="ugoa"></p>
<p><strong>如果没有指定字符，则假定使用”all”。执行的操作可能是一个“＋”字符，表示加上一个权限， 一个“－”，表示删掉一个权限，或者是一个“＝”，表示只有指定的权限可用，其它所有的权限被删除。</strong></p>
<p>有下面这些例子（我感觉这种我应该不会经常用，先前一直用上面的二进制模式比较多）：</p>
<p><img src="other.png" alt="ugoa+-"></p>
<hr>
<h2 id="su-及-sudo"><a href="#su-及-sudo" class="headerlink" title="su 及 sudo"></a>su 及 sudo</h2><blockquote>
<p>su － 以其他用户身份和组 ID 运行一个 shell<br>语法类似： su [-[l]] [user]</p>
</blockquote>
<p>如果包含”-l”选项，那么会为指定用户启动一个需要登录的 shell。这意味着会加载此用户的 shell 环境， 并且工作目录会更改到这个用户的家目录。这通常是我们所需要的。如果不指定用户，那么就假定是 超级用户。注意（不可思议地），选项”-l”可以缩写为”-“，这是经常用到的形式。</p>
<p>因此为了启动超级用户我们可能会这样执行<code>su -</code>。</p>
<p>如果以<code>su -c &#39;command&#39;</code>这样的方式启动一个 shell, 是可以执行单个的<code>command</code>命令，而不是重新启动了一个可以交互的shell。注意 command 要用 引号引起来。如<code>su -c &#39;ls -l /root/*&#39;</code>。</p>
<p><strong>sudo 命令在很多方面都相似于 su 命令，但是 sudo 还有一些非常重要的功能。管理员能够配置 sudo 命令，从而允许一个普通用户以不同的身份（通常是超级用户），通过一种非常可控的方式 来执行命令。尤其是，只有一个用户可以执行一个或多个特殊命令时，（更体现了 sudo 命令的方便性）。</strong></p>
<p>执行 <code>sudo -l</code>可以看当前被赋予了哪些权限如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  midas-welfare git:(master) sudo -l</span><br><span class="line">Password:</span><br><span class="line">Matching Defaults entries for sevencai on SEVENCAI-MB2:</span><br><span class="line">    env_reset ......</span><br><span class="line">User sevencai may run the following commands on SEVENCAI-MB2:</span><br><span class="line">    (ALL) ALL</span><br></pre></td></tr></table></figure></p>
<p>所以这里总结下 su 和 sudo 的区别和联系：</p>
<ol>
<li><code>sudo</code> 命令需要输入当前用户的密码，<code>su</code> 命令需要输入 root 用户的密码。</li>
<li><code>sudo</code> 命令只允许使用提升的权限运行单个命令，而 <code>su</code> 命令会启动一个新的 shell，同时允许使用 root 权限运行尽可能多的命令，直到明确退出登录</li>
</ol>
<p><strong>所以根据第一条，我们可以知道就安全性而言，<code>sudo</code> 比 <code>su</code> 更好。<code>su</code>意味着要与其他用户共享 root 密码，这是一件比较危险的事情。并且对于 <code>su</code> 而言如果要撤销特定用户的超级（root）权限，唯一的办法就是更改 root 密码，然后再告知其他用户。很麻烦。但是 <code>sudo</code> 就不一样了,如果想要阻止某个用户访问 root 权限，只需要调整 <code>sudoers</code> 这个文件中的配置即可。</strong></p>
<p>The key difference between <code>sudo</code> and <code>su</code> is <code>sudo</code> runs a command as root, whereas <code>su</code> makes you root.</p>
<hr>
<h2 id="chown-－-更改文件所有者和用户组"><a href="#chown-－-更改文件所有者和用户组" class="headerlink" title="chown － 更改文件所有者和用户组"></a>chown － 更改文件所有者和用户组</h2><p><strong>chown 命令被用来更改文件或目录的所有者和用户组。使用这个命令需要超级用户权限。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [owner][:[group]] file...</span><br></pre></td></tr></table></figure>
<p><img src="chown.png" alt="chown"></p>
<p>下面这个例子比较实用，有两个用户，janet拥有超级用户访问权限，而 tony 没有。用户 janet 想要从 她的家目录复制一个文件到用户 tony 的家目录。因为用户 janet 想要 tony 能够编辑这个文件， janet 把这个文件的所有者更改为 tony:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[janet@linuxbox ~]$ sudo cp myfile.txt ~tony</span><br><span class="line">Password:</span><br><span class="line">[janet@linuxbox ~]$ sudo ls -l ~tony/myfile.txt</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root  root <span class="number">8031</span> <span class="number">2008</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span>:<span class="number">30</span> /home/tony/myfile.txt</span><br><span class="line">[janet@linuxbox ~]$ sudo chown tony: ~tony/myfile.txt</span><br><span class="line">[janet@linuxbox ~]$ sudo ls -l ~tony/myfile.txt</span><br><span class="line">-rw-r--r-- <span class="number">1</span> tony  tony <span class="number">8031</span> <span class="number">2008</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span>:<span class="number">30</span> /home/tony/myfile.txt</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="更改用户密码"><a href="#更改用户密码" class="headerlink" title="更改用户密码"></a>更改用户密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passwd [user]</span><br><span class="line">sudo passwd root 更改 root 用户的密码</span><br></pre></td></tr></table></figure>
<p>passwd 命令将会试着强迫你使用“强”密码。这意味着它会拒绝接受太短的密码、与先前相似的密码、 字典中的单词作为密码或者是太容易猜到的密码。</p>
<hr>
<h1 id="第十章：进程🚓"><a href="#第十章：进程🚓" class="headerlink" title="第十章：进程🚓"></a>第十章：进程🚓</h1><p>内核维护每个进程的信息，以此来保持事情有序。例如，系统分配给每个进程一个数字，这个数字叫做 进程(process) ID 或 PID。PID 号按升序分配，init 进程的 PID 总是1。内核也对分配给每个进程的内存和就绪状态进行跟踪以便继续执行这个进程。 像文件一样，进程也有所有者和用户 ID，有效用户 ID，等等。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-   ps – 报告当前进程快照</span><br><span class="line">-   top – 显示任务</span><br><span class="line">-   <span class="built_in">jobs</span> – 列出活跃的任务</span><br><span class="line">-   <span class="built_in">bg</span> – 把一个任务放到后台执行</span><br><span class="line">-   <span class="built_in">fg</span> – 把一个任务放到前台执行</span><br><span class="line">-   <span class="built_in">kill</span> – 给一个进程发送信号</span><br><span class="line">-   killall – 杀死指定名字的进程</span><br><span class="line">-   shutdown – 关机或重启系统</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><p>查看进程，最常使用地命令（有几个命令）是 ps(process)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br><span class="line"></span><br><span class="line">  PID TTY           TIME CMD</span><br><span class="line">54944 ttys000    0:00.14 /Applications/iTerm.app/Contents/MacOS/iTerm2 --server login -fp sevencai</span><br><span class="line">55003 ttys000    0:00.61 -zsh</span><br><span class="line">10488 ttys001    0:00.27 /Applications/iTerm.app/Contents/MacOS/iTerm2 --server login -fp sevencai</span><br><span class="line">10492 ttys001    0:02.66 -zsh</span><br></pre></td></tr></table></figure></p>
<p>默认情况下，ps 不会显示很多进程信息，只是列出与当前终端会话相关的进程。为了得到更多信息， 我们需要加上一些选项。TTY 是 “Teletype”(直译电传打字机) 的简写，是指进程的控制终端。TIME 字段表示 进程所消耗的 CPU 时间数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加上 “x” 选项（注意没有开头的 “-“ 字符），告诉 ps 命令，展示所有进程，不管它们由什么 终端（如果有的话）控制。在 TTY 一栏中出现的 “?” ，表示没有控制终端。使用这个 “x” 选项，可以 看到我们所拥有的每个进程的信息。</span></span><br><span class="line">ps x</span><br><span class="line">ps x | less</span><br><span class="line"></span><br><span class="line"><span class="comment">// 能够显示属于每个用户的进程信息。使用这个选项，可以唤醒 “BSD 风格” 的输出结果。</span></span><br><span class="line">ps aux</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="用-top-命令动态查看进程"><a href="#用-top-命令动态查看进程" class="headerlink" title="用 top 命令动态查看进程"></a>用 top 命令动态查看进程</h2><p><strong>虽然 ps 命令能够展示许多计算机运行状态的信息，但是它只是提供 ps 命令执行时刻的机器状态快照。 为了看到更多动态的信息，我们使用 <code>top</code> 命令。</strong></p>
<p>top 程序接受一系列从键盘输入的命令。两个最有趣的命令是 h 和 q。h，显示程序的帮助屏幕，q， 退出 top 程序。</p>
<hr>
<h2 id="通过-kill-命令给进程发送信号"><a href="#通过-kill-命令给进程发送信号" class="headerlink" title="通过 kill 命令给进程发送信号"></a>通过 kill 命令给进程发送信号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> [-signal] PID...</span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -1 13546</span><br><span class="line"><span class="built_in">kill</span> -9 pid (我经常用)</span><br></pre></td></tr></table></figure>
<p>具体的 <code>-signal</code> 的可选值，如下所示：</p>
<p><img src="kill.png" alt="kill"></p>
<hr>
<h1 id="总结🌹"><a href="#总结🌹" class="headerlink" title="总结🌹"></a>总结🌹</h1><p>加上这篇文章，<code>The Linux Command Line</code> 的第一章就结束了。我零零散散的花的时间去整理的，中间也去除了一些我基本上不怎么用到的，着重加强了下我经常用到的一些命令。</p>
<p>比如 kill ，我以前经常用到 kill -9, 但是其实一直不知道这个 -9 是什么东西。现在进行稍微系统一点的学习，打命令不再依靠熟悉和曾经用过，而是有理解的。📚❄️</p>
<p>包括还有  sudo 及 su, 以前一直有用过，但是模拟两可，并不知道两者的区别。现在都大致的有了解。以后看运维同学敲命令，我看它敲 su or sudo 就知道它是大概的区别是什么了。想要做什么事情。🐶</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第九章-权限管理🏫&quot;&gt;&lt;a href=&quot;#第九章-权限管理🏫&quot; class=&quot;headerlink&quot; title=&quot;第九章-权限管理🏫&quot;&gt;&lt;/a&gt;第九章-权限管理🏫&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Unix 传统中的操作系统不同于那些 MS-DOS
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://sevencai.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>The Linux Command Line 读书笔记（一）</title>
    <link href="http://sevencai.github.io/2018/08/10/The-Linux-Command-Line-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://sevencai.github.io/2018/08/10/The-Linux-Command-Line-读书笔记（一）/</id>
    <published>2018-08-10T12:54:15.000Z</published>
    <updated>2018-08-10T13:18:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这篇文章是我读 <em>The Linux Command Line</em> 的读书笔记。电子版的书的地址是：<a href="http://billie66.github.io/TLCL/book/index.html" target="_blank" rel="noopener">TLCL</a>。相比于鸟叔，这本书好在比较少，重点比较突出，大部分里面的命令都是我会经常用到的。缺点是也存在少量冗余的内容。不便于我查找和学习。因此我把我需要的东西从中抽取出来，总结并且提炼，以便日后的查找和学习。此篇笔记📒是书的第一章到第九章。</p>
</blockquote>
<h2 id="第一章：什么是-shell🏠"><a href="#第一章：什么是-shell🏠" class="headerlink" title="第一章：什么是 shell🏠"></a>第一章：什么是 shell🏠</h2><p>shell 就是一个程序，它接受从键盘输入的命令， 然后把命令传递给操作系统去执行。几乎所有的 Linux 发行版都提供一个名为 bash 的 来自 GNU 项目的 shell 程序。“bash” 是 “Bourne Again SHell” 的首字母缩写， 所指的是这样一个事实，bash 是最初 Unix 上由 Steve Bourne 写成 shell 程序 sh 的增强版。</p>
<blockquote>
<p>[me@linuxbox ~]$</p>
</blockquote>
<ol>
<li>代表 username@machinename ，后面可能是 $ or #，其中 # 代表了你有 root 权限， 对应的 $ 可能代表的就是普通的用户。</li>
<li>一些简单的命令如下：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date  当前时间</span><br><span class="line">cal  日期</span><br><span class="line">df  查看磁盘剩余空间的数量</span><br><span class="line"><span class="built_in">exit</span>  终止会话</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="第二章：文件系统中跳转"><a href="#第二章：文件系统中跳转" class="headerlink" title="第二章：文件系统中跳转"></a>第二章：文件系统中跳转</h2><p>相关命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span> 打印出当前工作目录名</span><br><span class="line"><span class="built_in">cd</span>  dir 更改目录</span><br><span class="line">ls  列出目录内容，不包括带 . 的隐藏目录</span><br><span class="line">ls  -a 可以列出带 . 隐藏的目录</span><br><span class="line"><span class="built_in">cd</span>  更改工作目录到你的家目录</span><br><span class="line"><span class="built_in">cd</span>  - 更改工作目录到先前的工作目录</span><br><span class="line"><span class="built_in">cd</span>  ~user_name 更改工作目录到用户家目录</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="第三章：探究操作系统"><a href="#第三章：探究操作系统" class="headerlink" title="第三章：探究操作系统"></a>第三章：探究操作系统</h2><p>相关命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls    列出目录内容</span><br><span class="line">file   确定文件类型</span><br><span class="line">less   浏览文件内容</span><br><span class="line"></span><br><span class="line">ls -l    使用 ls 命令的“-l”选项，则结果以长模式输出 === ll</span><br><span class="line">ls -lt   <span class="string">"t"</span>选项按文件修改时间的先后来排序</span><br><span class="line">file filename   查看文件的类型</span><br></pre></td></tr></table></figure></p>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><blockquote>
<p>命令名经常会带有一个或多个用来更正命令行为的选项， 更进一步，选项后面会带有一个或多个参数，这些参数是命令作用的对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> -options arguments</span><br><span class="line">ls -lt --reverse</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><code>options</code> : 选项, 一般是 -l  这种形式，也支持长选项，长选项由两个中划线加上一个字组成。如 <code>--reverse</code>。 当然也有两种合并的。如上。</p>
<p>下面这张图来源于书里的对ls的命令的一部分列举，红色的框是我经常用的：</p>
<p><img src="ls.png" alt="ls"></p>
<h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>less 命令是一个用来浏览文本文件的程序,less 程序允许你前后滚动文件。</p>
<blockquote>
<p>格式为： less filename<br>如 less a.log<br>如 ps -ef | less 以分页的形式查看当前进程 (这个好用)</p>
</blockquote>
<p><img src="less.png" alt="less"></p>
<p>上面这个图里是不是感觉跟 vim 命令很像，我再补充几个，是我经常用到的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-   /字符串：向下搜索<span class="string">"字符串"</span>的功能</span><br><span class="line">-   ?字符串：向上搜索<span class="string">"字符串"</span>的功能</span><br><span class="line">-   n：重复前一个搜索（与 / 或 ? 有关）</span><br><span class="line">-   N：反向重复前一个搜索（与 / 或 ? 有关）</span><br><span class="line">-   b 向后翻一页</span><br><span class="line">-   d 向后翻半页</span><br><span class="line">-   空格键 滚动一页</span><br><span class="line">-   回车键 滚动一行</span><br><span class="line">-   u 向前滚动半页</span><br><span class="line">-   y 向前滚动一行</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="第四章：操作文件和目录"><a href="#第四章：操作文件和目录" class="headerlink" title="第四章：操作文件和目录"></a>第四章：操作文件和目录</h2><p>主要命令有：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-   cp — 复制文件和目录</span><br><span class="line">-   mv — 移动/重命名文件和目录</span><br><span class="line">-   mkdir — 创建目录</span><br><span class="line">-   rm — 删除文件和目录</span><br><span class="line">-   ln — 创建硬链接和符号链接</span><br></pre></td></tr></table></figure></p>
<p>这几个命令我们最熟悉不过了。下面简单的列举了这几个的一些基本用法。</p>
<h3 id="cp-复制文件和目录"><a href="#cp-复制文件和目录" class="headerlink" title="cp 复制文件和目录"></a>cp 复制文件和目录</h3><p><img src="cp.png" alt="cp"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若 file2 存在，则覆盖or重写，若不存在则创建</span></span><br><span class="line">cp file1 file2</span><br><span class="line"></span><br><span class="line"><span class="comment">// -i 代表 info, 所以跟上面相同，只是覆盖or重写会有提示</span></span><br><span class="line">cp -i file1 file2</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制文件 file1 和文件 file2 到目录 dir1。目录 dir1 必须存在</span></span><br><span class="line">cp file1 file2 dir1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用一个通配符，在目录 dir1 中的所有文件都被复制到目录 dir2 中。 dir2 必须已经存在</span></span><br><span class="line">cp dir1<span class="comment">/* dir2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 复制目录 dir1 中的内容到目录 dir2。</span></span><br><span class="line"><span class="comment">// 如果目录 dir2 不存在， 创建目录 dir2，操作完成后，目录 dir2 中的内容和 dir1 中的一样</span></span><br><span class="line"><span class="comment">cp -r dir1 dir2</span></span><br></pre></td></tr></table></figure>
<h3 id="mv-移动和重命名文件"><a href="#mv-移动和重命名文件" class="headerlink" title="mv 移动和重命名文件"></a>mv 移动和重命名文件</h3><p><img src="mv.png" alt="mv"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 file2 存在，它的内容会被 file1 的内容重写。</span></span><br><span class="line"><span class="comment">// 如果 file2 不存在，则创建 file2。 这两种情况下，file1 都不再存在</span></span><br><span class="line">mv file1 file2</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写时会提示用户</span></span><br><span class="line">mv -i file1 file2</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动 file1 和 file2 到目录 dir1 中。dir1 必须已经存在</span></span><br><span class="line">mv file1 file2 dir1</span><br></pre></td></tr></table></figure>
<h3 id="rm-删除文件和目录"><a href="#rm-删除文件和目录" class="headerlink" title="rm - 删除文件和目录"></a>rm - 删除文件和目录</h3><p><img src="rm.png" alt="rm"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默默地删除文件</span></span><br><span class="line">rm file1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了在删除文件之前，提示用户确认信息之外，和上面的命令作用一样</span></span><br><span class="line">rm -i file1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件 file1, 目录 dir1，及 dir1 中的内容</span></span><br><span class="line">rm -r file1 dir1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上，除了如果文件 file1，或目录 dir1 不存在的话，rm 仍会继续执行。</span></span><br><span class="line">rm -rf file1 dir1</span><br></pre></td></tr></table></figure></p>
<p><strong>不要用 <code>rm -rf</code>, 用 <code>rm -ri</code> 吧，给自己一点后悔的余地。</strong></p>
<h3 id="ln-—-创建链接"><a href="#ln-—-创建链接" class="headerlink" title="ln — 创建链接"></a>ln — 创建链接</h3><blockquote>
<p>建立符号链接的目的是为了克服硬链接的两个缺点：硬链接不能跨越物理设备， 硬链接不能关联目录，只能是文件。符号链接是文件的特殊类型，它包含一个指向 目标文件或目录的文本指针。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建硬链接</span></span><br><span class="line">ln file link</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建符号链接（soft）</span></span><br><span class="line">ln -s 源文件 目标文件</span><br><span class="line">ln -s item link</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>关于这里我有一些实际可以用到软硬链接的场景。稍后再补充。</p>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>书里先简单的讲了下通配符，我觉得只看例子就好了。<br><img src="tongpei.png" alt="通配符"></p>
<hr>
<h2 id="第五章：使用命令"><a href="#第五章：使用命令" class="headerlink" title="第五章：使用命令"></a>第五章：使用命令</h2><p>主要的几个有：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="built_in">type</span> – 显示命令的类型</span><br><span class="line">-   <span class="built_in">which</span> – 显示一个可执行程序的位置</span><br><span class="line">-   man – 显示命令手册页</span><br><span class="line">-   apropos – 显示一系列适合的命令</span><br><span class="line">-   info – 显示命令 info</span><br><span class="line">-   whatis – 显示一个命令的简洁描述</span><br><span class="line">-   <span class="built_in">alias</span> – 创建命令别名</span><br></pre></td></tr></table></figure></p>
<p>下面举一些例子，这个更好理解一些：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// <span class="built_in">type</span> 命令是 shell 内部命令，它会显示命令的类别，给出一个特定的命令名（做为参数）</span><br><span class="line"><span class="built_in">type</span> ls     =&gt; ls is an <span class="built_in">alias</span> <span class="keyword">for</span> ls -G</span><br><span class="line"><span class="built_in">type</span> <span class="built_in">cd</span>     =&gt; <span class="built_in">cd</span> is a shell <span class="built_in">builtin</span></span><br><span class="line"><span class="built_in">type</span> <span class="built_in">type</span>   =&gt; <span class="built_in">type</span> is a shell builtins</span><br><span class="line"></span><br><span class="line">// 这个命令只对可执行程序有效，不包括内建命令和命令别名</span><br><span class="line"><span class="built_in">which</span> node  =&gt; /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line"><span class="built_in">which</span> npm   =&gt; /usr/<span class="built_in">local</span>/bin/npm</span><br><span class="line"></span><br><span class="line">// 输入“<span class="built_in">help</span>”，接着是 shell 内部命令名, 注意后面跟的一定要是 <span class="built_in">builtin</span> commands</span><br><span class="line"><span class="built_in">help</span> <span class="built_in">cd</span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">// --<span class="built_in">help</span> - 显示用法信息,它不要求是 <span class="built_in">builtin</span> commands, 是可执行程序即可</span><br><span class="line">mkdir --<span class="built_in">help</span> | less</span><br><span class="line">tar --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">// 许多希望被命令行使用的可执行程序</span><br><span class="line">// 提供了一个正式的文档，叫做手册或手册页(man page)。</span><br><span class="line">// 一个特殊的叫做 man 的分页程序，可用来浏览他们。</span><br><span class="line">man <span class="built_in">which</span></span><br><span class="line">man ls</span><br></pre></td></tr></table></figure></p>
<p>关于 alias 我觉得很好用，单独拿出来：</p>
<p><strong>语法是： <code>alias name=&#39;string&#39;</code>实际上我们平时写 命令 时，是可以几个一起写的，比如 <code>cd /usr; ls; cd -</code>。如果这个命令你经常用，而且不想要每次都打折三个命令，那么你可以把它做成一个别名。这样每次就可以很方便的切换了。如我们给上面一个命令起名叫 test, 在每次起别名前，记得用 type 试下，看这个别名是否被占用了。</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// bash: <span class="built_in">type</span>: foo: not found  可以创建为别名</span><br><span class="line"><span class="built_in">type</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">// <span class="built_in">test</span> is a shell <span class="built_in">builtin</span> 已经被使用了，不能创建了</span><br><span class="line"><span class="built_in">type</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">// <span class="built_in">test</span> 为我们的命令了</span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">test</span>=<span class="string">'cd /usr; ls; cd -'</span></span><br><span class="line"></span><br><span class="line">// 此时我们查看就会显示： foo is aliased to `<span class="built_in">cd</span> /usr; ls ; <span class="built_in">cd</span> -<span class="string">'</span></span><br><span class="line"><span class="string">type test</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="第六章：重定向"><a href="#第六章：重定向" class="headerlink" title="第六章：重定向"></a>第六章：重定向</h2><blockquote>
<p>”I/O”代表输入/输出， 通过这个工具，你可以重定向命令的输入输出，命令的输入来自文件，而输出也存到文件。 也可以把多个命令连接起来组成一个强大的命令管道。</p>
</blockquote>
<p>主要的命令有：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-   cat － 连接文件</span><br><span class="line">-   sort － 排序文本行</span><br><span class="line">-   uniq － 报道或省略重复行</span><br><span class="line">-   grep － 打印匹配行</span><br><span class="line">-   wc － 打印文件中换行符，字，和字节个数</span><br><span class="line">-   head － 输出文件第一部分</span><br><span class="line">-   tail - 输出文件最后一部分</span><br><span class="line">-   tee - 从标准输入读取数据，并同时写到标准输出和文件</span><br></pre></td></tr></table></figure></p>
<h3 id="标准输出重定向"><a href="#标准输出重定向" class="headerlink" title="标准输出重定向"></a>标准输出重定向</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -l ls-output.txt</span><br><span class="line">ls -l /bin/usr &gt; ls-output.txt  不追加，每次都被从头覆盖</span><br><span class="line">ls -l /usr/bin &gt;&gt; ls-output.txt   追加到文件中</span><br><span class="line">&gt; ls-output.txt  清空某个文件</span><br></pre></td></tr></table></figure>
<h3 id="标准错误重定向"><a href="#标准错误重定向" class="headerlink" title="标准错误重定向"></a>标准错误重定向</h3><blockquote>
<p>标准错误重定向没有专用的重定向操作符。为了重定向标准错误，我们必须参考其文件描述符。 一个程序可以在几个编号的文件流中的任一个上产生输出。虽然我们已经将这些文件流的前 三个称作标准输入、输出和错误，shell 内部分别将其称为文件描述符0、1和2。shell 使用文件描述符提供 了一种表示法来重定向文件。因为标准错误和文件描述符2一样，我们用这种 表示法来重定向标准错误：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当 /bin/usr 不存在时报错将输出到 ls-error.txt 中</span></span><br><span class="line">ls -l /bin/usr <span class="number">2</span>&gt; ls-error.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有的时候可能我们需要重定向标准输出和错误到同一个文件</span></span><br><span class="line">ls -l /bin/usr &gt; ls-output.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在的 bash 版本提供了第二种方法，更精简合理的方法来执行这种联合的重定向</span></span><br><span class="line"><span class="comment">// 使用单单一个表示法 &amp;&gt; 来重定向标准输出和错误到文件</span></span><br><span class="line">ls -l /bin/usr &amp;&gt; ls-output.txt</span><br></pre></td></tr></table></figure>
<h3 id="处理不需要的输出"><a href="#处理不需要的输出" class="headerlink" title="处理不需要的输出"></a>处理不需要的输出</h3><p>有时候“沉默是金”，我们不想要一个命令的输出结果，只想把它们扔掉。这种情况 尤其适用于错误和状态信息。系统通过重定向输出结果到一个叫做”/dev/null”的特殊文件， 为我们提供了解决问题的方法。这个文件是系统设备，叫做位存储桶，它可以 接受输入，并且对输入不做任何处理。为了隐瞒命令错误信息，可以像下面这样做。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 处理不需要的输出</span><br><span class="line">ls -l /bin/usr 2&gt; /dev/null</span><br></pre></td></tr></table></figure></p>
<p>上面的比较少用到，基本上我之前没有用到过。</p>
<h3 id="标准输入重定向"><a href="#标准输入重定向" class="headerlink" title="标准输入重定向"></a>标准输入重定向</h3><h4 id="cat-命令"><a href="#cat-命令" class="headerlink" title="cat 命令"></a>cat 命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// cat 命令读取一个或多个文件</span><br><span class="line">// cat 经常被用来显示简短的文本文件不分页</span><br><span class="line">cat [file]</span><br><span class="line">cat z.txt</span><br><span class="line">cat &lt; lazy_dog.txt  将标准输入，输出到 文件中</span><br></pre></td></tr></table></figure>
<h4 id="管道线"><a href="#管道线" class="headerlink" title="管道线"></a>管道线</h4><blockquote>
<p>命令从标准输入读取数据并输送到标准输出的能力被一个称为管道线的 shell 特性所利用。 使用管道操作符”|”（竖杠），一个命令的标准输出可以通过管道送至另一个命令的标准输入：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">command1 | command2</span><br><span class="line">ls -l /usr/bin | less</span><br></pre></td></tr></table></figure>
<p><strong>管道线经常用来对数据完成复杂的操作。有可能会把几个命令放在一起组成一个管道线。 通常，以这种方式使用的命令被称为过滤器。过滤器接受输入，以某种方式改变它，然后 输出它。</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /bin /usr/bin | sort | less</span><br></pre></td></tr></table></figure>
<h4 id="uniq-报道或忽略重复行"><a href="#uniq-报道或忽略重复行" class="headerlink" title="uniq - 报道或忽略重复行"></a>uniq - 报道或忽略重复行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列表中不包含重复句子</span></span><br><span class="line">ls /bin /usr/bin | sort | uniq | less</span><br></pre></td></tr></table></figure>
<h4 id="wc-－-打印行数、字数和字节数"><a href="#wc-－-打印行数、字数和字节数" class="headerlink" title="wc － 打印行数、字数和字节数"></a>wc － 打印行数、字数和字节数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wc（字计数）命令是用来显示文件所包含的行数、字数和字节数</span></span><br><span class="line">wc ls-output.txt</span><br><span class="line"><span class="number">7902</span> <span class="number">64566</span> <span class="number">503634</span> ls-output.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">// ”-l”选项限制命令输出只能 报道行数。添加 wc 到管道线来统计数据，是个很便利的方法</span></span><br><span class="line">ls /bin /usr/bin | sort | uniq | wc -l</span><br></pre></td></tr></table></figure>
<h4 id="grep-－-打印匹配行"><a href="#grep-－-打印匹配行" class="headerlink" title="grep － 打印匹配行"></a>grep － 打印匹配行</h4><p>grep 是个很强大的程序，用来找到文件中的匹配文本。这样使用 grep 命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">”-i”使得 grep 在执行搜索时忽略大小写（通常，搜索是大小写 敏感的），”-v”选项会告诉 grep 只打印不匹配的行。</span><br><span class="line">ls /bin /usr/bin | sort | uniq | grep zip</span><br></pre></td></tr></table></figure></p>
<h4 id="head-tail-－-打印文件开头部分-结尾部分"><a href="#head-tail-－-打印文件开头部分-结尾部分" class="headerlink" title="head / tail － 打印文件开头部分/结尾部分"></a>head / tail － 打印文件开头部分/结尾部分</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// head 命令打印文件的前十行，而 tail 命令打印文件的后十行。 -n 用来指定</span></span><br><span class="line">head -n <span class="number">5</span> ls-output.txt</span><br><span class="line">total <span class="number">343496</span></span><br><span class="line">tail -n <span class="number">5</span> ls-output.txt</span><br><span class="line">ls /usr/bin | tail -n <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tail 有一个选项允许你实时地浏览文件。当观察日志文件的进展时，这很有用，因为它们同时在被写入。</span></span><br><span class="line">tail -f /<span class="keyword">var</span>/log/messages</span><br></pre></td></tr></table></figure>
<p><strong>使用”-f”选项，tail 命令继续监测这个文件，当新的内容添加到文件后，它们会立即 出现在屏幕上。这会一直继续下去直到你输入 Ctrl-c。</strong></p>
<h4 id="tee-－-从-Stdin-读取数据，并同时输出到-Stdout-和文件"><a href="#tee-－-从-Stdin-读取数据，并同时输出到-Stdout-和文件" class="headerlink" title="tee － 从 Stdin 读取数据，并同时输出到 Stdout 和文件"></a>tee － 从 Stdin 读取数据，并同时输出到 Stdout 和文件</h4><p>为了和我们的管道隐喻保持一致，Linux 提供了一个叫做 tee 的命令，这个命令制造了 一个”tee”，安装到我们的管道上。tee 程序从标准输入读入数据，并且同时复制数据 到标准输出（允许数据继续随着管道线流动）和一个或多个文件。当在某个中间处理 阶段来捕捉一个管道线的内容时，这很有帮助。这里，我们重复执行一个先前的例子， 这次包含 tee 命令，在 grep 过滤管道线的内容之前，来捕捉整个目录列表到文件 ls.txt：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/bin | tee ls.txt | grep zip</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="从-shell-眼中看世界-Echo"><a href="#从-shell-眼中看世界-Echo" class="headerlink" title="从 shell 眼中看世界- Echo"></a>从 shell 眼中看世界- Echo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="built_in">echo</span> － 显示一行文本</span><br></pre></td></tr></table></figure>
<p>利用 echo 你可以做下面这些事情。这个 echo 跟 php 里的 echo 非常的像。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> this is a <span class="built_in">test</span></span><br><span class="line">// this is a <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> *</span><br><span class="line">// Applications Desktop Documents Downloads Library Movies Music Pictures Public</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> D*</span><br><span class="line">// Desktop Documents Downloads</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> *s</span><br><span class="line">// Documents Pictures Templates Videos</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [[:upper:]]*</span><br><span class="line">// Desktop Documents Music Pictures Public Templates Videos</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> /usr/*/share</span><br><span class="line">// /usr/a/share  /user/b/share</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ~</span><br><span class="line">// /Users/sevencai</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $((2 + 2))</span><br><span class="line">// 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(($((5**2)) * 3))</span><br><span class="line">// 5*5 *3 = 75</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Front-&#123;A,B,C&#125;-Back</span><br><span class="line">// Front-A-Back Front-B-Back Front-C-Back</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Number_&#123;1,5&#125;</span><br><span class="line">// Number_1 Number_2 Number_3 Number_4 Number_5</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$USER</span></span><br><span class="line">// sevencai</span><br><span class="line"></span><br><span class="line">// 查看有效变量</span><br><span class="line">printenv | less</span><br><span class="line"></span><br><span class="line">// 命令替换</span><br><span class="line"><span class="built_in">echo</span> $(ls)</span><br><span class="line">ls -l $(<span class="built_in">which</span> cp)</span><br><span class="line"></span><br><span class="line"> // 在默认情况下，单词分割机制会在单词中寻找空格，制表符，和换行符，并把它们看作 单词之间的界定符。这意味着无引用的空格，制表符和换行符都不是文本的一部分， 它们只作为分隔符使用。由于它们把单词分为不同的参数，所以在上面的例子中， 命令行包含一个带有四个不同参数的命令。</span><br><span class="line"><span class="built_in">echo</span> this is a    <span class="built_in">test</span></span><br><span class="line">// this is a <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">// <span class="variable">$1</span> 当做第一个变量，因为 `1` 是没有定义的变量，所以为空</span><br><span class="line"><span class="built_in">echo</span> The total is <span class="variable">$100</span>.00</span><br><span class="line">// The total is 00.00</span><br><span class="line"></span><br><span class="line">// 在双引号中，参数展开、算术表达式展开和命令替换仍然有效</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$USER</span> <span class="variable">$((2+2)</span>) <span class="variable">$(cal)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"this is a    test"</span></span><br><span class="line">// this is a    <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<p>这里我觉得大致的了解下就行。因为真实情况下，我用到的非常非常少。</p>
<hr>
<h2 id="键盘高级技巧"><a href="#键盘高级技巧" class="headerlink" title="键盘高级技巧"></a>键盘高级技巧</h2><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><p><img src="jiqiao.png" alt="复制"></p>
<h3 id="剪切复制"><a href="#剪切复制" class="headerlink" title="剪切复制"></a>剪切复制</h3><p><img src="copy.png" alt="剪切"></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天就到这里吧，我担心因为今天已经看了很多了，就后面把这个看完这本书记录下来当做任务去完成了，这样违背了我的初衷。所以有效的时间，做正确的事情。改天我再来总结后面几章节。</p>
<p>回家🌶啦，✈️明天去接我的小狗狗，可乐！！！ 嘻嘻。开心。开心。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇文章是我读 &lt;em&gt;The Linux Command Line&lt;/em&gt; 的读书笔记。电子版的书的地址是：&lt;a href=&quot;http://billie66.github.io/TLCL/book/index.html&quot; target=&quot;_bl
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://sevencai.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>项目总结</title>
    <link href="http://sevencai.github.io/2018/08/09/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://sevencai.github.io/2018/08/09/项目总结/</id>
    <published>2018-08-09T13:23:13.000Z</published>
    <updated>2018-08-09T14:03:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近一个多月加了很多班，做了一个比较紧急的项目 Nodejs + Vue全家桶，感觉自己收获多多。今天已经发布了现网版本，趁热总结和梳理下。</p>
</blockquote>
<hr>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ol>
<li><code>Nodejs koa2</code>,  <code>async await</code>用的很舒适。</li>
<li><code>Vue 全家桶</code>,<code>vue webpack vuex</code>可快速开发。</li>
<li>前后端分离，<code>Nodejs</code> 端纯做 <code>Api</code> 层。</li>
<li><code>pm2</code> 进程管理工具。又熟悉了很多命令和踩了一些坑。</li>
<li><code>log4js</code>日志打印工具。了解了部门的日志规范，用于查询问题。</li>
<li>数据库用的 <code>sequelize</code>。</li>
<li>登录用的 <code>koa-generic-session</code>。</li>
<li>了解了 ToB 的一些概念及思想。</li>
</ol>
<p>以后就抛弃 PHP 这个世界上最好的语言吧。以下主要是自己对自己问题的一些梳理。并不涉及到任何的真实项目代码⌨️🏠。</p>
<hr>
<h2 id="获取用户的IP信息"><a href="#获取用户的IP信息" class="headerlink" title="获取用户的IP信息"></a>获取用户的IP信息</h2><p>在很多种情况下，我们Nodejs层需要把用户的 ip 传给后台的 cgi, cgi 会根据这个 ip 做一些策略，如风控，营销等等。这就涉及到 ip 怎么取的概念，你可能会接触到这几个 ip:</p>
<ol>
<li>ctx.request.ip</li>
<li>ctx.headers[‘x-forwarded-for’]</li>
<li>ctx.headers[‘x-real-ip’]</li>
</ol>
<p>先来普及下 <code>x-forwarded-for</code>及 <code>x-real-ip</code>。</p>
<p><code>x-forwarded-for</code>的格式一般为：<code>X-Forwarded-For: client1, proxy1, proxy2</code>  如：<code>X-Forwarded-For: 1.1.1.1, 2.2.2.2, 3.3.3.3</code></p>
<blockquote>
<p>最左边（client1）是最原始客户端的IP地址, 代理服务器每成功收到一个请求，就把<strong>请求来源IP地址</strong>添加到右边。 在上面这个例子中，这个请求成功通过了三台代理服务器：proxy1, proxy2 及 proxy3。请求由client1发出，到达了proxy3（proxy3可能是请求的终点）。请求刚从client1中发出时，XFF是空的，请求被发往proxy1；通过proxy1的时候，client1被添加到XFF中，之后请求被发往proxy2;通过proxy2的时候，proxy1被添加到XFF中，之后请求被发往proxy3；通过proxy3时，proxy2被添加到XFF中，之后请求的的去向不明，如果proxy3不是请求终点，请求会被继续转发。<strong>鉴于伪造这一字段非常容易，应该谨慎使用X-Forwarded-For字段。正常情况下XFF中最后一个IP地址是最后一个代理服务器的IP地址, 这通常是一个比较可靠的信息来源。</strong> –维基百科</p>
</blockquote>
<p>而 <code>x-real-ip</code>没有相关标准，但是在反向代理和正向代理下，它的值可能不同。<strong>正向代理时，记录的是客户端的真实ip。 反向代理时，记录的是最后一级的代理ip。</strong></p>
<p>所以：<code>x-real-ip</code> 及 <code>x-forwarded-for</code>这两个 ip 就是很普通的请求头，它们是可以被篡改的。比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://www.my.com:8089 -H <span class="string">'X-Forwarded-For: 1.1.1.1'</span> -H <span class="string">'X-Real-IP: 2.2.2.2'</span></span><br></pre></td></tr></table></figure></p>
<p>那么这两个值都容易被篡改，不可信，我们要拿到用户真实的 ip 怎么办呢？</p>
<p>一般在建立  TCP 连接时，会产生真实的 IP, 叫做 <code>Remote Address</code>。因为是建立在 TCP 中，所以这个 ip 不能被篡改。一旦篡改，握手不成功，那么后面自然就没有了。所以如果我们要取真实的 ip,应该从这个字段里取。</p>
<p>实际上应该取那个值，跟你 nginx 的配置有关系。比如一般配置 nginx 反向代理的时候可能这样配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">// 若 XFF 有值，则 <span class="variable">$proxy_add_x_forwarded_for</span> = <span class="variable">$XFF</span>, <span class="variable">$remote_addr</span>  (<span class="variable">$XFF</span>与<span class="variable">$remote_addr</span>逗号分割，<span class="variable">$remote_addr</span>在其后)</span><br><span class="line">// 若 XFF 没有值，则 <span class="variable">$proxy_add_x_forwarded_for</span> = <span class="variable">$remote_addr</span></span><br></pre></td></tr></table></figure></p>
<p>像这样赋值后，如果你是通过 nginx 反向代理来的，nginx 会把用户实际 ip （$remote_addr）赋值给 <code>X-Real-IP</code>,这时候它也是真实的用户IP了。而 XFF 也是有了用户的真实IP。</p>
<p>通过这样的 nginx 配置。整个内容就无法被篡改和构造，我们就可以从 <code>X-Real-IP</code> 和 <code>XFF</code>的最后一截 获得用户真实的 IP 了。</p>
<p>所以我最后是怎么传什么字段给后台的呢？<strong>我最后传的是 <code>x-forwarded-ip</code>， 拿到这一系列的 ip list 后，后台会去通过网段校验，判断出哪个是外网 ip, 然后把这个 ip 当成是用户真实的 ip。</strong> cgi 还是很严谨的。</p>
<p>最开始谈到的 <code>ctx.request.ip</code> 是最后一次的 ip, 所以有可能是代理机器的 ip。</p>
<p>遇到一篇好文章：<a href="https://imququ.com/post/x-forwarded-for-header-in-http.html" target="_blank" rel="noopener">x-forwarded-for-header-in-http</a></p>
<p>一个实例，判断用户IP是否正常：<a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_5" target="_blank" rel="noopener">微信H5支付需判断下单IP和支付IP是否一致</a></p>
<hr>
<h2 id="关于-PM2-的-cluster-模式"><a href="#关于-PM2-的-cluster-模式" class="headerlink" title="关于 PM2 的 cluster 模式"></a>关于 PM2 的 cluster 模式</h2><p>pm2 是很好的进程管理器，有自动重启等功能，并且还自带负载均衡。我这里就不讲具体的 cluster 模式和 pm2 了。就只讲下我遇到的坑。</p>
<p>cluster 模式下，log4js 日志，无法正常打印。这个已经有相关的 issue,地址在<a href="https://github.com/log4js-node/log4js-node/issues/265" target="_blank" rel="noopener">这里</a>。大概的意思是 cluster 模式下，并没有 master 进程，而是只有多个 worker 子进程。而 log4js 只在 master 进程下，才会进行打印日志的操作。之所以这样是因为多个 worker 操作同一个日志文件（一般我们日志文件只有一套配置）可能会导致有错乱等问题。有解决问题的方法，都在那个 issue 里，但是我总觉得不太好。</p>
<p>另一个问题是，在 cluster 模式下，利用 restart 命令无法完全重启进程，fork 模式下就不会，猜测是 cluster 模式有多个 worker, 重启是否需要 restart 指定是哪个子进程才可以？还发现，如果只有一个子进程，不指定也会不能重启。我明天会去验证下。</p>
<p>遇到了一篇好文章： <a href="http://www.acuriousanimal.com/2017/08/20/using-pm2-to-manage-cluster.html" target="_blank" rel="noopener">using-pm2-to-manage-cluster</a></p>
<hr>
<h2 id="登录态验证"><a href="#登录态验证" class="headerlink" title="登录态验证"></a>登录态验证</h2><p>我们利用了<code>koa session</code>, <code>cookie session</code> 这种形式。开始的时候我把这里想复杂了，想要结合微信的登录态。但实际上纯 session cookie 这种反而更好。</p>
<blockquote>
<p>大概流程是：用户登录网站，调用微信登录，拉起授权，授权的地址调用 Nodejs 后台的一个自己封装的接口。在这个接口里获得用户的 openid ，校验用户的权限并且设置 <code>ctx.session.sessionId</code>，然后返回到前端，前端调用后台的接口，通过已经种下的 <code>sessionId</code> 即可判断出用户的权限，然后再返回给前端。前端再针对身份到对应的路由。</p>
</blockquote>
<p>那么你肯定会问，为什么不在直接设置 sessionId 的时候把用户信息返回了呢？这样也可以的，那么相当于你微信授权的回调地址要写一个前端的页面， 然后在这个页面中再来判断用户根据身份到哪个页面。这个前端页面你需要单独的也去维护。这样也是可以的。你也许会问，我不用单独再写个页面，用首页就好了。但是用首页会存在一个问题，就是最终由于授权，你的首页就带上了 code, 还要用 replaceState 什么的去掉，我觉得很不整洁。但是也是可以的。这两种方式本质上都可以。只不过第一种偷懒了，直接redirect到首页，首页再发一次请求。</p>
<p>我用的登录中间件是： <code>koa-generic-session</code>。<code>app.use</code>下面这个中间件即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelizeObj = connectDb.db[dbName]</span><br><span class="line"></span><br><span class="line">sessionConfig.options.store = <span class="keyword">new</span> SequelizeStore(sequelizeObj, &#123;</span><br><span class="line">  sync: <span class="literal">false</span>,</span><br><span class="line">  tableName: <span class="string">'t_session'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> session(sessionConfig.options)</span><br></pre></td></tr></table></figure></p>
<p>存储并没有存在内存中，而是存在了数据库里，这里用的<code>koa-generic-session-sequelize</code>。<strong>不放在内存里的原因是有多台机器，存在内存中不能共享应该会有问题。</strong></p>
<p>设置 session cookie 的时候，在前端 cookie 里，就会有对应的值，然后每次请求页面，都会把这个 cookie 带上，去数据库里找对应的 session 是否失效。如果没有失效，认为ok,那么就可以跳过验证的过称了。</p>
<p>还可以加上 app.keys ，然后再对应的 options 里加上  signkeys。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.keys = [<span class="string">'im a newer secret'</span>, <span class="string">'i like turtle'</span>];</span><br><span class="line">app.keys = <span class="keyword">new</span> KeyGrip([<span class="string">'im a newer secret'</span>, <span class="string">'i like turtle'</span>], <span class="string">'sha256'</span>);</span><br><span class="line"></span><br><span class="line">ctx.cookies.set(<span class="string">'name'</span>, <span class="string">'tobi'</span>, &#123; <span class="attr">signed</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>这样，你的 cookie 的值，就会被加密了。前端看到的 cookie 可能是一个加密过的串。然后你到服务器端 get cookie 的时候，它会自动帮你解密。得到对应的值去和数据库里的session进行比对。</p>
<p>那如果前端的微信登录态过期了怎么办呢？比较简单，前端发现登录态失败，比如登录态失败的返回码是1111，那么1111时重新拉起微信登录即可。</p>
<hr>
<h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><p>日志管理对于一个大型的项目来说，尤其是涉及到支付的非常重要，他用于帮你查看用户做了什么事情，或者系统出了什么❌。非常的重要。</p>
<p><strong>日志我这里用的 log4js, 分为了四种 category, 分别用来记录 db 操作，访问日志，开发者 debug 信息，cgi 信息日志，错误日志。这些需要放在不同的文件里，便于开发者找问题。</strong></p>
<p>你可以设置不同的 categories, 每个 categories 里设置 level 和不同的 appenders。 每一个 appenders 都可以设置不同 filename 等等。</p>
<p>那么这个 db 的操作日志，怎么打印呢？ sequelize 建立跟 db 链接时，可以传入 logging 这个 option, 在这个 logging 里设置 sequelize 的打印方法。如下面我就是把打印db的操作日志通过 log4js 打入了日志中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.options.logging = <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">  dbLogger.debug(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="koa2-的错误处理"><a href="#koa2-的错误处理" class="headerlink" title="koa2 的错误处理"></a>koa2 的错误处理</h2><p>这个错误处理的方法，网上到处都是的了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误处理中间件</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    ctx.response.status = err.statusCode || err.status || <span class="number">500</span></span><br><span class="line"></span><br><span class="line">    ctx.response.body = &#123;</span><br><span class="line">      message: <span class="string">'系统繁忙，请稍后再试!'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.app.emit(<span class="string">'error'</span>, err, ctx)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js 中接收 error 事件，并且上报到错误日志中</span></span><br><span class="line">app.on(<span class="string">'error'</span>, (err, ctx) =&gt; &#123;</span><br><span class="line"> ctx.errorLogger(<span class="string">`name=<span class="subst">$&#123;err.name&#125;</span>&amp;msg=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(err.message)&#125;</span>&amp;stack=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(err.stack)&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这里注意如果你直接打印的是 err 对象，一般只有它的 msg 会被打印出来，如果你想要更多信息，一定要把 stack 打出来。这个我疏忽了，同事帮我提出来了，很棒很优秀。</p>
<p>我去网上查了下，这个错误处理其实是 koa2 里的默认方式，只不过我们又自己去重写了，他本身的是这样的：</p>
<p>可以看下这篇文档：<a href="https://github.com/koajs/koa/blob/master/docs/error-handling.md#default-error-handler" target="_blank" rel="noopener">error-handling.md#default-error-handler</a></p>
<p>他里面推荐了一种写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// will only respond with JSON</span></span><br><span class="line">    ctx.status = err.statusCode || err.status || <span class="number">500</span>;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">      message: err.message</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><strong>我觉得这种写法并不是很好，因为如果你这个是数据库的某些地方出错了，可能会在 err.message 里暴露一些你机器 ip 及一些其他的信息，这个是不安全的。统一给用户一个回复，然后打到系统错误日志中，是比较好的做法。</strong></p>
<p>这里途中看到了一篇文章： <a href="http://www.52cik.com/2018/05/27/koa-error.html" target="_blank" rel="noopener">大概讲的是koa错误处理的写法</a></p>
<p>注意错误处理最好被当做最前面的一个中间件。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>先写这么多，其实还有很多很小的细节。下次再整理整理，当然上面只是我自己的理解，可能也有我理解错了的。我会经常看它，然后看自己是否后面又新的认识来推翻现在的想法。这个项目是我跟着组里另外一个很多年经验的老司机一起做的，在他身上，我学习到了严谨的态度。有很多地方他都比我有经验，也给我指出了一些问题。所以说公司和老板给他那么多工资是应该的啊。优秀哈哈。👍📚</p>
<p>🌲希望下次有机会试下 Vue SSR。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近一个多月加了很多班，做了一个比较紧急的项目 Nodejs + Vue全家桶，感觉自己收获多多。今天已经发布了现网版本，趁热总结和梳理下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; 
    
    </summary>
    
    
      <category term="Nodejs" scheme="http://sevencai.github.io/tags/Nodejs/"/>
    
  </entry>
  
</feed>
